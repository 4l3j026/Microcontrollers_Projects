

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
<<<<<<< HEAD
                                                                                               Fri Dec 22 22:33:39 2023
=======
                                                                                               Sat Dec 23 00:57:46 2023
>>>>>>> ae3a397b6585b009a46c050ad90d82d5f2a5114e

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     
    55                           	psect	idataCOMRAM
    56   007E7C                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _Text2
    60   007E7C  41                 	db	65
    61   007E7D  6D                 	db	109
    62   007E7E  61                 	db	97
    63   007E7F  7A                 	db	122
    64   007E80  69                 	db	105
    65   007E81  6E                 	db	110
    66   007E82  67                 	db	103
    67   007E83  21                 	db	33
    68   007E84  00                 	db	0
    69   007E85  00                 	db	0
    70   007E86  00                 	db	0
    71   007E87  00                 	db	0
    72   007E88  00                 	db	0
    73   007E89  00                 	db	0
    74   007E8A  00                 	db	0
    75   007E8B  00                 	db	0
    76                           
    77                           ;initializer for _Text1
    78   007E8C  49                 	db	73
    79   007E8D  74                 	db	116
    80   007E8E  27                 	db	39
    81   007E8F  73                 	db	115
    82   007E90  20                 	db	32
    83   007E91  4C                 	db	76
    84   007E92  69                 	db	105
    85   007E93  76                 	db	118
    86   007E94  65                 	db	101
    87   007E95  21                 	db	33
    88   000000                     _LATE1	set	31849
    89   000000                     _LATD	set	3980
    90   000000                     _TRISBbits	set	3987
    91   000000                     _ADCON1	set	4033
    92   000000                     _OSCCON	set	4051
    93   000000                     _LATE0	set	31848
    94   000000                     _INTCON2bits	set	4081
    95   000000                     _INTCONbits	set	4082
    96   000000                     _RCONbits	set	4048
    97   000000                     _TRISD	set	3989
    98   000000                     _TRISE	set	3990
    99                           
   100                           ; #config settings
   101                           
   102                           	psect	cinit
   103   007E96                     __pcinit:
   104                           	callstack 0
   105   007E96                     start_initialization:
   106                           	callstack 0
   107   007E96                     __initialization:
   108                           	callstack 0
   109                           
   110                           ; Initialize objects allocated to COMRAM (26 bytes)
   111                           ; load TBLPTR registers with __pidataCOMRAM
   112   007E96  0E7C               	movlw	low __pidataCOMRAM
   113   007E98  6EF6               	movwf	tblptrl,c
   114   007E9A  0E7E               	movlw	high __pidataCOMRAM
   115   007E9C  6EF7               	movwf	tblptrh,c
   116   007E9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   117   007EA0  6EF8               	movwf	tblptru,c
   118   007EA2  EE00  F001         	lfsr	0,__pdataCOMRAM
   119   007EA6  EE10 F01A          	lfsr	1,26
   120   007EAA                     copy_data0:
   121   007EAA  0009               	tblrd		*+
   122   007EAC  CFF5 FFEE          	movff	tablat,postinc0
   123   007EB0  50E5               	movf	postdec1,w,c
   124   007EB2  50E1               	movf	fsr1l,w,c
   125   007EB4  E1FA               	bnz	copy_data0
   126   007EB6                     end_of_initialization:
   127                           	callstack 0
   128   007EB6                     __end_of__initialization:
   129                           	callstack 0
   130   007EB6  0100               	movlb	0
   131   007EB8  EF20  F03F         	goto	_main	;jump to C main() function
   132                           
   133                           	psect	dataCOMRAM
   134   000001                     __pdataCOMRAM:
   135                           	callstack 0
   136   000001                     _Text2:
   137                           	callstack 0
   138   000001                     	ds	16
   139   000011                     _Text1:
   140                           	callstack 0
   141   000011                     	ds	10
   142                           
   143                           	psect	cstackCOMRAM
   144   00001B                     __pcstackCOMRAM:
   145                           	callstack 0
   146   00001B                     ??_LCD_Instructions:
   147   00001B                     ?_strlen:
   148                           	callstack 0
   149   00001B                     strlen@s:
   150                           	callstack 0
   151                           
   152                           ; 2 bytes @ 0x0
   153   00001B                     	ds	1
   154   00001C                     LCD_Instructions@Instruction:
   155                           	callstack 0
   156                           
   157                           ; 1 bytes @ 0x1
   158   00001C                     	ds	1
   159   00001D                     Set_Instruction@S_Instruction:
   160                           	callstack 0
   161   00001D                     Write_Instruction@W_Instruction:
   162                           	callstack 0
   163   00001D                     strlen@a:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x2
   167   00001D                     	ds	1
   168   00001E                     
   169                           ; 1 bytes @ 0x3
   170   00001E                     	ds	1
   171   00001F                     Test@i:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x4
   175   00001F                     	ds	2
   176   000021                     Test@j:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x6
   180   000021                     	ds	2
   181   000023                     
   182                           ; 1 bytes @ 0x8
   183 ;;
   184 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   185 ;;
   186 ;; *************** function _main *****************
   187 ;; Defined at:
   188 ;;		line 39 in file "main.c"
   189 ;; Parameters:    Size  Location     Type
   190 ;;		None
   191 ;; Auto vars:     Size  Location     Type
   192 ;;		None
   193 ;; Return value:  Size  Location     Type
   194 ;;                  1    wreg      void 
   195 ;; Registers used:
   196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   197 ;; Tracked objects:
   198 ;;		On entry : 0/0
   199 ;;		On exit  : 0/0
   200 ;;		Unchanged: 0/0
   201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   202 ;;      Params:         0       0       0       0       0       0       0       0       0
   203 ;;      Locals:         0       0       0       0       0       0       0       0       0
   204 ;;      Temps:          0       0       0       0       0       0       0       0       0
   205 ;;      Totals:         0       0       0       0       0       0       0       0       0
   206 ;;Total ram usage:        0 bytes
   207 ;; Hardware stack levels required when called: 3
   208 ;; This function calls:
   209 ;;		_Configuration
   210 ;;		_Test
   211 ;; This function is called by:
   212 ;;		Startup code after reset
   213 ;; This function uses a non-reentrant model
   214 ;;
   215                           
   216                           	psect	text0
   217   007E40                     __ptext0:
   218                           	callstack 0
   219   007E40                     _main:
   220                           	callstack 28
   221   007E40                     
   222                           ;main.c: 42:     Configuration();
   223   007E40  EC97  F03F         	call	_Configuration	;wreg free
   224   007E44                     
   225                           ;main.c: 43:     Test();
   226   007E44  ECB5  F03F         	call	_Test	;wreg free
   227   007E48                     l43:
   228   007E48  EF24  F03F         	goto	l43
   229   007E4C  EF00  F000         	goto	start
   230   007E50                     __end_of_main:
   231                           	callstack 0
   232                           
   233 ;; *************** function _Test *****************
   234 ;; Defined at:
   235 ;;		line 114 in file "main.c"
   236 ;; Parameters:    Size  Location     Type
   237 ;;		None
   238 ;; Auto vars:     Size  Location     Type
   239 ;;  j               2    6[COMRAM] int 
   240 ;;  i               2    4[COMRAM] int 
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      void 
   243 ;; Registers used:
   244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   250 ;;      Params:         0       0       0       0       0       0       0       0       0
   251 ;;      Locals:         4       0       0       0       0       0       0       0       0
   252 ;;      Temps:          0       0       0       0       0       0       0       0       0
   253 ;;      Totals:         4       0       0       0       0       0       0       0       0
   254 ;;Total ram usage:        4 bytes
   255 ;; Hardware stack levels used: 1
   256 ;; Hardware stack levels required when called: 2
   257 ;; This function calls:
   258 ;;		_Set_Instruction
   259 ;;		_Write_Instruction
   260 ;;		_strlen
   261 ;; This function is called by:
   262 ;;		_main
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text1
   267   007F6A                     __ptext1:
   268                           	callstack 0
   269   007F6A                     _Test:
   270                           	callstack 28
   271   007F6A                     
   272                           ;main.c: 116:     Set_Instruction(0x80);
   273   007F6A  0E80               	movlw	128
   274   007F6C  EC28  F03F         	call	_Set_Instruction
   275   007F70                     
   276                           ;main.c: 118:     for (int i = 0; i < strlen(Text1); i++) {
   277   007F70  0E00               	movlw	0
   278   007F72  6E20               	movwf	(Test@i+1)^0,c
   279   007F74  0E00               	movlw	0
   280   007F76  6E1F               	movwf	Test@i^0,c
   281   007F78  EFC9  F03F         	goto	l845
   282   007F7C                     l841:
   283                           
   284                           ;main.c: 120:         Write_Instruction(Text1[i]);
   285   007F7C  0E11               	movlw	low _Text1
   286   007F7E  241F               	addwf	Test@i^0,w,c
   287   007F80  6ED9               	movwf	fsr2l,c
   288   007F82  0E00               	movlw	high _Text1
   289   007F84  2020               	addwfc	(Test@i+1)^0,w,c
   290   007F86  6EDA               	movwf	fsr2h,c
   291   007F88  50DF               	movf	indf2,w,c
   292   007F8A  EC33  F03F         	call	_Write_Instruction
   293   007F8E                     
   294                           ;main.c: 122:     }
   295   007F8E  4A1F               	infsnz	Test@i^0,f,c
   296   007F90  2A20               	incf	(Test@i+1)^0,f,c
   297   007F92                     l845:
   298   007F92  0E11               	movlw	low _Text1
   299   007F94  6E1B               	movwf	strlen@s^0,c
   300   007F96  0E00               	movlw	high _Text1
   301   007F98  6E1C               	movwf	(strlen@s+1)^0,c
   302   007F9A  EC5E  F03F         	call	_strlen	;wreg free
   303   007F9E  501B               	movf	?_strlen^0,w,c
   304   007FA0  5C1F               	subwf	Test@i^0,w,c
   305   007FA2  501C               	movf	(?_strlen+1)^0,w,c
   306   007FA4  5820               	subwfb	(Test@i+1)^0,w,c
   307   007FA6  A0D8               	btfss	status,0,c
   308   007FA8  EFD8  F03F         	goto	u51
   309   007FAC  EFDA  F03F         	goto	u50
   310   007FB0                     u51:
   311   007FB0  EFBE  F03F         	goto	l841
   312   007FB4                     u50:
   313   007FB4                     
   314                           ;main.c: 125:     Set_Instruction(0xC0);
   315   007FB4  0EC0               	movlw	192
   316   007FB6  EC28  F03F         	call	_Set_Instruction
   317   007FBA                     
   318                           ;main.c: 127:     for (int j = 0; j < strlen(Text2); j++) {
   319   007FBA  0E00               	movlw	0
   320   007FBC  6E22               	movwf	(Test@j+1)^0,c
   321   007FBE  0E00               	movlw	0
   322   007FC0  6E21               	movwf	Test@j^0,c
   323   007FC2  EFEE  F03F         	goto	l855
   324   007FC6                     l851:
   325                           
   326                           ;main.c: 129:         Write_Instruction(Text2[j]);
   327   007FC6  0E01               	movlw	low _Text2
   328   007FC8  2421               	addwf	Test@j^0,w,c
   329   007FCA  6ED9               	movwf	fsr2l,c
   330   007FCC  0E00               	movlw	high _Text2
   331   007FCE  2022               	addwfc	(Test@j+1)^0,w,c
   332   007FD0  6EDA               	movwf	fsr2h,c
   333   007FD2  50DF               	movf	indf2,w,c
   334   007FD4  EC33  F03F         	call	_Write_Instruction
   335   007FD8                     
   336                           ;main.c: 131:     }
   337   007FD8  4A21               	infsnz	Test@j^0,f,c
   338   007FDA  2A22               	incf	(Test@j+1)^0,f,c
   339   007FDC                     l855:
   340   007FDC  0E01               	movlw	low _Text2
   341   007FDE  6E1B               	movwf	strlen@s^0,c
   342   007FE0  0E00               	movlw	high _Text2
   343   007FE2  6E1C               	movwf	(strlen@s+1)^0,c
   344   007FE4  EC5E  F03F         	call	_strlen	;wreg free
   345   007FE8  501B               	movf	?_strlen^0,w,c
   346   007FEA  5C21               	subwf	Test@j^0,w,c
   347   007FEC  501C               	movf	(?_strlen+1)^0,w,c
   348   007FEE  5822               	subwfb	(Test@j+1)^0,w,c
   349   007FF0  A0D8               	btfss	status,0,c
   350   007FF2  EFFD  F03F         	goto	u61
   351   007FF6  EFFF  F03F         	goto	u60
   352   007FFA                     u61:
   353   007FFA  EFE3  F03F         	goto	l851
   354   007FFE                     u60:
   355   007FFE  0012               	return		;funcret
   356   008000                     __end_of_Test:
   357                           	callstack 0
   358                           
   359 ;; *************** function _strlen *****************
   360 ;; Defined at:
   361 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;  s               2    0[COMRAM] PTR const unsigned char 
   364 ;;		 -> Text2(16), Text1(10), 
   365 ;; Auto vars:     Size  Location     Type
   366 ;;  a               2    2[COMRAM] PTR const unsigned char 
   367 ;;		 -> Text2(16), Text1(10), 
   368 ;; Return value:  Size  Location     Type
   369 ;;                  2    0[COMRAM] unsigned int 
   370 ;; Registers used:
   371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   372 ;; Tracked objects:
   373 ;;		On entry : 0/0
   374 ;;		On exit  : 0/0
   375 ;;		Unchanged: 0/0
   376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   377 ;;      Params:         2       0       0       0       0       0       0       0       0
   378 ;;      Locals:         2       0       0       0       0       0       0       0       0
   379 ;;      Temps:          0       0       0       0       0       0       0       0       0
   380 ;;      Totals:         4       0       0       0       0       0       0       0       0
   381 ;;Total ram usage:        4 bytes
   382 ;; Hardware stack levels used: 1
   383 ;; This function calls:
   384 ;;		Nothing
   385 ;; This function is called by:
   386 ;;		_Test
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text2
   391   007EBC                     __ptext2:
   392                           	callstack 0
   393   007EBC                     _strlen:
   394                           	callstack 29
   395   007EBC  C01B  F01D         	movff	strlen@s,strlen@a
   396   007EC0  C01C  F01E         	movff	strlen@s+1,strlen@a+1
   397   007EC4  EF66  F03F         	goto	l831
   398   007EC8                     l829:
   399   007EC8  4A1B               	infsnz	strlen@s^0,f,c
   400   007ECA  2A1C               	incf	(strlen@s+1)^0,f,c
   401   007ECC                     l831:
   402   007ECC  C01B  FFD9         	movff	strlen@s,fsr2l
   403   007ED0  C01C  FFDA         	movff	strlen@s+1,fsr2h
   404   007ED4  50DF               	movf	indf2,w,c
   405   007ED6  A4D8               	btfss	status,2,c
   406   007ED8  EF70  F03F         	goto	u41
   407   007EDC  EF72  F03F         	goto	u40
   408   007EE0                     u41:
   409   007EE0  EF64  F03F         	goto	l829
   410   007EE4                     u40:
   411   007EE4  501D               	movf	strlen@a^0,w,c
   412   007EE6  5C1B               	subwf	strlen@s^0,w,c
   413   007EE8  6E1B               	movwf	?_strlen^0,c
   414   007EEA  501E               	movf	(strlen@a+1)^0,w,c
   415   007EEC  581C               	subwfb	(strlen@s+1)^0,w,c
   416   007EEE  6E1C               	movwf	(?_strlen+1)^0,c
   417   007EF0  0012               	return		;funcret
   418   007EF2                     __end_of_strlen:
   419                           	callstack 0
   420                           
   421 ;; *************** function _Write_Instruction *****************
   422 ;; Defined at:
   423 ;;		line 93 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  W_Instructio    1    wreg     unsigned char 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  W_Instructio    1    2[COMRAM] unsigned char 
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, status,2, status,0, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   437 ;;      Params:         0       0       0       0       0       0       0       0       0
   438 ;;      Locals:         1       0       0       0       0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0       0       0       0       0
   440 ;;      Totals:         1       0       0       0       0       0       0       0       0
   441 ;;Total ram usage:        1 bytes
   442 ;; Hardware stack levels used: 1
   443 ;; Hardware stack levels required when called: 1
   444 ;; This function calls:
   445 ;;		_LCD_Instructions
   446 ;; This function is called by:
   447 ;;		_Test
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text3
   452   007E66                     __ptext3:
   453                           	callstack 0
   454   007E66                     _Write_Instruction:
   455                           	callstack 28
   456                           
   457                           ;incstack = 0
   458                           ;Write_Instruction@W_Instruction stored from wreg
   459   007E66  6E1D               	movwf	Write_Instruction@W_Instruction^0,c
   460   007E68                     
   461                           ;main.c: 95:     LATE0 = 1;
   462   007E68  808D               	bsf	3981,0,c	;volatile
   463   007E6A                     
   464                           ;main.c: 96:     LCD_Instructions(W_Instruction >> 4);
   465   007E6A  381D               	swapf	Write_Instruction@W_Instruction^0,w,c
   466   007E6C  0B0F               	andlw	15
   467   007E6E  EC79  F03F         	call	_LCD_Instructions
   468                           
   469                           ;main.c: 97:     LCD_Instructions(W_Instruction & 0x0F);
   470   007E72  501D               	movf	Write_Instruction@W_Instruction^0,w,c
   471   007E74  0B0F               	andlw	15
   472   007E76  EC79  F03F         	call	_LCD_Instructions
   473   007E7A  0012               	return		;funcret
   474   007E7C                     __end_of_Write_Instruction:
   475                           	callstack 0
   476                           
   477 ;; *************** function _Configuration *****************
   478 ;; Defined at:
   479 ;;		line 56 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;		None
   482 ;; Auto vars:     Size  Location     Type
   483 ;;		None
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, status,2, status,0, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   493 ;;      Params:         0       0       0       0       0       0       0       0       0
   494 ;;      Locals:         0       0       0       0       0       0       0       0       0
   495 ;;      Temps:          0       0       0       0       0       0       0       0       0
   496 ;;      Totals:         0       0       0       0       0       0       0       0       0
   497 ;;Total ram usage:        0 bytes
   498 ;; Hardware stack levels used: 1
   499 ;; Hardware stack levels required when called: 2
   500 ;; This function calls:
   501 ;;		_Set_Instruction
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text4
   508   007F2E                     __ptext4:
   509                           	callstack 0
   510   007F2E                     _Configuration:
   511                           	callstack 28
   512   007F2E                     
   513                           ;main.c: 58:     OSCCON = 0x72;
   514   007F2E  0E72               	movlw	114
   515   007F30  6ED3               	movwf	211,c	;volatile
   516                           
   517                           ;main.c: 59:     ADCON1 = 0x0F;
   518   007F32  0E0F               	movlw	15
   519   007F34  6EC1               	movwf	193,c	;volatile
   520   007F36                     
   521                           ;main.c: 61:     TRISBbits.RB0 = 1;
   522   007F36  8093               	bsf	147,0,c	;volatile
   523                           
   524                           ;main.c: 62:     TRISD = 0x00;
   525   007F38  0E00               	movlw	0
   526   007F3A  6E95               	movwf	149,c	;volatile
   527                           
   528                           ;main.c: 63:     TRISE = 0x00;
   529   007F3C  0E00               	movlw	0
   530   007F3E  6E96               	movwf	150,c	;volatile
   531   007F40                     
   532                           ;main.c: 66:     RCONbits.IPEN = 0;
   533   007F40  9ED0               	bcf	208,7,c	;volatile
   534   007F42                     
   535                           ;main.c: 67:     INTCONbits.GIE = 0;
   536   007F42  9EF2               	bcf	242,7,c	;volatile
   537   007F44                     
   538                           ;main.c: 68:     INTCONbits.INT0E = 1;
   539   007F44  88F2               	bsf	242,4,c	;volatile
   540   007F46                     
   541                           ;main.c: 69:     INTCONbits.INT0IF = 0;
   542   007F46  92F2               	bcf	242,1,c	;volatile
   543   007F48                     
   544                           ;main.c: 70:     INTCON2bits.INTEDG0 = 0;
   545   007F48  9CF1               	bcf	241,6,c	;volatile
   546   007F4A                     
   547                           ;main.c: 73:     Set_Instruction(0x02);
   548   007F4A  0E02               	movlw	2
   549   007F4C  EC28  F03F         	call	_Set_Instruction
   550   007F50                     
   551                           ;main.c: 74:     Set_Instruction(0x06);
   552   007F50  0E06               	movlw	6
   553   007F52  EC28  F03F         	call	_Set_Instruction
   554   007F56                     
   555                           ;main.c: 75:     Set_Instruction(0x0F);
   556   007F56  0E0F               	movlw	15
   557   007F58  EC28  F03F         	call	_Set_Instruction
   558   007F5C                     
   559                           ;main.c: 76:     Set_Instruction(0x28);
   560   007F5C  0E28               	movlw	40
   561   007F5E  EC28  F03F         	call	_Set_Instruction
   562   007F62                     
   563                           ;main.c: 77:     Set_Instruction(0x01);
   564   007F62  0E01               	movlw	1
   565   007F64  EC28  F03F         	call	_Set_Instruction
   566   007F68  0012               	return		;funcret
   567   007F6A                     __end_of_Configuration:
   568                           	callstack 0
   569                           
   570 ;; *************** function _Set_Instruction *****************
   571 ;; Defined at:
   572 ;;		line 83 in file "main.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  S_Instructio    1    wreg     unsigned char 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  S_Instructio    1    2[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         0       0       0       0       0       0       0       0       0
   587 ;;      Locals:         1       0       0       0       0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0       0       0       0       0
   589 ;;      Totals:         1       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        1 bytes
   591 ;; Hardware stack levels used: 1
   592 ;; Hardware stack levels required when called: 1
   593 ;; This function calls:
   594 ;;		_LCD_Instructions
   595 ;; This function is called by:
   596 ;;		_Configuration
   597 ;;		_Test
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           	psect	text5
   602   007E50                     __ptext5:
   603                           	callstack 0
   604   007E50                     _Set_Instruction:
   605                           	callstack 28
   606                           
   607                           ;incstack = 0
   608                           ;Set_Instruction@S_Instruction stored from wreg
   609   007E50  6E1D               	movwf	Set_Instruction@S_Instruction^0,c
   610   007E52                     
   611                           ;main.c: 85:     LATE0 = 0;
   612   007E52  908D               	bcf	3981,0,c	;volatile
   613   007E54                     
   614                           ;main.c: 86:     LCD_Instructions(S_Instruction >> 4);
   615   007E54  381D               	swapf	Set_Instruction@S_Instruction^0,w,c
   616   007E56  0B0F               	andlw	15
   617   007E58  EC79  F03F         	call	_LCD_Instructions
   618                           
   619                           ;main.c: 87:     LCD_Instructions(S_Instruction & 0x0F);
   620   007E5C  501D               	movf	Set_Instruction@S_Instruction^0,w,c
   621   007E5E  0B0F               	andlw	15
   622   007E60  EC79  F03F         	call	_LCD_Instructions
   623   007E64  0012               	return		;funcret
   624   007E66                     __end_of_Set_Instruction:
   625                           	callstack 0
   626                           
   627 ;; *************** function _LCD_Instructions *****************
   628 ;; Defined at:
   629 ;;		line 103 in file "main.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  Instruction     1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  Instruction     1    1[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         0       0       0       0       0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0
   645 ;;      Temps:          1       0       0       0       0       0       0       0       0
   646 ;;      Totals:         2       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        2 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; This function calls:
   650 ;;		Nothing
   651 ;; This function is called by:
   652 ;;		_Set_Instruction
   653 ;;		_Write_Instruction
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text6
   658   007EF2                     __ptext6:
   659                           	callstack 0
   660   007EF2                     _LCD_Instructions:
   661                           	callstack 28
   662                           
   663                           ;incstack = 0
   664                           ;LCD_Instructions@Instruction stored from wreg
   665   007EF2  6E1C               	movwf	LCD_Instructions@Instruction^0,c
   666   007EF4                     
   667                           ;main.c: 105:     LATE1 = 1;
   668   007EF4  828D               	bsf	3981,1,c	;volatile
   669   007EF6                     
   670                           ;main.c: 106:     _delay((unsigned long)((15)*(8000000/4000.0)));
   671   007EF6  0E27               	movlw	39
   672   007EF8  6E1B               	movwf	??_LCD_Instructions^0,c
   673   007EFA  0EF5               	movlw	245
   674   007EFC                     u77:
   675   007EFC  2EE8               	decfsz	wreg,f,c
   676   007EFE  D7FE               	bra	u77
   677   007F00  2E1B               	decfsz	??_LCD_Instructions^0,f,c
   678   007F02  D7FC               	bra	u77
   679   007F04  F000               	nop	
   680   007F06                     
   681                           ;main.c: 107:     LATD = Instruction;
   682   007F06  C01C  FF8C         	movff	LCD_Instructions@Instruction,3980	;volatile
   683   007F0A                     
   684                           ;main.c: 108:     _delay((unsigned long)((15)*(8000000/4000.0)));
   685   007F0A  0E27               	movlw	39
   686   007F0C  6E1B               	movwf	??_LCD_Instructions^0,c
   687   007F0E  0EF5               	movlw	245
   688   007F10                     u87:
   689   007F10  2EE8               	decfsz	wreg,f,c
   690   007F12  D7FE               	bra	u87
   691   007F14  2E1B               	decfsz	??_LCD_Instructions^0,f,c
   692   007F16  D7FC               	bra	u87
   693   007F18  F000               	nop	
   694   007F1A                     
   695                           ;main.c: 109:     LATE1 = 0;
   696   007F1A  928D               	bcf	3981,1,c	;volatile
   697   007F1C                     
   698                           ;main.c: 110:     _delay((unsigned long)((15)*(8000000/4000.0)));
   699   007F1C  0E27               	movlw	39
   700   007F1E  6E1B               	movwf	??_LCD_Instructions^0,c
   701   007F20  0EF5               	movlw	245
   702   007F22                     u97:
   703   007F22  2EE8               	decfsz	wreg,f,c
   704   007F24  D7FE               	bra	u97
   705   007F26  2E1B               	decfsz	??_LCD_Instructions^0,f,c
   706   007F28  D7FC               	bra	u97
   707   007F2A  F000               	nop	
   708   007F2C  0012               	return		;funcret
   709   007F2E                     __end_of_LCD_Instructions:
   710                           	callstack 0
   711   000000                     
   712                           	psect	rparam
   713   000000                     
   714                           	psect	config
   715                           
   716                           ;Config register CONFIG1L @ 0x300000
   717                           ;	PLL Prescaler Selection bits
   718                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   719                           ;	System Clock Postscaler Selection bits
   720                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   721                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   722                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   723   300000                     	org	3145728
   724   300000  00                 	db	0
   725                           
   726                           ;Config register CONFIG1H @ 0x300001
   727                           ;	Oscillator Selection bits
   728                           ;	FOSC = INTOSC_HS, Internal oscillator, HS oscillator used by USB (INTHS)
   729                           ;	Fail-Safe Clock Monitor Enable bit
   730                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   731                           ;	Internal/External Oscillator Switchover bit
   732                           ;	IESO = OFF, Oscillator Switchover mode disabled
   733   300001                     	org	3145729
   734   300001  0B                 	db	11
   735                           
   736                           ;Config register CONFIG2L @ 0x300002
   737                           ;	Power-up Timer Enable bit
   738                           ;	PWRT = OFF, PWRT disabled
   739                           ;	Brown-out Reset Enable bits
   740                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   741                           ;	Brown-out Reset Voltage bits
   742                           ;	BORV = 3, Minimum setting 2.05V
   743                           ;	USB Voltage Regulator Enable bit
   744                           ;	VREGEN = OFF, USB voltage regulator disabled
   745   300002                     	org	3145730
   746   300002  1F                 	db	31
   747                           
   748                           ;Config register CONFIG2H @ 0x300003
   749                           ;	Watchdog Timer Enable bit
   750                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   751                           ;	Watchdog Timer Postscale Select bits
   752                           ;	WDTPS = 32768, 1:32768
   753   300003                     	org	3145731
   754   300003  1E                 	db	30
   755                           
   756                           ; Padding undefined space
   757   300004                     	org	3145732
   758   300004  FF                 	db	255
   759                           
   760                           ;Config register CONFIG3H @ 0x300005
   761                           ;	CCP2 MUX bit
   762                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   763                           ;	PORTB A/D Enable bit
   764                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   765                           ;	Low-Power Timer 1 Oscillator Enable bit
   766                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   767                           ;	MCLR Pin Enable bit
   768                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   769   300005                     	org	3145733
   770   300005  83                 	db	131
   771                           
   772                           ;Config register CONFIG4L @ 0x300006
   773                           ;	Stack Full/Underflow Reset Enable bit
   774                           ;	STVREN = ON, Stack full/underflow will cause Reset
   775                           ;	Single-Supply ICSP Enable bit
   776                           ;	LVP = OFF, Single-Supply ICSP disabled
   777                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   778                           ;	ICPRT = OFF, ICPORT disabled
   779                           ;	Extended Instruction Set Enable bit
   780                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   781                           ;	Background Debugger Enable bit
   782                           ;	DEBUG = 0x1, unprogrammed default
   783   300006                     	org	3145734
   784   300006  81                 	db	129
   785                           
   786                           ; Padding undefined space
   787   300007                     	org	3145735
   788   300007  FF                 	db	255
   789                           
   790                           ;Config register CONFIG5L @ 0x300008
   791                           ;	Code Protection bit
   792                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   793                           ;	Code Protection bit
   794                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   795                           ;	Code Protection bit
   796                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   797                           ;	Code Protection bit
   798                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   799   300008                     	org	3145736
   800   300008  0F                 	db	15
   801                           
   802                           ;Config register CONFIG5H @ 0x300009
   803                           ;	Boot Block Code Protection bit
   804                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   805                           ;	Data EEPROM Code Protection bit
   806                           ;	CPD = OFF, Data EEPROM is not code-protected
   807   300009                     	org	3145737
   808   300009  C0                 	db	192
   809                           
   810                           ;Config register CONFIG6L @ 0x30000A
   811                           ;	Write Protection bit
   812                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   813                           ;	Write Protection bit
   814                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   815                           ;	Write Protection bit
   816                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   817                           ;	Write Protection bit
   818                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   819   30000A                     	org	3145738
   820   30000A  0F                 	db	15
   821                           
   822                           ;Config register CONFIG6H @ 0x30000B
   823                           ;	Configuration Register Write Protection bit
   824                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   825                           ;	Boot Block Write Protection bit
   826                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   827                           ;	Data EEPROM Write Protection bit
   828                           ;	WRTD = OFF, Data EEPROM is not write-protected
   829   30000B                     	org	3145739
   830   30000B  E0                 	db	224
   831                           
   832                           ;Config register CONFIG7L @ 0x30000C
   833                           ;	Table Read Protection bit
   834                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   835                           ;	Table Read Protection bit
   836                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   837                           ;	Table Read Protection bit
   838                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   839                           ;	Table Read Protection bit
   840                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   841   30000C                     	org	3145740
   842   30000C  0F                 	db	15
   843                           
   844                           ;Config register CONFIG7H @ 0x30000D
   845                           ;	Boot Block Table Read Protection bit
   846                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   847   30000D                     	org	3145741
   848   30000D  40                 	db	64
   849                           tosu	equ	0xFFF
   850                           tosh	equ	0xFFE
   851                           tosl	equ	0xFFD
   852                           stkptr	equ	0xFFC
   853                           pclatu	equ	0xFFB
   854                           pclath	equ	0xFFA
   855                           pcl	equ	0xFF9
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           prodh	equ	0xFF4
   861                           prodl	equ	0xFF3
   862                           indf0	equ	0xFEF
   863                           postinc0	equ	0xFEE
   864                           postdec0	equ	0xFED
   865                           preinc0	equ	0xFEC
   866                           plusw0	equ	0xFEB
   867                           fsr0h	equ	0xFEA
   868                           fsr0l	equ	0xFE9
   869                           wreg	equ	0xFE8
   870                           indf1	equ	0xFE7
   871                           postinc1	equ	0xFE6
   872                           postdec1	equ	0xFE5
   873                           preinc1	equ	0xFE4
   874                           plusw1	equ	0xFE3
   875                           fsr1h	equ	0xFE2
   876                           fsr1l	equ	0xFE1
   877                           bsr	equ	0xFE0
   878                           indf2	equ	0xFDF
   879                           postinc2	equ	0xFDE
   880                           postdec2	equ	0xFDD
   881                           preinc2	equ	0xFDC
   882                           plusw2	equ	0xFDB
   883                           fsr2h	equ	0xFDA
   884                           fsr2l	equ	0xFD9
   885                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        26
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8      34
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> Text2(COMRAM[16]), Text1(COMRAM[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> Text2(COMRAM[16]), Text1(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_strlen
    _Write_Instruction->_LCD_Instructions
    _Configuration->_Set_Instruction
    _Set_Instruction->_LCD_Instructions

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     469
                      _Configuration
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                 4     4      0     424
                                              4 COMRAM     4     4      0
                    _Set_Instruction
                  _Write_Instruction
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Write_Instruction                                    1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0      45
                    _Set_Instruction
 ---------------------------------------------------------------------------------
 (2) _Set_Instruction                                      1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (3) _LCD_Instructions                                     2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
     _Set_Instruction
       _LCD_Instructions
   _Test
     _Set_Instruction
     _Write_Instruction
       _LCD_Instructions
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      8      22       1       35.8%
BITBIGSFRllll       2C      0       0      27        0.0%
BITBIGSFRllhh       2A      0       0      24        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRlhl         E      0       0      23        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlllh        5      0       0      26        0.0%
BITBIGSFRlhh         2      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      22      28        0.0%
DATA                 0      0      22       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
<<<<<<< HEAD
Symbol Table                                                                                   Fri Dec 22 22:33:39 2023
=======
Symbol Table                                                                                   Sat Dec 23 00:57:46 2023
>>>>>>> ae3a397b6585b009a46c050ad90d82d5f2a5114e

                            l43 7E48                              l52 7E64                              l44 7E48  
                            l55 7E7A                              l49 7F68                              l58 7F2C  
                            l67 7FFE                              u40 7EE4                              u41 7EE0  
                            u50 7FB4                              u51 7FB0                              u60 7FFE  
                            u61 7FFA                              u77 7EFC                              u87 7F10  
                            u97 7F22                             l801 7F62                             l751 7EF6  
                           l831 7ECC                             l753 7F06                             l761 7E52  
                           l833 7EE4                             l841 7F7C                             l755 7F0A  
                           l763 7E54                             l747 7EF0                             l827 7EBC  
                           l851 7FC6                             l843 7F8E                             l757 7F1A  
                           l749 7EF4                             l781 7F36                             l765 7E68  
                           l829 7EC8                             l853 7FD8                             l845 7F92  
                           l837 7F6A                             l759 7F1C                             l791 7F48  
                           l783 7F40                             l767 7E6A                             l855 7FDC  
                           l847 7FB4                             l839 7F70                             l793 7F4A  
                           l785 7F42                             l849 7FBA                             l857 7E40  
                           l795 7F50                             l787 7F44                             l779 7F2E  
                           l859 7E44                             l797 7F56                             l789 7F46  
                           l799 7F5C                             wreg 0FE8                            _LATD 0F8C  
                          _Test 7F6A                            _main 7E40                            fsr2h 0FDA  
                          indf2 0FDF                            fsr1l 0FE1                            fsr2l 0FD9  
                          start 0000                    ___param_bank 0000                ?_Set_Instruction 001B  
                         ?_Test 001B                           ?_main 001B                           _LATE0 7C68  
                         _LATE1 7C69                           _TRISD 0F95                           _TRISE 0F96  
                         Test@i 001F                           Test@j 0021                           _Text1 0011  
                         _Text2 0001                           tablat 0FF5                           status 0FD8  
               __initialization 7E96                    __end_of_Test 8000                    __end_of_main 7E50  
              _LCD_Instructions 7EF2                          ??_Test 001F                          ??_main 0023  
                 __activetblptr 0000                          _ADCON1 0FC1               _Write_Instruction 7E66  
                        _OSCCON 0FD3              ?_Write_Instruction 001B             ??_Write_Instruction 001D  
                        isa$std 0001                          _strlen 7EBC                    __pdataCOMRAM 0001  
                        tblptrh 0FF7                          tblptrl 0FF6                          tblptru 0FF8  
     __end_of_Write_Instruction 7E7C                      __accesstop 0060         __end_of__initialization 7EB6  
                 ___rparam_used 0001                  __pcstackCOMRAM 001B           __end_of_Configuration 7F6A  
                       ?_strlen 001B        __end_of_LCD_Instructions 7F2E                         __Hparam 0000  
                       __Lparam 0000                         __pcinit 7E96                         __ramtop 0800  
                       __ptext0 7E40                         __ptext1 7F6A                         __ptext2 7EBC  
                       __ptext3 7E66                         __ptext4 7F2E                         __ptext5 7E50  
                       __ptext6 7EF2            end_of_initialization 7EB6                         postdec1 0FE5  
                       postinc0 0FEE                         strlen@a 001D                         strlen@s 001B  
                     _TRISBbits 0F93                   __pidataCOMRAM 7E7C                  __end_of_strlen 7EF2  
           start_initialization 7E96               ??_Set_Instruction 001D    Set_Instruction@S_Instruction 001D  
                      ??_strlen 001D               ?_LCD_Instructions 001B              ??_LCD_Instructions 001B  
Write_Instruction@W_Instruction 001D                        _RCONbits 0FD0                     _INTCON2bits 0FF1  
                     copy_data0 7EAA                   _Configuration 7F2E                        __Hrparam 0000  
                      __Lrparam 0000                 _Set_Instruction 7E50     LCD_Instructions@Instruction 001C  
                ?_Configuration 001B                        isa$xinst 0000                      _INTCONbits 0FF2  
       __end_of_Set_Instruction 7E66                 ??_Configuration 001E  
