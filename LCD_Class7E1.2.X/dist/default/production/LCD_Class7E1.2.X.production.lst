

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Dec 21 02:11:41 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     
    55                           	psect	idataCOMRAM
    56   007E9E                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _Text1
    60   007E9E  54                 	db	84
    61   007E9F  65                 	db	101
    62   007EA0  20                 	db	32
    63   007EA1  41                 	db	65
    64   007EA2  6D                 	db	109
    65   007EA3  6F                 	db	111
    66   007EA4  00                 	db	0
    67   007EA5  00                 	db	0
    68   007EA6  00                 	db	0
    69   007EA7  00                 	db	0
    70   000000                     _LATE1	set	31849
    71   000000                     _LATD	set	3980
    72   000000                     _TRISBbits	set	3987
    73   000000                     _ADCON1	set	4033
    74   000000                     _OSCCON	set	4051
    75   000000                     _LATE0	set	31848
    76   000000                     _INTCON2bits	set	4081
    77   000000                     _INTCONbits	set	4082
    78   000000                     _RCONbits	set	4048
    79   000000                     _TRISD	set	3989
    80   000000                     _TRISE	set	3990
    81                           
    82                           ; #config settings
    83                           
    84                           	psect	cinit
    85   007EE0                     __pcinit:
    86                           	callstack 0
    87   007EE0                     start_initialization:
    88                           	callstack 0
    89   007EE0                     __initialization:
    90                           	callstack 0
    91                           
    92                           ; Initialize objects allocated to COMRAM (10 bytes)
    93                           ; load TBLPTR registers with __pidataCOMRAM
    94   007EE0  0E9E               	movlw	low __pidataCOMRAM
    95   007EE2  6EF6               	movwf	tblptrl,c
    96   007EE4  0E7E               	movlw	high __pidataCOMRAM
    97   007EE6  6EF7               	movwf	tblptrh,c
    98   007EE8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    99   007EEA  6EF8               	movwf	tblptru,c
   100   007EEC  EE00  F001         	lfsr	0,__pdataCOMRAM
   101   007EF0  EE10 F00A          	lfsr	1,10
   102   007EF4                     copy_data0:
   103   007EF4  0009               	tblrd		*+
   104   007EF6  CFF5 FFEE          	movff	tablat,postinc0
   105   007EFA  50E5               	movf	postdec1,w,c
   106   007EFC  50E1               	movf	fsr1l,w,c
   107   007EFE  E1FA               	bnz	copy_data0
   108   007F00                     end_of_initialization:
   109                           	callstack 0
   110   007F00                     __end_of__initialization:
   111                           	callstack 0
   112   007F00  0100               	movlb	0
   113   007F02  EF54  F03F         	goto	_main	;jump to C main() function
   114                           
   115                           	psect	dataCOMRAM
   116   000001                     __pdataCOMRAM:
   117                           	callstack 0
   118   000001                     _Text1:
   119                           	callstack 0
   120   000001                     	ds	10
   121                           
   122                           	psect	cstackCOMRAM
   123   00000B                     __pcstackCOMRAM:
   124                           	callstack 0
   125   00000B                     ??_LCD_Instructions:
   126   00000B                     ?_strlen:
   127                           	callstack 0
   128   00000B                     strlen@s:
   129                           	callstack 0
   130                           
   131                           ; 2 bytes @ 0x0
   132   00000B                     	ds	1
   133   00000C                     LCD_Instructions@Instruction:
   134                           	callstack 0
   135                           
   136                           ; 1 bytes @ 0x1
   137   00000C                     	ds	1
   138   00000D                     Set_Instruction@S_Instruction:
   139                           	callstack 0
   140   00000D                     Write_Instruction@W_Instruction:
   141                           	callstack 0
   142   00000D                     strlen@a:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0x2
   146   00000D                     	ds	1
   147   00000E                     
   148                           ; 1 bytes @ 0x3
   149   00000E                     	ds	1
   150   00000F                     Test@i:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x4
   154   00000F                     	ds	2
   155   000011                     
   156                           ; 1 bytes @ 0x6
   157 ;;
   158 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   159 ;;
   160 ;; *************** function _main *****************
   161 ;; Defined at:
   162 ;;		line 37 in file "main.c"
   163 ;; Parameters:    Size  Location     Type
   164 ;;		None
   165 ;; Auto vars:     Size  Location     Type
   166 ;;		None
   167 ;; Return value:  Size  Location     Type
   168 ;;                  1    wreg      void 
   169 ;; Registers used:
   170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   171 ;; Tracked objects:
   172 ;;		On entry : 0/0
   173 ;;		On exit  : 0/0
   174 ;;		Unchanged: 0/0
   175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   176 ;;      Params:         0       0       0       0       0       0       0       0       0
   177 ;;      Locals:         0       0       0       0       0       0       0       0       0
   178 ;;      Temps:          0       0       0       0       0       0       0       0       0
   179 ;;      Totals:         0       0       0       0       0       0       0       0       0
   180 ;;Total ram usage:        0 bytes
   181 ;; Hardware stack levels required when called: 3
   182 ;; This function calls:
   183 ;;		_Configuration
   184 ;;		_Test
   185 ;; This function is called by:
   186 ;;		Startup code after reset
   187 ;; This function uses a non-reentrant model
   188 ;;
   189                           
   190                           	psect	text0
   191   007EA8                     __ptext0:
   192                           	callstack 0
   193   007EA8                     _main:
   194                           	callstack 28
   195   007EA8                     
   196                           ;main.c: 40:     Configuration();
   197   007EA8  ECBC  F03F         	call	_Configuration	;wreg free
   198   007EAC                     
   199                           ;main.c: 41:     Test();
   200   007EAC  ECDA  F03F         	call	_Test	;wreg free
   201   007EB0                     l41:
   202   007EB0  EF58  F03F         	goto	l41
   203   007EB4  EF00  F000         	goto	start
   204   007EB8                     __end_of_main:
   205                           	callstack 0
   206                           
   207 ;; *************** function _Test *****************
   208 ;; Defined at:
   209 ;;		line 113 in file "main.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;  i               2    4[COMRAM] int 
   214 ;; Return value:  Size  Location     Type
   215 ;;                  1    wreg      void 
   216 ;; Registers used:
   217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : 0/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   223 ;;      Params:         0       0       0       0       0       0       0       0       0
   224 ;;      Locals:         2       0       0       0       0       0       0       0       0
   225 ;;      Temps:          0       0       0       0       0       0       0       0       0
   226 ;;      Totals:         2       0       0       0       0       0       0       0       0
   227 ;;Total ram usage:        2 bytes
   228 ;; Hardware stack levels used: 1
   229 ;; Hardware stack levels required when called: 2
   230 ;; This function calls:
   231 ;;		_Write_Instruction
   232 ;;		_strlen
   233 ;; This function is called by:
   234 ;;		_main
   235 ;; This function uses a non-reentrant model
   236 ;;
   237                           
   238                           	psect	text1
   239   007FB4                     __ptext1:
   240                           	callstack 0
   241   007FB4                     _Test:
   242                           	callstack 28
   243   007FB4                     
   244                           ;main.c: 115:     Write_Instruction(0x80);
   245   007FB4  0E80               	movlw	128
   246   007FB6  EC66  F03F         	call	_Write_Instruction
   247   007FBA                     
   248                           ;main.c: 117:     for (int i = 0; i < strlen(Text1); i++) {
   249   007FBA  0E00               	movlw	0
   250   007FBC  6E10               	movwf	(Test@i+1)^0,c
   251   007FBE  0E00               	movlw	0
   252   007FC0  6E0F               	movwf	Test@i^0,c
   253   007FC2  EFEE  F03F         	goto	l834
   254   007FC6                     l830:
   255                           
   256                           ;main.c: 120:         Write_Instruction(Text1[i]);
   257   007FC6  0E01               	movlw	low _Text1
   258   007FC8  240F               	addwf	Test@i^0,w,c
   259   007FCA  6ED9               	movwf	fsr2l,c
   260   007FCC  0E00               	movlw	high _Text1
   261   007FCE  2010               	addwfc	(Test@i+1)^0,w,c
   262   007FD0  6EDA               	movwf	fsr2h,c
   263   007FD2  50DF               	movf	indf2,w,c
   264   007FD4  EC66  F03F         	call	_Write_Instruction
   265   007FD8                     
   266                           ;main.c: 123:     }
   267   007FD8  4A0F               	infsnz	Test@i^0,f,c
   268   007FDA  2A10               	incf	(Test@i+1)^0,f,c
   269   007FDC                     l834:
   270   007FDC  0E01               	movlw	low _Text1
   271   007FDE  6E0B               	movwf	strlen@s^0,c
   272   007FE0  0E00               	movlw	high _Text1
   273   007FE2  6E0C               	movwf	(strlen@s+1)^0,c
   274   007FE4  EC83  F03F         	call	_strlen	;wreg free
   275   007FE8  500B               	movf	?_strlen^0,w,c
   276   007FEA  5C0F               	subwf	Test@i^0,w,c
   277   007FEC  500C               	movf	(?_strlen+1)^0,w,c
   278   007FEE  5810               	subwfb	(Test@i+1)^0,w,c
   279   007FF0  A0D8               	btfss	status,0,c
   280   007FF2  EFFD  F03F         	goto	u41
   281   007FF6  EFFF  F03F         	goto	u40
   282   007FFA                     u41:
   283   007FFA  EFE3  F03F         	goto	l830
   284   007FFE                     u40:
   285   007FFE  0012               	return		;funcret
   286   008000                     __end_of_Test:
   287                           	callstack 0
   288                           
   289 ;; *************** function _strlen *****************
   290 ;; Defined at:
   291 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;  s               2    0[COMRAM] PTR const unsigned char 
   294 ;;		 -> Text1(10), 
   295 ;; Auto vars:     Size  Location     Type
   296 ;;  a               2    2[COMRAM] PTR const unsigned char 
   297 ;;		 -> Text1(10), 
   298 ;; Return value:  Size  Location     Type
   299 ;;                  2    0[COMRAM] unsigned int 
   300 ;; Registers used:
   301 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   302 ;; Tracked objects:
   303 ;;		On entry : 0/0
   304 ;;		On exit  : 0/0
   305 ;;		Unchanged: 0/0
   306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   307 ;;      Params:         2       0       0       0       0       0       0       0       0
   308 ;;      Locals:         2       0       0       0       0       0       0       0       0
   309 ;;      Temps:          0       0       0       0       0       0       0       0       0
   310 ;;      Totals:         4       0       0       0       0       0       0       0       0
   311 ;;Total ram usage:        4 bytes
   312 ;; Hardware stack levels used: 1
   313 ;; This function calls:
   314 ;;		Nothing
   315 ;; This function is called by:
   316 ;;		_Test
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320                           	psect	text2
   321   007F06                     __ptext2:
   322                           	callstack 0
   323   007F06                     _strlen:
   324                           	callstack 29
   325   007F06  C00B  F00D         	movff	strlen@s,strlen@a
   326   007F0A  C00C  F00E         	movff	strlen@s+1,strlen@a+1
   327   007F0E  EF8B  F03F         	goto	l820
   328   007F12                     l818:
   329   007F12  4A0B               	infsnz	strlen@s^0,f,c
   330   007F14  2A0C               	incf	(strlen@s+1)^0,f,c
   331   007F16                     l820:
   332   007F16  C00B  FFD9         	movff	strlen@s,fsr2l
   333   007F1A  C00C  FFDA         	movff	strlen@s+1,fsr2h
   334   007F1E  50DF               	movf	indf2,w,c
   335   007F20  A4D8               	btfss	status,2,c
   336   007F22  EF95  F03F         	goto	u31
   337   007F26  EF97  F03F         	goto	u30
   338   007F2A                     u31:
   339   007F2A  EF89  F03F         	goto	l818
   340   007F2E                     u30:
   341   007F2E  500D               	movf	strlen@a^0,w,c
   342   007F30  5C0B               	subwf	strlen@s^0,w,c
   343   007F32  6E0B               	movwf	?_strlen^0,c
   344   007F34  500E               	movf	(strlen@a+1)^0,w,c
   345   007F36  580C               	subwfb	(strlen@s+1)^0,w,c
   346   007F38  6E0C               	movwf	(?_strlen+1)^0,c
   347   007F3A  0012               	return		;funcret
   348   007F3C                     __end_of_strlen:
   349                           	callstack 0
   350                           
   351 ;; *************** function _Write_Instruction *****************
   352 ;; Defined at:
   353 ;;		line 92 in file "main.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;  W_Instructio    1    wreg     unsigned char 
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  W_Instructio    1    2[COMRAM] unsigned char 
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, status,2, status,0, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   367 ;;      Params:         0       0       0       0       0       0       0       0       0
   368 ;;      Locals:         1       0       0       0       0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0       0       0       0       0
   370 ;;      Totals:         1       0       0       0       0       0       0       0       0
   371 ;;Total ram usage:        1 bytes
   372 ;; Hardware stack levels used: 1
   373 ;; Hardware stack levels required when called: 1
   374 ;; This function calls:
   375 ;;		_LCD_Instructions
   376 ;; This function is called by:
   377 ;;		_Test
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text3
   382   007ECC                     __ptext3:
   383                           	callstack 0
   384   007ECC                     _Write_Instruction:
   385                           	callstack 28
   386                           
   387                           ;incstack = 0
   388                           ;Write_Instruction@W_Instruction stored from wreg
   389   007ECC  6E0D               	movwf	Write_Instruction@W_Instruction^0,c
   390   007ECE                     
   391                           ;main.c: 94:     LATE0 = 1;
   392   007ECE  808D               	bsf	3981,0,c	;volatile
   393   007ED0                     
   394                           ;main.c: 95:     LCD_Instructions(W_Instruction);
   395   007ED0  500D               	movf	Write_Instruction@W_Instruction^0,w,c
   396   007ED2  EC9E  F03F         	call	_LCD_Instructions
   397   007ED6                     
   398                           ;main.c: 96:     LCD_Instructions(W_Instruction << 4);
   399   007ED6  380D               	swapf	Write_Instruction@W_Instruction^0,w,c
   400   007ED8  0BF0               	andlw	240
   401   007EDA  EC9E  F03F         	call	_LCD_Instructions
   402   007EDE  0012               	return		;funcret
   403   007EE0                     __end_of_Write_Instruction:
   404                           	callstack 0
   405                           
   406 ;; *************** function _Configuration *****************
   407 ;; Defined at:
   408 ;;		line 54 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;		None
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, status,2, status,0, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   422 ;;      Params:         0       0       0       0       0       0       0       0       0
   423 ;;      Locals:         0       0       0       0       0       0       0       0       0
   424 ;;      Temps:          0       0       0       0       0       0       0       0       0
   425 ;;      Totals:         0       0       0       0       0       0       0       0       0
   426 ;;Total ram usage:        0 bytes
   427 ;; Hardware stack levels used: 1
   428 ;; Hardware stack levels required when called: 2
   429 ;; This function calls:
   430 ;;		_Set_Instruction
   431 ;; This function is called by:
   432 ;;		_main
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           	psect	text4
   437   007F78                     __ptext4:
   438                           	callstack 0
   439   007F78                     _Configuration:
   440                           	callstack 28
   441   007F78                     
   442                           ;main.c: 56:     OSCCON = 0x72;
   443   007F78  0E72               	movlw	114
   444   007F7A  6ED3               	movwf	211,c	;volatile
   445                           
   446                           ;main.c: 57:     ADCON1 = 0x0F;
   447   007F7C  0E0F               	movlw	15
   448   007F7E  6EC1               	movwf	193,c	;volatile
   449   007F80                     
   450                           ;main.c: 59:     TRISBbits.RB0 = 1;
   451   007F80  8093               	bsf	147,0,c	;volatile
   452                           
   453                           ;main.c: 60:     TRISD = 0x00;
   454   007F82  0E00               	movlw	0
   455   007F84  6E95               	movwf	149,c	;volatile
   456                           
   457                           ;main.c: 61:     TRISE = 0x00;
   458   007F86  0E00               	movlw	0
   459   007F88  6E96               	movwf	150,c	;volatile
   460   007F8A                     
   461                           ;main.c: 64:     RCONbits.IPEN = 0;
   462   007F8A  9ED0               	bcf	208,7,c	;volatile
   463   007F8C                     
   464                           ;main.c: 65:     INTCONbits.GIE = 0;
   465   007F8C  9EF2               	bcf	242,7,c	;volatile
   466   007F8E                     
   467                           ;main.c: 66:     INTCONbits.INT0E = 1;
   468   007F8E  88F2               	bsf	242,4,c	;volatile
   469   007F90                     
   470                           ;main.c: 67:     INTCONbits.INT0IF = 0;
   471   007F90  92F2               	bcf	242,1,c	;volatile
   472   007F92                     
   473                           ;main.c: 68:     INTCON2bits.INTEDG0 = 0;
   474   007F92  9CF1               	bcf	241,6,c	;volatile
   475   007F94                     
   476                           ;main.c: 71:     Set_Instruction(0x02);
   477   007F94  0E02               	movlw	2
   478   007F96  EC5C  F03F         	call	_Set_Instruction
   479   007F9A                     
   480                           ;main.c: 72:     Set_Instruction(0x01);
   481   007F9A  0E01               	movlw	1
   482   007F9C  EC5C  F03F         	call	_Set_Instruction
   483   007FA0                     
   484                           ;main.c: 73:     Set_Instruction(0x28);
   485   007FA0  0E28               	movlw	40
   486   007FA2  EC5C  F03F         	call	_Set_Instruction
   487   007FA6                     
   488                           ;main.c: 74:     Set_Instruction(0x0F);
   489   007FA6  0E0F               	movlw	15
   490   007FA8  EC5C  F03F         	call	_Set_Instruction
   491   007FAC                     
   492                           ;main.c: 75:     Set_Instruction(0x06);
   493   007FAC  0E06               	movlw	6
   494   007FAE  EC5C  F03F         	call	_Set_Instruction
   495   007FB2  0012               	return		;funcret
   496   007FB4                     __end_of_Configuration:
   497                           	callstack 0
   498                           
   499 ;; *************** function _Set_Instruction *****************
   500 ;; Defined at:
   501 ;;		line 82 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;  S_Instructio    1    wreg     unsigned char 
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  S_Instructio    1    2[COMRAM] unsigned char 
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   515 ;;      Params:         0       0       0       0       0       0       0       0       0
   516 ;;      Locals:         1       0       0       0       0       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0       0       0       0       0
   518 ;;      Totals:         1       0       0       0       0       0       0       0       0
   519 ;;Total ram usage:        1 bytes
   520 ;; Hardware stack levels used: 1
   521 ;; Hardware stack levels required when called: 1
   522 ;; This function calls:
   523 ;;		_LCD_Instructions
   524 ;; This function is called by:
   525 ;;		_Configuration
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text5
   530   007EB8                     __ptext5:
   531                           	callstack 0
   532   007EB8                     _Set_Instruction:
   533                           	callstack 28
   534                           
   535                           ;incstack = 0
   536                           ;Set_Instruction@S_Instruction stored from wreg
   537   007EB8  6E0D               	movwf	Set_Instruction@S_Instruction^0,c
   538   007EBA                     
   539                           ;main.c: 84:     LATE0 = 0;
   540   007EBA  908D               	bcf	3981,0,c	;volatile
   541   007EBC                     
   542                           ;main.c: 85:     LCD_Instructions(S_Instruction);
   543   007EBC  500D               	movf	Set_Instruction@S_Instruction^0,w,c
   544   007EBE  EC9E  F03F         	call	_LCD_Instructions
   545   007EC2                     
   546                           ;main.c: 86:     LCD_Instructions(S_Instruction << 4);
   547   007EC2  380D               	swapf	Set_Instruction@S_Instruction^0,w,c
   548   007EC4  0BF0               	andlw	240
   549   007EC6  EC9E  F03F         	call	_LCD_Instructions
   550   007ECA  0012               	return		;funcret
   551   007ECC                     __end_of_Set_Instruction:
   552                           	callstack 0
   553                           
   554 ;; *************** function _LCD_Instructions *****************
   555 ;; Defined at:
   556 ;;		line 102 in file "main.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;  Instruction     1    wreg     unsigned char 
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  Instruction     1    1[COMRAM] unsigned char 
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, status,2, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   570 ;;      Params:         0       0       0       0       0       0       0       0       0
   571 ;;      Locals:         1       0       0       0       0       0       0       0       0
   572 ;;      Temps:          1       0       0       0       0       0       0       0       0
   573 ;;      Totals:         2       0       0       0       0       0       0       0       0
   574 ;;Total ram usage:        2 bytes
   575 ;; Hardware stack levels used: 1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_Set_Instruction
   580 ;;		_Write_Instruction
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text6
   585   007F3C                     __ptext6:
   586                           	callstack 0
   587   007F3C                     _LCD_Instructions:
   588                           	callstack 28
   589                           
   590                           ;incstack = 0
   591                           ;LCD_Instructions@Instruction stored from wreg
   592   007F3C  6E0C               	movwf	LCD_Instructions@Instruction^0,c
   593   007F3E                     
   594                           ;main.c: 104:     LATE1 = 1;
   595   007F3E  828D               	bsf	3981,1,c	;volatile
   596   007F40                     
   597                           ;main.c: 105:     _delay((unsigned long)((15)*(8000000/4000.0)));
   598   007F40  0E27               	movlw	39
   599   007F42  6E0B               	movwf	??_LCD_Instructions^0,c
   600   007F44  0EF5               	movlw	245
   601   007F46                     u57:
   602   007F46  2EE8               	decfsz	wreg,f,c
   603   007F48  D7FE               	bra	u57
   604   007F4A  2E0B               	decfsz	??_LCD_Instructions^0,f,c
   605   007F4C  D7FC               	bra	u57
   606   007F4E  F000               	nop	
   607   007F50                     
   608                           ;main.c: 106:     LATD = Instruction;
   609   007F50  C00C  FF8C         	movff	LCD_Instructions@Instruction,3980	;volatile
   610   007F54                     
   611                           ;main.c: 107:     _delay((unsigned long)((15)*(8000000/4000.0)));
   612   007F54  0E27               	movlw	39
   613   007F56  6E0B               	movwf	??_LCD_Instructions^0,c
   614   007F58  0EF5               	movlw	245
   615   007F5A                     u67:
   616   007F5A  2EE8               	decfsz	wreg,f,c
   617   007F5C  D7FE               	bra	u67
   618   007F5E  2E0B               	decfsz	??_LCD_Instructions^0,f,c
   619   007F60  D7FC               	bra	u67
   620   007F62  F000               	nop	
   621   007F64                     
   622                           ;main.c: 108:     LATE1 = 0;
   623   007F64  928D               	bcf	3981,1,c	;volatile
   624   007F66                     
   625                           ;main.c: 109:     _delay((unsigned long)((15)*(8000000/4000.0)));
   626   007F66  0E27               	movlw	39
   627   007F68  6E0B               	movwf	??_LCD_Instructions^0,c
   628   007F6A  0EF5               	movlw	245
   629   007F6C                     u77:
   630   007F6C  2EE8               	decfsz	wreg,f,c
   631   007F6E  D7FE               	bra	u77
   632   007F70  2E0B               	decfsz	??_LCD_Instructions^0,f,c
   633   007F72  D7FC               	bra	u77
   634   007F74  F000               	nop	
   635   007F76  0012               	return		;funcret
   636   007F78                     __end_of_LCD_Instructions:
   637                           	callstack 0
   638   000000                     
   639                           	psect	rparam
   640   000000                     
   641                           	psect	config
   642                           
   643                           ;Config register CONFIG1L @ 0x300000
   644                           ;	PLL Prescaler Selection bits
   645                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   646                           ;	System Clock Postscaler Selection bits
   647                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   648                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   649                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   650   300000                     	org	3145728
   651   300000  00                 	db	0
   652                           
   653                           ;Config register CONFIG1H @ 0x300001
   654                           ;	Oscillator Selection bits
   655                           ;	FOSC = INTOSC_HS, Internal oscillator, HS oscillator used by USB (INTHS)
   656                           ;	Fail-Safe Clock Monitor Enable bit
   657                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   658                           ;	Internal/External Oscillator Switchover bit
   659                           ;	IESO = OFF, Oscillator Switchover mode disabled
   660   300001                     	org	3145729
   661   300001  0B                 	db	11
   662                           
   663                           ;Config register CONFIG2L @ 0x300002
   664                           ;	Power-up Timer Enable bit
   665                           ;	PWRT = OFF, PWRT disabled
   666                           ;	Brown-out Reset Enable bits
   667                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   668                           ;	Brown-out Reset Voltage bits
   669                           ;	BORV = 3, Minimum setting 2.05V
   670                           ;	USB Voltage Regulator Enable bit
   671                           ;	VREGEN = OFF, USB voltage regulator disabled
   672   300002                     	org	3145730
   673   300002  1F                 	db	31
   674                           
   675                           ;Config register CONFIG2H @ 0x300003
   676                           ;	Watchdog Timer Enable bit
   677                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   678                           ;	Watchdog Timer Postscale Select bits
   679                           ;	WDTPS = 32768, 1:32768
   680   300003                     	org	3145731
   681   300003  1E                 	db	30
   682                           
   683                           ; Padding undefined space
   684   300004                     	org	3145732
   685   300004  FF                 	db	255
   686                           
   687                           ;Config register CONFIG3H @ 0x300005
   688                           ;	CCP2 MUX bit
   689                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   690                           ;	PORTB A/D Enable bit
   691                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   692                           ;	Low-Power Timer 1 Oscillator Enable bit
   693                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   694                           ;	MCLR Pin Enable bit
   695                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   696   300005                     	org	3145733
   697   300005  83                 	db	131
   698                           
   699                           ;Config register CONFIG4L @ 0x300006
   700                           ;	Stack Full/Underflow Reset Enable bit
   701                           ;	STVREN = ON, Stack full/underflow will cause Reset
   702                           ;	Single-Supply ICSP Enable bit
   703                           ;	LVP = OFF, Single-Supply ICSP disabled
   704                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   705                           ;	ICPRT = OFF, ICPORT disabled
   706                           ;	Extended Instruction Set Enable bit
   707                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   708                           ;	Background Debugger Enable bit
   709                           ;	DEBUG = 0x1, unprogrammed default
   710   300006                     	org	3145734
   711   300006  81                 	db	129
   712                           
   713                           ; Padding undefined space
   714   300007                     	org	3145735
   715   300007  FF                 	db	255
   716                           
   717                           ;Config register CONFIG5L @ 0x300008
   718                           ;	Code Protection bit
   719                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   720                           ;	Code Protection bit
   721                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   722                           ;	Code Protection bit
   723                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   724                           ;	Code Protection bit
   725                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   726   300008                     	org	3145736
   727   300008  0F                 	db	15
   728                           
   729                           ;Config register CONFIG5H @ 0x300009
   730                           ;	Boot Block Code Protection bit
   731                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   732                           ;	Data EEPROM Code Protection bit
   733                           ;	CPD = OFF, Data EEPROM is not code-protected
   734   300009                     	org	3145737
   735   300009  C0                 	db	192
   736                           
   737                           ;Config register CONFIG6L @ 0x30000A
   738                           ;	Write Protection bit
   739                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   740                           ;	Write Protection bit
   741                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   742                           ;	Write Protection bit
   743                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   744                           ;	Write Protection bit
   745                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   746   30000A                     	org	3145738
   747   30000A  0F                 	db	15
   748                           
   749                           ;Config register CONFIG6H @ 0x30000B
   750                           ;	Configuration Register Write Protection bit
   751                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   752                           ;	Boot Block Write Protection bit
   753                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   754                           ;	Data EEPROM Write Protection bit
   755                           ;	WRTD = OFF, Data EEPROM is not write-protected
   756   30000B                     	org	3145739
   757   30000B  E0                 	db	224
   758                           
   759                           ;Config register CONFIG7L @ 0x30000C
   760                           ;	Table Read Protection bit
   761                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   762                           ;	Table Read Protection bit
   763                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   764                           ;	Table Read Protection bit
   765                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   766                           ;	Table Read Protection bit
   767                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   768   30000C                     	org	3145740
   769   30000C  0F                 	db	15
   770                           
   771                           ;Config register CONFIG7H @ 0x30000D
   772                           ;	Boot Block Table Read Protection bit
   773                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   774   30000D                     	org	3145741
   775   30000D  40                 	db	64
   776                           tosu	equ	0xFFF
   777                           tosh	equ	0xFFE
   778                           tosl	equ	0xFFD
   779                           stkptr	equ	0xFFC
   780                           pclatu	equ	0xFFB
   781                           pclath	equ	0xFFA
   782                           pcl	equ	0xFF9
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           prodh	equ	0xFF4
   788                           prodl	equ	0xFF3
   789                           indf0	equ	0xFEF
   790                           postinc0	equ	0xFEE
   791                           postdec0	equ	0xFED
   792                           preinc0	equ	0xFEC
   793                           plusw0	equ	0xFEB
   794                           fsr0h	equ	0xFEA
   795                           fsr0l	equ	0xFE9
   796                           wreg	equ	0xFE8
   797                           indf1	equ	0xFE7
   798                           postinc1	equ	0xFE6
   799                           postdec1	equ	0xFE5
   800                           preinc1	equ	0xFE4
   801                           plusw1	equ	0xFE3
   802                           fsr1h	equ	0xFE2
   803                           fsr1l	equ	0xFE1
   804                           bsr	equ	0xFE0
   805                           indf2	equ	0xFDF
   806                           postinc2	equ	0xFDE
   807                           postdec2	equ	0xFDD
   808                           preinc2	equ	0xFDC
   809                           plusw2	equ	0xFDB
   810                           fsr2h	equ	0xFDA
   811                           fsr2l	equ	0xFD9
   812                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Text1(COMRAM[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> Text1(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_strlen
    _Write_Instruction->_LCD_Instructions
    _Configuration->_Set_Instruction
    _Set_Instruction->_LCD_Instructions

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     302
                      _Configuration
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0     257
                                              4 COMRAM     2     2      0
                  _Write_Instruction
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Write_Instruction                                    1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0      45
                    _Set_Instruction
 ---------------------------------------------------------------------------------
 (2) _Set_Instruction                                      1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (3) _LCD_Instructions                                     2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
     _Set_Instruction
       _LCD_Instructions
   _Test
     _Write_Instruction
       _LCD_Instructions
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      6      10       1       16.8%
BITBIGSFRllll       2C      0       0      27        0.0%
BITBIGSFRllhh       2A      0       0      24        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRlhl         E      0       0      23        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlllh        5      0       0      26        0.0%
BITBIGSFRlhh         2      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      28        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Dec 21 02:11:41 2023

                            l41 7EB0                              l50 7ECA                              l42 7EB0  
                            l53 7EDE                              l62 7FFE                              l47 7FB2  
                            l56 7F76                              u30 7F2E                              u31 7F2A  
                            u40 7FFE                              u41 7FFA                              u57 7F46  
                            u67 7F5A                              u77 7F6C                             l800 7FAC  
                           l820 7F16                             l750 7F54                             l742 7F3A  
                           l822 7F2E                             l830 7FC6                             l752 7F64  
                           l744 7F3E                             l760 7EC2                             l816 7F06  
                           l832 7FD8                             l754 7F66                             l746 7F40  
                           l762 7ECE                             l818 7F12                             l834 7FDC  
                           l826 7FB4                             l748 7F50                             l756 7EBA  
                           l780 7F80                             l764 7ED0                             l828 7FBA  
                           l836 7EA8                             l758 7EBC                             l790 7F92  
                           l782 7F8A                             l766 7ED6                             l838 7EAC  
                           l792 7F94                             l784 7F8C                             l794 7F9A  
                           l786 7F8E                             l778 7F78                             l796 7FA0  
                           l788 7F90                             l798 7FA6                             wreg 0FE8  
                          _LATD 0F8C                            _Test 7FB4                            _main 7EA8  
                          fsr2h 0FDA                            indf2 0FDF                            fsr1l 0FE1  
                          fsr2l 0FD9                            start 0000                    ___param_bank 0000  
              ?_Set_Instruction 000B                           ?_Test 000B                           ?_main 000B  
                         _LATE0 7C68                           _LATE1 7C69                           _TRISD 0F95  
                         _TRISE 0F96                           Test@i 000F                           _Text1 0001  
                         tablat 0FF5                           status 0FD8                 __initialization 7EE0  
                  __end_of_Test 8000                    __end_of_main 7EB8                _LCD_Instructions 7F3C  
                        ??_Test 000F                          ??_main 0011                   __activetblptr 0000  
                        _ADCON1 0FC1               _Write_Instruction 7ECC                          _OSCCON 0FD3  
            ?_Write_Instruction 000B             ??_Write_Instruction 000D                          isa$std 0001  
                        _strlen 7F06                    __pdataCOMRAM 0001                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8       __end_of_Write_Instruction 7EE0  
                    __accesstop 0060         __end_of__initialization 7F00                   ___rparam_used 0001  
                __pcstackCOMRAM 000B           __end_of_Configuration 7FB4                         ?_strlen 000B  
      __end_of_LCD_Instructions 7F78                         __Hparam 0000                         __Lparam 0000  
                       __pcinit 7EE0                         __ramtop 0800                         __ptext0 7EA8  
                       __ptext1 7FB4                         __ptext2 7F06                         __ptext3 7ECC  
                       __ptext4 7F78                         __ptext5 7EB8                         __ptext6 7F3C  
          end_of_initialization 7F00                         postdec1 0FE5                         postinc0 0FEE  
                       strlen@a 000D                         strlen@s 000B                       _TRISBbits 0F93  
                 __pidataCOMRAM 7E9E                  __end_of_strlen 7F3C             start_initialization 7EE0  
             ??_Set_Instruction 000D    Set_Instruction@S_Instruction 000D                        ??_strlen 000D  
             ?_LCD_Instructions 000B              ??_LCD_Instructions 000B  Write_Instruction@W_Instruction 000D  
                      _RCONbits 0FD0                     _INTCON2bits 0FF1                       copy_data0 7EF4  
                 _Configuration 7F78                        __Hrparam 0000                        __Lrparam 0000  
               _Set_Instruction 7EB8     LCD_Instructions@Instruction 000C                  ?_Configuration 000B  
                      isa$xinst 0000                      _INTCONbits 0FF2         __end_of_Set_Instruction 7ECC  
               ??_Configuration 000E  
