

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Dec 28 23:01:48 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     
    55                           	psect	idataCOMRAM
    56   007E76                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _Text2
    60   007E76  45                 	db	69
    61   007E77  76                 	db	118
    62   007E78  65                 	db	101
    63   007E79  72                 	db	114
    64   007E7A  79                 	db	121
    65   007E7B  6F                 	db	111
    66   007E7C  6E                 	db	110
    67   007E7D  65                 	db	101
    68   007E7E  21                 	db	33
    69   007E7F  00                 	db	0
    70   007E80  00                 	db	0
    71   007E81  00                 	db	0
    72   007E82  00                 	db	0
    73   007E83  00                 	db	0
    74   007E84  00                 	db	0
    75   007E85  00                 	db	0
    76   007E86  00                 	db	0
    77   007E87  00                 	db	0
    78   007E88  00                 	db	0
    79   007E89  00                 	db	0
    80   007E8A  00                 	db	0
    81   007E8B  00                 	db	0
    82   007E8C  00                 	db	0
    83   007E8D  00                 	db	0
    84   007E8E  00                 	db	0
    85   007E8F  00                 	db	0
    86                           
    87                           ;initializer for _Text1
    88   007E90  48                 	db	72
    89   007E91  65                 	db	101
    90   007E92  6C                 	db	108
    91   007E93  6C                 	db	108
    92   007E94  6F                 	db	111
    93   007E95  21                 	db	33
    94   007E96  00                 	db	0
    95   007E97  00                 	db	0
    96   007E98  00                 	db	0
    97   007E99  00                 	db	0
    98   007E9A  00                 	db	0
    99   007E9B  00                 	db	0
   100   007E9C  00                 	db	0
   101   007E9D  00                 	db	0
   102   007E9E  00                 	db	0
   103   007E9F  00                 	db	0
   104   007EA0  00                 	db	0
   105   007EA1  00                 	db	0
   106   007EA2  00                 	db	0
   107   007EA3  00                 	db	0
   108   000000                     _LATE1	set	31849
   109   000000                     _LATD	set	3980
   110   000000                     _TRISBbits	set	3987
   111   000000                     _ADCON1	set	4033
   112   000000                     _OSCCON	set	4051
   113   000000                     _LATE0	set	31848
   114   000000                     _INTCON2bits	set	4081
   115   000000                     _INTCONbits	set	4082
   116   000000                     _RCONbits	set	4048
   117   000000                     _TRISD	set	3989
   118   000000                     _TRISE	set	3990
   119                           
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123   007E50                     __pcinit:
   124                           	callstack 0
   125   007E50                     start_initialization:
   126                           	callstack 0
   127   007E50                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (46 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132   007E50  0E76               	movlw	low __pidataCOMRAM
   133   007E52  6EF6               	movwf	tblptrl,c
   134   007E54  0E7E               	movlw	high __pidataCOMRAM
   135   007E56  6EF7               	movwf	tblptrh,c
   136   007E58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137   007E5A  6EF8               	movwf	tblptru,c
   138   007E5C  EE00  F001         	lfsr	0,__pdataCOMRAM
   139   007E60  EE10 F02E          	lfsr	1,46
   140   007E64                     copy_data0:
   141   007E64  0009               	tblrd		*+
   142   007E66  CFF5 FFEE          	movff	tablat,postinc0
   143   007E6A  50E5               	movf	postdec1,w,c
   144   007E6C  50E1               	movf	fsr1l,w,c
   145   007E6E  E1FA               	bnz	copy_data0
   146   007E70                     end_of_initialization:
   147                           	callstack 0
   148   007E70                     __end_of__initialization:
   149                           	callstack 0
   150   007E70  0100               	movlb	0
   151   007E72  EF0A  F03F         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	dataCOMRAM
   154   000001                     __pdataCOMRAM:
   155                           	callstack 0
   156   000001                     _Text2:
   157                           	callstack 0
   158   000001                     	ds	26
   159   00001B                     _Text1:
   160                           	callstack 0
   161   00001B                     	ds	20
   162                           
   163                           	psect	cstackCOMRAM
   164   00002F                     __pcstackCOMRAM:
   165                           	callstack 0
   166   00002F                     ??_LCD_Instructions:
   167   00002F                     ?_strlen:
   168                           	callstack 0
   169   00002F                     strlen@s:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x0
   173   00002F                     	ds	1
   174   000030                     LCD_Instructions@Instruction:
   175                           	callstack 0
   176                           
   177                           ; 1 bytes @ 0x1
   178   000030                     	ds	1
   179   000031                     Set_Instruction@S_Instruction:
   180                           	callstack 0
   181   000031                     Write_Instruction@W_Instruction:
   182                           	callstack 0
   183   000031                     strlen@a:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187   000031                     	ds	1
   188   000032                     
   189                           ; 1 bytes @ 0x3
   190   000032                     	ds	1
   191   000033                     ??_Test:
   192                           
   193                           ; 1 bytes @ 0x4
   194   000033                     	ds	2
   195   000035                     Test@i:
   196                           	callstack 0
   197                           
   198                           ; 2 bytes @ 0x6
   199   000035                     	ds	2
   200   000037                     Test@j:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x8
   204   000037                     	ds	2
   205   000039                     
   206                           ; 1 bytes @ 0xA
   207 ;;
   208 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   209 ;;
   210 ;; *************** function _main *****************
   211 ;; Defined at:
   212 ;;		line 38 in file "main.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         0       0       0       0       0       0       0       0       0
   227 ;;      Locals:         0       0       0       0       0       0       0       0       0
   228 ;;      Temps:          0       0       0       0       0       0       0       0       0
   229 ;;      Totals:         0       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        0 bytes
   231 ;; Hardware stack levels required when called: 3
   232 ;; This function calls:
   233 ;;		_Configuration
   234 ;;		_Test
   235 ;; This function is called by:
   236 ;;		Startup code after reset
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           	psect	text0
   241   007E14                     __ptext0:
   242                           	callstack 0
   243   007E14                     _main:
   244                           	callstack 28
   245   007E14                     
   246                           ;main.c: 41:     Configuration();
   247   007E14  EC8B  F03F         	call	_Configuration	;wreg free
   248   007E18                     
   249                           ;main.c: 42:     Test();
   250   007E18  ECA9  F03F         	call	_Test	;wreg free
   251   007E1C                     l43:
   252   007E1C  EF0E  F03F         	goto	l43
   253   007E20  EF00  F000         	goto	start
   254   007E24                     __end_of_main:
   255                           	callstack 0
   256                           
   257 ;; *************** function _Test *****************
   258 ;; Defined at:
   259 ;;		line 112 in file "main.c"
   260 ;; Parameters:    Size  Location     Type
   261 ;;		None
   262 ;; Auto vars:     Size  Location     Type
   263 ;;  j               2    8[COMRAM] int 
   264 ;;  i               2    6[COMRAM] int 
   265 ;; Return value:  Size  Location     Type
   266 ;;                  1    wreg      void 
   267 ;; Registers used:
   268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   274 ;;      Params:         0       0       0       0       0       0       0       0       0
   275 ;;      Locals:         4       0       0       0       0       0       0       0       0
   276 ;;      Temps:          2       0       0       0       0       0       0       0       0
   277 ;;      Totals:         6       0       0       0       0       0       0       0       0
   278 ;;Total ram usage:        6 bytes
   279 ;; Hardware stack levels used: 1
   280 ;; Hardware stack levels required when called: 2
   281 ;; This function calls:
   282 ;;		_Set_Instruction
   283 ;;		_Write_Instruction
   284 ;;		_strlen
   285 ;; This function is called by:
   286 ;;		_main
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290                           	psect	text1
   291   007F52                     __ptext1:
   292                           	callstack 0
   293   007F52                     _Test:
   294                           	callstack 28
   295   007F52                     
   296                           ;main.c: 114:     Set_Instruction(0x80);
   297   007F52  0E80               	movlw	128
   298   007F54  EC12  F03F         	call	_Set_Instruction
   299   007F58                     
   300                           ;main.c: 116:     for (int i = 0; i < strlen(Text1); i++) {
   301   007F58  0E00               	movlw	0
   302   007F5A  6E36               	movwf	(Test@i+1)^0,c
   303   007F5C  0E00               	movlw	0
   304   007F5E  6E35               	movwf	Test@i^0,c
   305   007F60  EFBD  F03F         	goto	l847
   306   007F64                     l843:
   307                           
   308                           ;main.c: 118:         Write_Instruction(Text1[i]);
   309   007F64  0E1B               	movlw	low _Text1
   310   007F66  2435               	addwf	Test@i^0,w,c
   311   007F68  6ED9               	movwf	fsr2l,c
   312   007F6A  0E00               	movlw	high _Text1
   313   007F6C  2036               	addwfc	(Test@i+1)^0,w,c
   314   007F6E  6EDA               	movwf	fsr2h,c
   315   007F70  50DF               	movf	indf2,w,c
   316   007F72  EC1D  F03F         	call	_Write_Instruction
   317   007F76                     
   318                           ;main.c: 120:     }
   319   007F76  4A35               	infsnz	Test@i^0,f,c
   320   007F78  2A36               	incf	(Test@i+1)^0,f,c
   321   007F7A                     l847:
   322   007F7A  0E1B               	movlw	low _Text1
   323   007F7C  6E2F               	movwf	strlen@s^0,c
   324   007F7E  0E00               	movlw	high _Text1
   325   007F80  6E30               	movwf	(strlen@s+1)^0,c
   326   007F82  EC52  F03F         	call	_strlen	;wreg free
   327   007F86  502F               	movf	?_strlen^0,w,c
   328   007F88  5C35               	subwf	Test@i^0,w,c
   329   007F8A  5030               	movf	(?_strlen+1)^0,w,c
   330   007F8C  5836               	subwfb	(Test@i+1)^0,w,c
   331   007F8E  A0D8               	btfss	status,0,c
   332   007F90  EFCC  F03F         	goto	u51
   333   007F94  EFCE  F03F         	goto	u50
   334   007F98                     u51:
   335   007F98  EFB2  F03F         	goto	l843
   336   007F9C                     u50:
   337   007F9C                     
   338                           ;main.c: 122:     _delay((unsigned long)((100)*(8000000/4000.0)));
   339   007F9C  0E02               	movlw	2
   340   007F9E  6E34               	movwf	(??_Test+1)^0,c
   341   007FA0  0E04               	movlw	4
   342   007FA2  6E33               	movwf	??_Test^0,c
   343   007FA4  0EBA               	movlw	186
   344   007FA6                     u77:
   345   007FA6  2EE8               	decfsz	wreg,f,c
   346   007FA8  D7FE               	bra	u77
   347   007FAA  2E33               	decfsz	??_Test^0,f,c
   348   007FAC  D7FC               	bra	u77
   349   007FAE  2E34               	decfsz	(??_Test+1)^0,f,c
   350   007FB0  D7FA               	bra	u77
   351   007FB2  D000               	nop2	
   352   007FB4                     
   353                           ;main.c: 124:     Set_Instruction(0xC0);
   354   007FB4  0EC0               	movlw	192
   355   007FB6  EC12  F03F         	call	_Set_Instruction
   356   007FBA                     
   357                           ;main.c: 126:     for (int j = 0; j < strlen(Text2); j++) {
   358   007FBA  0E00               	movlw	0
   359   007FBC  6E38               	movwf	(Test@j+1)^0,c
   360   007FBE  0E00               	movlw	0
   361   007FC0  6E37               	movwf	Test@j^0,c
   362   007FC2  EFEE  F03F         	goto	l859
   363   007FC6                     l855:
   364                           
   365                           ;main.c: 128:         Write_Instruction(Text2[j]);
   366   007FC6  0E01               	movlw	low _Text2
   367   007FC8  2437               	addwf	Test@j^0,w,c
   368   007FCA  6ED9               	movwf	fsr2l,c
   369   007FCC  0E00               	movlw	high _Text2
   370   007FCE  2038               	addwfc	(Test@j+1)^0,w,c
   371   007FD0  6EDA               	movwf	fsr2h,c
   372   007FD2  50DF               	movf	indf2,w,c
   373   007FD4  EC1D  F03F         	call	_Write_Instruction
   374   007FD8                     
   375                           ;main.c: 130:     }
   376   007FD8  4A37               	infsnz	Test@j^0,f,c
   377   007FDA  2A38               	incf	(Test@j+1)^0,f,c
   378   007FDC                     l859:
   379   007FDC  0E01               	movlw	low _Text2
   380   007FDE  6E2F               	movwf	strlen@s^0,c
   381   007FE0  0E00               	movlw	high _Text2
   382   007FE2  6E30               	movwf	(strlen@s+1)^0,c
   383   007FE4  EC52  F03F         	call	_strlen	;wreg free
   384   007FE8  502F               	movf	?_strlen^0,w,c
   385   007FEA  5C37               	subwf	Test@j^0,w,c
   386   007FEC  5030               	movf	(?_strlen+1)^0,w,c
   387   007FEE  5838               	subwfb	(Test@j+1)^0,w,c
   388   007FF0  A0D8               	btfss	status,0,c
   389   007FF2  EFFD  F03F         	goto	u61
   390   007FF6  EFFF  F03F         	goto	u60
   391   007FFA                     u61:
   392   007FFA  EFE3  F03F         	goto	l855
   393   007FFE                     u60:
   394   007FFE  0012               	return		;funcret
   395   008000                     __end_of_Test:
   396                           	callstack 0
   397                           
   398 ;; *************** function _strlen *****************
   399 ;; Defined at:
   400 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;  s               2    0[COMRAM] PTR const unsigned char 
   403 ;;		 -> Text2(26), Text1(20), 
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  a               2    2[COMRAM] PTR const unsigned char 
   406 ;;		 -> Text2(26), Text1(20), 
   407 ;; Return value:  Size  Location     Type
   408 ;;                  2    0[COMRAM] unsigned int 
   409 ;; Registers used:
   410 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   416 ;;      Params:         2       0       0       0       0       0       0       0       0
   417 ;;      Locals:         2       0       0       0       0       0       0       0       0
   418 ;;      Temps:          0       0       0       0       0       0       0       0       0
   419 ;;      Totals:         4       0       0       0       0       0       0       0       0
   420 ;;Total ram usage:        4 bytes
   421 ;; Hardware stack levels used: 1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_Test
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text2
   430   007EA4                     __ptext2:
   431                           	callstack 0
   432   007EA4                     _strlen:
   433                           	callstack 29
   434   007EA4  C02F  F031         	movff	strlen@s,strlen@a
   435   007EA8  C030  F032         	movff	strlen@s+1,strlen@a+1
   436   007EAC  EF5A  F03F         	goto	l833
   437   007EB0                     l831:
   438   007EB0  4A2F               	infsnz	strlen@s^0,f,c
   439   007EB2  2A30               	incf	(strlen@s+1)^0,f,c
   440   007EB4                     l833:
   441   007EB4  C02F  FFD9         	movff	strlen@s,fsr2l
   442   007EB8  C030  FFDA         	movff	strlen@s+1,fsr2h
   443   007EBC  50DF               	movf	indf2,w,c
   444   007EBE  A4D8               	btfss	status,2,c
   445   007EC0  EF64  F03F         	goto	u41
   446   007EC4  EF66  F03F         	goto	u40
   447   007EC8                     u41:
   448   007EC8  EF58  F03F         	goto	l831
   449   007ECC                     u40:
   450   007ECC  5031               	movf	strlen@a^0,w,c
   451   007ECE  5C2F               	subwf	strlen@s^0,w,c
   452   007ED0  6E2F               	movwf	?_strlen^0,c
   453   007ED2  5032               	movf	(strlen@a+1)^0,w,c
   454   007ED4  5830               	subwfb	(strlen@s+1)^0,w,c
   455   007ED6  6E30               	movwf	(?_strlen+1)^0,c
   456   007ED8  0012               	return		;funcret
   457   007EDA                     __end_of_strlen:
   458                           	callstack 0
   459                           
   460 ;; *************** function _Write_Instruction *****************
   461 ;; Defined at:
   462 ;;		line 90 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  W_Instructio    1    wreg     unsigned char 
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  W_Instructio    1    2[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, status,2, status,0, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   476 ;;      Params:         0       0       0       0       0       0       0       0       0
   477 ;;      Locals:         1       0       0       0       0       0       0       0       0
   478 ;;      Temps:          0       0       0       0       0       0       0       0       0
   479 ;;      Totals:         1       0       0       0       0       0       0       0       0
   480 ;;Total ram usage:        1 bytes
   481 ;; Hardware stack levels used: 1
   482 ;; Hardware stack levels required when called: 1
   483 ;; This function calls:
   484 ;;		_LCD_Instructions
   485 ;; This function is called by:
   486 ;;		_Test
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text3
   491   007E3A                     __ptext3:
   492                           	callstack 0
   493   007E3A                     _Write_Instruction:
   494                           	callstack 28
   495                           
   496                           ;incstack = 0
   497                           ;Write_Instruction@W_Instruction stored from wreg
   498   007E3A  6E31               	movwf	Write_Instruction@W_Instruction^0,c
   499   007E3C                     
   500                           ;main.c: 92:     LATE0 = 1;
   501   007E3C  808D               	bsf	3981,0,c	;volatile
   502   007E3E                     
   503                           ;main.c: 93:     LCD_Instructions(W_Instruction >> 4);
   504   007E3E  3831               	swapf	Write_Instruction@W_Instruction^0,w,c
   505   007E40  0B0F               	andlw	15
   506   007E42  EC6D  F03F         	call	_LCD_Instructions
   507                           
   508                           ;main.c: 94:     LCD_Instructions(W_Instruction & 0x0F);
   509   007E46  5031               	movf	Write_Instruction@W_Instruction^0,w,c
   510   007E48  0B0F               	andlw	15
   511   007E4A  EC6D  F03F         	call	_LCD_Instructions
   512   007E4E  0012               	return		;funcret
   513   007E50                     __end_of_Write_Instruction:
   514                           	callstack 0
   515                           
   516 ;; *************** function _Configuration *****************
   517 ;; Defined at:
   518 ;;		line 54 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   532 ;;      Params:         0       0       0       0       0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0       0       0
   535 ;;      Totals:         0       0       0       0       0       0       0       0       0
   536 ;;Total ram usage:        0 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; Hardware stack levels required when called: 2
   539 ;; This function calls:
   540 ;;		_Set_Instruction
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text4
   547   007F16                     __ptext4:
   548                           	callstack 0
   549   007F16                     _Configuration:
   550                           	callstack 28
   551   007F16                     
   552                           ;main.c: 56:     OSCCON = 0x72;
   553   007F16  0E72               	movlw	114
   554   007F18  6ED3               	movwf	211,c	;volatile
   555                           
   556                           ;main.c: 57:     ADCON1 = 0x0F;
   557   007F1A  0E0F               	movlw	15
   558   007F1C  6EC1               	movwf	193,c	;volatile
   559   007F1E                     
   560                           ;main.c: 59:     TRISBbits.RB0 = 1;
   561   007F1E  8093               	bsf	147,0,c	;volatile
   562                           
   563                           ;main.c: 60:     TRISD = 0x00;
   564   007F20  0E00               	movlw	0
   565   007F22  6E95               	movwf	149,c	;volatile
   566                           
   567                           ;main.c: 61:     TRISE = 0x00;
   568   007F24  0E00               	movlw	0
   569   007F26  6E96               	movwf	150,c	;volatile
   570   007F28                     
   571                           ;main.c: 64:     RCONbits.IPEN = 0;
   572   007F28  9ED0               	bcf	208,7,c	;volatile
   573   007F2A                     
   574                           ;main.c: 65:     INTCONbits.GIE = 1;
   575   007F2A  8EF2               	bsf	242,7,c	;volatile
   576   007F2C                     
   577                           ;main.c: 66:     INTCONbits.INT0E = 1;
   578   007F2C  88F2               	bsf	242,4,c	;volatile
   579   007F2E                     
   580                           ;main.c: 67:     INTCONbits.INT0IF = 0;
   581   007F2E  92F2               	bcf	242,1,c	;volatile
   582   007F30                     
   583                           ;main.c: 68:     INTCON2bits.INTEDG0 = 0;
   584   007F30  9CF1               	bcf	241,6,c	;volatile
   585   007F32                     
   586                           ;main.c: 71:     Set_Instruction(0x02);
   587   007F32  0E02               	movlw	2
   588   007F34  EC12  F03F         	call	_Set_Instruction
   589   007F38                     
   590                           ;main.c: 72:     Set_Instruction(0x06);
   591   007F38  0E06               	movlw	6
   592   007F3A  EC12  F03F         	call	_Set_Instruction
   593   007F3E                     
   594                           ;main.c: 73:     Set_Instruction(0x0F);
   595   007F3E  0E0F               	movlw	15
   596   007F40  EC12  F03F         	call	_Set_Instruction
   597   007F44                     
   598                           ;main.c: 74:     Set_Instruction(0x28);
   599   007F44  0E28               	movlw	40
   600   007F46  EC12  F03F         	call	_Set_Instruction
   601   007F4A                     
   602                           ;main.c: 75:     Set_Instruction(0x01);
   603   007F4A  0E01               	movlw	1
   604   007F4C  EC12  F03F         	call	_Set_Instruction
   605   007F50  0012               	return		;funcret
   606   007F52                     __end_of_Configuration:
   607                           	callstack 0
   608                           
   609 ;; *************** function _Set_Instruction *****************
   610 ;; Defined at:
   611 ;;		line 80 in file "main.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;  S_Instructio    1    wreg     unsigned char 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  S_Instructio    1    2[COMRAM] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   625 ;;      Params:         0       0       0       0       0       0       0       0       0
   626 ;;      Locals:         1       0       0       0       0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0       0       0       0       0
   628 ;;      Totals:         1       0       0       0       0       0       0       0       0
   629 ;;Total ram usage:        1 bytes
   630 ;; Hardware stack levels used: 1
   631 ;; Hardware stack levels required when called: 1
   632 ;; This function calls:
   633 ;;		_LCD_Instructions
   634 ;; This function is called by:
   635 ;;		_Configuration
   636 ;;		_Test
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text5
   641   007E24                     __ptext5:
   642                           	callstack 0
   643   007E24                     _Set_Instruction:
   644                           	callstack 28
   645                           
   646                           ;incstack = 0
   647                           ;Set_Instruction@S_Instruction stored from wreg
   648   007E24  6E31               	movwf	Set_Instruction@S_Instruction^0,c
   649   007E26                     
   650                           ;main.c: 82:     LATE0 = 0;
   651   007E26  908D               	bcf	3981,0,c	;volatile
   652   007E28                     
   653                           ;main.c: 83:     LCD_Instructions(S_Instruction >> 4);
   654   007E28  3831               	swapf	Set_Instruction@S_Instruction^0,w,c
   655   007E2A  0B0F               	andlw	15
   656   007E2C  EC6D  F03F         	call	_LCD_Instructions
   657                           
   658                           ;main.c: 84:     LCD_Instructions(S_Instruction & 0x0F);
   659   007E30  5031               	movf	Set_Instruction@S_Instruction^0,w,c
   660   007E32  0B0F               	andlw	15
   661   007E34  EC6D  F03F         	call	_LCD_Instructions
   662   007E38  0012               	return		;funcret
   663   007E3A                     __end_of_Set_Instruction:
   664                           	callstack 0
   665                           
   666 ;; *************** function _LCD_Instructions *****************
   667 ;; Defined at:
   668 ;;		line 100 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;  Instruction     1    wreg     unsigned char 
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  Instruction     1    1[COMRAM] unsigned char 
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, status,2, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   682 ;;      Params:         0       0       0       0       0       0       0       0       0
   683 ;;      Locals:         1       0       0       0       0       0       0       0       0
   684 ;;      Temps:          1       0       0       0       0       0       0       0       0
   685 ;;      Totals:         2       0       0       0       0       0       0       0       0
   686 ;;Total ram usage:        2 bytes
   687 ;; Hardware stack levels used: 1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_Set_Instruction
   692 ;;		_Write_Instruction
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text6
   697   007EDA                     __ptext6:
   698                           	callstack 0
   699   007EDA                     _LCD_Instructions:
   700                           	callstack 28
   701                           
   702                           ;incstack = 0
   703                           ;LCD_Instructions@Instruction stored from wreg
   704   007EDA  6E30               	movwf	LCD_Instructions@Instruction^0,c
   705   007EDC                     
   706                           ;main.c: 102:     LATE1 = 1;
   707   007EDC  828D               	bsf	3981,1,c	;volatile
   708   007EDE                     
   709                           ;main.c: 103:     _delay((unsigned long)((15)*(8000000/4000.0)));
   710   007EDE  0E27               	movlw	39
   711   007EE0  6E2F               	movwf	??_LCD_Instructions^0,c
   712   007EE2  0EF5               	movlw	245
   713   007EE4                     u87:
   714   007EE4  2EE8               	decfsz	wreg,f,c
   715   007EE6  D7FE               	bra	u87
   716   007EE8  2E2F               	decfsz	??_LCD_Instructions^0,f,c
   717   007EEA  D7FC               	bra	u87
   718   007EEC  F000               	nop	
   719   007EEE                     
   720                           ;main.c: 104:     LATD = Instruction;
   721   007EEE  C030  FF8C         	movff	LCD_Instructions@Instruction,3980	;volatile
   722   007EF2                     
   723                           ;main.c: 105:     _delay((unsigned long)((15)*(8000000/4000.0)));
   724   007EF2  0E27               	movlw	39
   725   007EF4  6E2F               	movwf	??_LCD_Instructions^0,c
   726   007EF6  0EF5               	movlw	245
   727   007EF8                     u97:
   728   007EF8  2EE8               	decfsz	wreg,f,c
   729   007EFA  D7FE               	bra	u97
   730   007EFC  2E2F               	decfsz	??_LCD_Instructions^0,f,c
   731   007EFE  D7FC               	bra	u97
   732   007F00  F000               	nop	
   733   007F02                     
   734                           ;main.c: 106:     LATE1 = 0;
   735   007F02  928D               	bcf	3981,1,c	;volatile
   736   007F04                     
   737                           ;main.c: 107:     _delay((unsigned long)((15)*(8000000/4000.0)));
   738   007F04  0E27               	movlw	39
   739   007F06  6E2F               	movwf	??_LCD_Instructions^0,c
   740   007F08  0EF5               	movlw	245
   741   007F0A                     u107:
   742   007F0A  2EE8               	decfsz	wreg,f,c
   743   007F0C  D7FE               	bra	u107
   744   007F0E  2E2F               	decfsz	??_LCD_Instructions^0,f,c
   745   007F10  D7FC               	bra	u107
   746   007F12  F000               	nop	
   747   007F14  0012               	return		;funcret
   748   007F16                     __end_of_LCD_Instructions:
   749                           	callstack 0
   750   000000                     
   751                           	psect	rparam
   752   000000                     
   753                           	psect	config
   754                           
   755                           ;Config register CONFIG1L @ 0x300000
   756                           ;	PLL Prescaler Selection bits
   757                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   758                           ;	System Clock Postscaler Selection bits
   759                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   760                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   761                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   762   300000                     	org	3145728
   763   300000  00                 	db	0
   764                           
   765                           ;Config register CONFIG1H @ 0x300001
   766                           ;	Oscillator Selection bits
   767                           ;	FOSC = INTOSC_HS, Internal oscillator, HS oscillator used by USB (INTHS)
   768                           ;	Fail-Safe Clock Monitor Enable bit
   769                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   770                           ;	Internal/External Oscillator Switchover bit
   771                           ;	IESO = OFF, Oscillator Switchover mode disabled
   772   300001                     	org	3145729
   773   300001  0B                 	db	11
   774                           
   775                           ;Config register CONFIG2L @ 0x300002
   776                           ;	Power-up Timer Enable bit
   777                           ;	PWRT = OFF, PWRT disabled
   778                           ;	Brown-out Reset Enable bits
   779                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   780                           ;	Brown-out Reset Voltage bits
   781                           ;	BORV = 3, Minimum setting 2.05V
   782                           ;	USB Voltage Regulator Enable bit
   783                           ;	VREGEN = OFF, USB voltage regulator disabled
   784   300002                     	org	3145730
   785   300002  19                 	db	25
   786                           
   787                           ;Config register CONFIG2H @ 0x300003
   788                           ;	Watchdog Timer Enable bit
   789                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   790                           ;	Watchdog Timer Postscale Select bits
   791                           ;	WDTPS = 32768, 1:32768
   792   300003                     	org	3145731
   793   300003  1E                 	db	30
   794                           
   795                           ; Padding undefined space
   796   300004                     	org	3145732
   797   300004  FF                 	db	255
   798                           
   799                           ;Config register CONFIG3H @ 0x300005
   800                           ;	CCP2 MUX bit
   801                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   802                           ;	PORTB A/D Enable bit
   803                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   804                           ;	Low-Power Timer 1 Oscillator Enable bit
   805                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   806                           ;	MCLR Pin Enable bit
   807                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   808   300005                     	org	3145733
   809   300005  83                 	db	131
   810                           
   811                           ;Config register CONFIG4L @ 0x300006
   812                           ;	Stack Full/Underflow Reset Enable bit
   813                           ;	STVREN = ON, Stack full/underflow will cause Reset
   814                           ;	Single-Supply ICSP Enable bit
   815                           ;	LVP = OFF, Single-Supply ICSP disabled
   816                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   817                           ;	ICPRT = OFF, ICPORT disabled
   818                           ;	Extended Instruction Set Enable bit
   819                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   820                           ;	Background Debugger Enable bit
   821                           ;	DEBUG = 0x1, unprogrammed default
   822   300006                     	org	3145734
   823   300006  81                 	db	129
   824                           
   825                           ; Padding undefined space
   826   300007                     	org	3145735
   827   300007  FF                 	db	255
   828                           
   829                           ;Config register CONFIG5L @ 0x300008
   830                           ;	Code Protection bit
   831                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   832                           ;	Code Protection bit
   833                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   834                           ;	Code Protection bit
   835                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   836                           ;	Code Protection bit
   837                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   838   300008                     	org	3145736
   839   300008  0F                 	db	15
   840                           
   841                           ;Config register CONFIG5H @ 0x300009
   842                           ;	Boot Block Code Protection bit
   843                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   844                           ;	Data EEPROM Code Protection bit
   845                           ;	CPD = OFF, Data EEPROM is not code-protected
   846   300009                     	org	3145737
   847   300009  C0                 	db	192
   848                           
   849                           ;Config register CONFIG6L @ 0x30000A
   850                           ;	Write Protection bit
   851                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   852                           ;	Write Protection bit
   853                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   854                           ;	Write Protection bit
   855                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   856                           ;	Write Protection bit
   857                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   858   30000A                     	org	3145738
   859   30000A  0F                 	db	15
   860                           
   861                           ;Config register CONFIG6H @ 0x30000B
   862                           ;	Configuration Register Write Protection bit
   863                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   864                           ;	Boot Block Write Protection bit
   865                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   866                           ;	Data EEPROM Write Protection bit
   867                           ;	WRTD = OFF, Data EEPROM is not write-protected
   868   30000B                     	org	3145739
   869   30000B  E0                 	db	224
   870                           
   871                           ;Config register CONFIG7L @ 0x30000C
   872                           ;	Table Read Protection bit
   873                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   874                           ;	Table Read Protection bit
   875                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   876                           ;	Table Read Protection bit
   877                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   878                           ;	Table Read Protection bit
   879                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   880   30000C                     	org	3145740
   881   30000C  0F                 	db	15
   882                           
   883                           ;Config register CONFIG7H @ 0x30000D
   884                           ;	Boot Block Table Read Protection bit
   885                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   886   30000D                     	org	3145741
   887   30000D  40                 	db	64
   888                           tosu	equ	0xFFF
   889                           tosh	equ	0xFFE
   890                           tosl	equ	0xFFD
   891                           stkptr	equ	0xFFC
   892                           pclatu	equ	0xFFB
   893                           pclath	equ	0xFFA
   894                           pcl	equ	0xFF9
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           prodh	equ	0xFF4
   900                           prodl	equ	0xFF3
   901                           indf0	equ	0xFEF
   902                           postinc0	equ	0xFEE
   903                           postdec0	equ	0xFED
   904                           preinc0	equ	0xFEC
   905                           plusw0	equ	0xFEB
   906                           fsr0h	equ	0xFEA
   907                           fsr0l	equ	0xFE9
   908                           wreg	equ	0xFE8
   909                           indf1	equ	0xFE7
   910                           postinc1	equ	0xFE6
   911                           postdec1	equ	0xFE5
   912                           preinc1	equ	0xFE4
   913                           plusw1	equ	0xFE3
   914                           fsr1h	equ	0xFE2
   915                           fsr1l	equ	0xFE1
   916                           bsr	equ	0xFE0
   917                           indf2	equ	0xFDF
   918                           postinc2	equ	0xFDE
   919                           postdec2	equ	0xFDD
   920                           preinc2	equ	0xFDC
   921                           plusw2	equ	0xFDB
   922                           fsr2h	equ	0xFDA
   923                           fsr2l	equ	0xFD9
   924                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        46
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      56
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 26
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 26
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_strlen
    _Write_Instruction->_LCD_Instructions
    _Configuration->_Set_Instruction
    _Set_Instruction->_LCD_Instructions

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     469
                      _Configuration
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                 6     6      0     424
                                              4 COMRAM     6     6      0
                    _Set_Instruction
                  _Write_Instruction
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Write_Instruction                                    1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0      45
                    _Set_Instruction
 ---------------------------------------------------------------------------------
 (2) _Set_Instruction                                      1     1      0      45
                                              2 COMRAM     1     1      0
                   _LCD_Instructions
 ---------------------------------------------------------------------------------
 (3) _LCD_Instructions                                     2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
     _Set_Instruction
       _LCD_Instructions
   _Test
     _Set_Instruction
     _Write_Instruction
       _LCD_Instructions
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      38       1       58.9%
BITBIGSFRllll       2C      0       0      27        0.0%
BITBIGSFRllhh       2A      0       0      24        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRlhl         E      0       0      23        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlllh        5      0       0      26        0.0%
BITBIGSFRlhh         2      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      38      28        0.0%
DATA                 0      0      38       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Dec 28 23:01:48 2023

                            l43 7E1C                              l52 7E38                              l44 7E1C  
                            l55 7E4E                              l49 7F50                              l58 7F14  
                            l67 7FFE                              u40 7ECC                              u41 7EC8  
                            u50 7F9C                              u51 7F98                              u60 7FFE  
                            u61 7FFA                              u77 7FA6                              u87 7EE4  
                            u97 7EF8                             l801 7F4A                             l751 7EDE  
                           l831 7EB0                             l753 7EEE                             l761 7E26  
                           l833 7EB4                             l841 7F58                             l755 7EF2  
                           l763 7E28                             l747 7ED8                             l835 7ECC  
                           l851 7FB4                             l843 7F64                             l757 7F02  
                           l749 7EDC                             l781 7F1E                             l765 7E3C  
                           l829 7EA4                             l853 7FBA                             l845 7F76  
                           l861 7E14                             l759 7F04                             l791 7F30  
                           l783 7F28                             l767 7E3E                             l855 7FC6  
                           l847 7F7A                             l839 7F52                             l863 7E18  
                           l793 7F32                             l785 7F2A                             l857 7FD8  
                           l849 7F9C                             l795 7F38                             l787 7F2C  
                           l779 7F16                             l859 7FDC                             l797 7F3E  
                           l789 7F2E                             l799 7F44                             u107 7F0A  
                           wreg 0FE8                            _LATD 0F8C                            _Test 7F52  
                          _main 7E14                            fsr2h 0FDA                            indf2 0FDF  
                          fsr1l 0FE1                            fsr2l 0FD9                            start 0000  
                  ___param_bank 0000                ?_Set_Instruction 002F                           ?_Test 002F  
                         ?_main 002F                           _LATE0 7C68                           _LATE1 7C69  
                         _TRISD 0F95                           _TRISE 0F96                           Test@i 0035  
                         Test@j 0037                           _Text1 001B                           _Text2 0001  
                         tablat 0FF5                           status 0FD8                 __initialization 7E50  
                  __end_of_Test 8000                    __end_of_main 7E24                _LCD_Instructions 7EDA  
                        ??_Test 0033                          ??_main 0039                   __activetblptr 0000  
                        _ADCON1 0FC1               _Write_Instruction 7E3A                          _OSCCON 0FD3  
            ?_Write_Instruction 002F             ??_Write_Instruction 0031                          isa$std 0001  
                        _strlen 7EA4                    __pdataCOMRAM 0001                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8       __end_of_Write_Instruction 7E50  
                    __accesstop 0060         __end_of__initialization 7E70                   ___rparam_used 0001  
                __pcstackCOMRAM 002F           __end_of_Configuration 7F52                         ?_strlen 002F  
      __end_of_LCD_Instructions 7F16                         __Hparam 0000                         __Lparam 0000  
                       __pcinit 7E50                         __ramtop 0800                         __ptext0 7E14  
                       __ptext1 7F52                         __ptext2 7EA4                         __ptext3 7E3A  
                       __ptext4 7F16                         __ptext5 7E24                         __ptext6 7EDA  
          end_of_initialization 7E70                         postdec1 0FE5                         postinc0 0FEE  
                       strlen@a 0031                         strlen@s 002F                       _TRISBbits 0F93  
                 __pidataCOMRAM 7E76                  __end_of_strlen 7EDA             start_initialization 7E50  
             ??_Set_Instruction 0031    Set_Instruction@S_Instruction 0031                        ??_strlen 0031  
             ?_LCD_Instructions 002F              ??_LCD_Instructions 002F  Write_Instruction@W_Instruction 0031  
                      _RCONbits 0FD0                     _INTCON2bits 0FF1                       copy_data0 7E64  
                 _Configuration 7F16                        __Hrparam 0000                        __Lrparam 0000  
               _Set_Instruction 7E24     LCD_Instructions@Instruction 0030                  ?_Configuration 002F  
                      isa$xinst 0000                      _INTCONbits 0FF2         __end_of_Set_Instruction 7E3A  
               ??_Configuration 0032  
