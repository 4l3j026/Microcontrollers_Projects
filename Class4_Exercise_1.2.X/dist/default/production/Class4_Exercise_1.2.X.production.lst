

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Jul 25 21:13:42 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   007DA8                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _Time
    58   007DA8  0320               	dw	800
    59   000000                     _LATA	set	3977
    60   000000                     _TRISA	set	3986
    61   000000                     _ADCON1	set	4033
    62   000000                     _OSCCON	set	4051
    63   000000                     _TRISE	set	3990
    64   000000                     _TRISD	set	3989
    65   000000                     _TRISC	set	3988
    66   000000                     _TRISB	set	3987
    67   000000                     _LATE	set	3981
    68   000000                     _LATD	set	3980
    69   000000                     _LATC	set	3979
    70   000000                     _LATB	set	3978
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   007DBA                     __pcinit:
    76                           	callstack 0
    77   007DBA                     start_initialization:
    78                           	callstack 0
    79   007DBA                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (2 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84   007DBA  0EA8               	movlw	low __pidataCOMRAM
    85   007DBC  6EF6               	movwf	tblptrl,c
    86   007DBE  0E7D               	movlw	high __pidataCOMRAM
    87   007DC0  6EF7               	movwf	tblptrh,c
    88   007DC2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89   007DC4  6EF8               	movwf	tblptru,c
    90   007DC6  0009               	tblrd		*+	;fetch initializer
    91   007DC8  CFF5 F00D          	movff	tablat,__pdataCOMRAM
    92   007DCC  0009               	tblrd		*+	;fetch initializer
    93   007DCE  CFF5 F00E          	movff	tablat,__pdataCOMRAM+1
    94   007DD2                     end_of_initialization:
    95                           	callstack 0
    96   007DD2                     __end_of__initialization:
    97                           	callstack 0
    98   007DD2  0100               	movlb	0
    99   007DD4  EFD5  F03E         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	dataCOMRAM
   102   00000D                     __pdataCOMRAM:
   103                           	callstack 0
   104   00000D                     _Time:
   105                           	callstack 0
   106   00000D                     	ds	2
   107                           
   108                           	psect	cstackCOMRAM
   109   000001                     __pcstackCOMRAM:
   110                           	callstack 0
   111   000001                     ??_Bitwise:
   112   000001                     
   113                           ; 1 bytes @ 0x0
   114   000001                     	ds	2
   115   000003                     Bitwise@A:
   116                           	callstack 0
   117                           
   118                           ; 2 bytes @ 0x2
   119   000003                     	ds	2
   120   000005                     Bitwise@B:
   121                           	callstack 0
   122                           
   123                           ; 2 bytes @ 0x4
   124   000005                     	ds	2
   125   000007                     Bitwise@C:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x6
   129   000007                     	ds	2
   130   000009                     Bitwise@D:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x8
   134   000009                     	ds	2
   135   00000B                     Bitwise@E:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0xA
   139   00000B                     	ds	2
   140   00000D                     
   141                           ; 1 bytes @ 0xC
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 27 in file "main.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;		None
   152 ;; Return value:  Size  Location     Type
   153 ;;                  1    wreg      void 
   154 ;; Registers used:
   155 ;;		wreg, status,2, status,0, cstack
   156 ;; Tracked objects:
   157 ;;		On entry : 0/0
   158 ;;		On exit  : 0/0
   159 ;;		Unchanged: 0/0
   160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   161 ;;      Params:         0       0       0       0       0       0       0       0       0
   162 ;;      Locals:         0       0       0       0       0       0       0       0       0
   163 ;;      Temps:          0       0       0       0       0       0       0       0       0
   164 ;;      Totals:         0       0       0       0       0       0       0       0       0
   165 ;;Total ram usage:        0 bytes
   166 ;; Hardware stack levels required when called: 1
   167 ;; This function calls:
   168 ;;		_Bitwise
   169 ;;		_Configuration
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176   007DAA                     __ptext0:
   177                           	callstack 0
   178   007DAA                     _main:
   179                           	callstack 30
   180   007DAA                     
   181                           ;main.c: 30:     Configuration();
   182   007DAA  ECEC  F03E         	call	_Configuration	;wreg free
   183   007DAE                     l796:
   184                           
   185                           ;main.c: 34:         Bitwise();
   186   007DAE  EC05  F03F         	call	_Bitwise	;wreg free
   187   007DB2  EFD7  F03E         	goto	l796
   188   007DB6  EF00  F000         	goto	start
   189   007DBA                     __end_of_main:
   190                           	callstack 0
   191                           
   192 ;; *************** function _Configuration *****************
   193 ;; Defined at:
   194 ;;		line 42 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;		None
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   208 ;;      Params:         0       0       0       0       0       0       0       0       0
   209 ;;      Locals:         0       0       0       0       0       0       0       0       0
   210 ;;      Temps:          0       0       0       0       0       0       0       0       0
   211 ;;      Totals:         0       0       0       0       0       0       0       0       0
   212 ;;Total ram usage:        0 bytes
   213 ;; Hardware stack levels used: 1
   214 ;; This function calls:
   215 ;;		Nothing
   216 ;; This function is called by:
   217 ;;		_main
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text1
   222   007DD8                     __ptext1:
   223                           	callstack 0
   224   007DD8                     _Configuration:
   225                           	callstack 30
   226   007DD8                     
   227                           ;main.c: 44:     OSCCON = 0x72;
   228   007DD8  0E72               	movlw	114
   229   007DDA  6ED3               	movwf	211,c	;volatile
   230                           
   231                           ;main.c: 45:     ADCON1 = 0x0F;
   232   007DDC  0E0F               	movlw	15
   233   007DDE  6EC1               	movwf	193,c	;volatile
   234                           
   235                           ;main.c: 48:     TRISA = 0x00;
   236   007DE0  0E00               	movlw	0
   237   007DE2  6E92               	movwf	146,c	;volatile
   238                           
   239                           ;main.c: 49:     TRISB = 0x00;
   240   007DE4  0E00               	movlw	0
   241   007DE6  6E93               	movwf	147,c	;volatile
   242                           
   243                           ;main.c: 50:     TRISC = 0x00;
   244   007DE8  0E00               	movlw	0
   245   007DEA  6E94               	movwf	148,c	;volatile
   246                           
   247                           ;main.c: 51:     TRISD = 0x00;
   248   007DEC  0E00               	movlw	0
   249   007DEE  6E95               	movwf	149,c	;volatile
   250                           
   251                           ;main.c: 52:     TRISE = 0x00;
   252   007DF0  0E00               	movlw	0
   253   007DF2  6E96               	movwf	150,c	;volatile
   254                           
   255                           ;main.c: 55:     LATA = 0x00;
   256   007DF4  0E00               	movlw	0
   257   007DF6  6E89               	movwf	137,c	;volatile
   258                           
   259                           ;main.c: 56:     LATB = 0x00;
   260   007DF8  0E00               	movlw	0
   261   007DFA  6E8A               	movwf	138,c	;volatile
   262                           
   263                           ;main.c: 57:     LATC = 0x00;
   264   007DFC  0E00               	movlw	0
   265   007DFE  6E8B               	movwf	139,c	;volatile
   266                           
   267                           ;main.c: 58:     LATD = 0x00;
   268   007E00  0E00               	movlw	0
   269   007E02  6E8C               	movwf	140,c	;volatile
   270                           
   271                           ;main.c: 59:     LATE = 0x00;
   272   007E04  0E00               	movlw	0
   273   007E06  6E8D               	movwf	141,c	;volatile
   274   007E08  0012               	return		;funcret
   275   007E0A                     __end_of_Configuration:
   276                           	callstack 0
   277                           
   278 ;; *************** function _Bitwise *****************
   279 ;; Defined at:
   280 ;;		line 65 in file "main.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  E               2   10[COMRAM] int 
   285 ;;  D               2    8[COMRAM] int 
   286 ;;  C               2    6[COMRAM] int 
   287 ;;  B               2    4[COMRAM] int 
   288 ;;  A               2    2[COMRAM] int 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2, status,0
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   298 ;;      Params:         0       0       0       0       0       0       0       0       0
   299 ;;      Locals:        10       0       0       0       0       0       0       0       0
   300 ;;      Temps:          2       0       0       0       0       0       0       0       0
   301 ;;      Totals:        12       0       0       0       0       0       0       0       0
   302 ;;Total ram usage:       12 bytes
   303 ;; Hardware stack levels used: 1
   304 ;; This function calls:
   305 ;;		Nothing
   306 ;; This function is called by:
   307 ;;		_main
   308 ;; This function uses a non-reentrant model
   309 ;;
   310                           
   311                           	psect	text2
   312   007E0A                     __ptext2:
   313                           	callstack 0
   314   007E0A                     _Bitwise:
   315                           	callstack 30
   316   007E0A                     
   317                           ;main.c: 68:     for (int A = 0; A < 6; A++) {
   318   007E0A  0E00               	movlw	0
   319   007E0C  6E04               	movwf	(Bitwise@A+1)^0,c
   320   007E0E  0E00               	movlw	0
   321   007E10  6E03               	movwf	Bitwise@A^0,c
   322   007E12                     l736:
   323   007E12  BE04               	btfsc	(Bitwise@A+1)^0,7,c
   324   007E14  EF15  F03F         	goto	u11
   325   007E18  5004               	movf	(Bitwise@A+1)^0,w,c
   326   007E1A  E109               	bnz	u10
   327   007E1C  0E06               	movlw	6
   328   007E1E  5C03               	subwf	Bitwise@A^0,w,c
   329   007E20  A0D8               	btfss	status,0,c
   330   007E22  EF15  F03F         	goto	u11
   331   007E26  EF17  F03F         	goto	u10
   332   007E2A                     u11:
   333   007E2A  EF19  F03F         	goto	l740
   334   007E2E                     u10:
   335   007E2E  EF37  F03F         	goto	l746
   336   007E32                     l740:
   337                           
   338                           ;main.c: 69:         LATA = (0x03 << A);
   339   007E32  C003  F001         	movff	Bitwise@A,??_Bitwise
   340   007E36  0E03               	movlw	3
   341   007E38  6E02               	movwf	(??_Bitwise+1)^0,c
   342   007E3A  2A01               	incf	??_Bitwise^0,f,c
   343   007E3C  EF22  F03F         	goto	u24
   344   007E40                     u25:
   345   007E40  90D8               	bcf	status,0,c
   346   007E42  3602               	rlcf	(??_Bitwise+1)^0,f,c
   347   007E44                     u24:
   348   007E44  2E01               	decfsz	??_Bitwise^0,f,c
   349   007E46  EF20  F03F         	goto	u25
   350   007E4A  5002               	movf	(??_Bitwise+1)^0,w,c
   351   007E4C  6E89               	movwf	137,c	;volatile
   352   007E4E                     
   353                           ;main.c: 70:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   354   007E4E  0E09               	movlw	9
   355   007E50  6E02               	movwf	(??_Bitwise+1)^0,c
   356   007E52  0E1E               	movlw	30
   357   007E54  6E01               	movwf	??_Bitwise^0,c
   358   007E56  0EE4               	movlw	228
   359   007E58                     u477:
   360   007E58  2EE8               	decfsz	wreg,f,c
   361   007E5A  D7FE               	bra	u477
   362   007E5C  2E01               	decfsz	??_Bitwise^0,f,c
   363   007E5E  D7FC               	bra	u477
   364   007E60  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   365   007E62  D7FA               	bra	u477
   366   007E64  D000               	nop2	
   367                           
   368                           ;main.c: 71:     }
   369   007E66  4A03               	infsnz	Bitwise@A^0,f,c
   370   007E68  2A04               	incf	(Bitwise@A+1)^0,f,c
   371   007E6A  EF09  F03F         	goto	l736
   372   007E6E                     l746:
   373                           
   374                           ;main.c: 73:     for (int B = 0; B < 7; B++) {
   375   007E6E  0E00               	movlw	0
   376   007E70  6E06               	movwf	(Bitwise@B+1)^0,c
   377   007E72  0E00               	movlw	0
   378   007E74  6E05               	movwf	Bitwise@B^0,c
   379   007E76                     l748:
   380   007E76  BE06               	btfsc	(Bitwise@B+1)^0,7,c
   381   007E78  EF47  F03F         	goto	u31
   382   007E7C  5006               	movf	(Bitwise@B+1)^0,w,c
   383   007E7E  E109               	bnz	u30
   384   007E80  0E07               	movlw	7
   385   007E82  5C05               	subwf	Bitwise@B^0,w,c
   386   007E84  A0D8               	btfss	status,0,c
   387   007E86  EF47  F03F         	goto	u31
   388   007E8A  EF49  F03F         	goto	u30
   389   007E8E                     u31:
   390   007E8E  EF4B  F03F         	goto	l752
   391   007E92                     u30:
   392   007E92  EF69  F03F         	goto	l758
   393   007E96                     l752:
   394                           
   395                           ;main.c: 74:         LATB = (0x03 << B);
   396   007E96  C005  F001         	movff	Bitwise@B,??_Bitwise
   397   007E9A  0E03               	movlw	3
   398   007E9C  6E02               	movwf	(??_Bitwise+1)^0,c
   399   007E9E  2A01               	incf	??_Bitwise^0,f,c
   400   007EA0  EF54  F03F         	goto	u44
   401   007EA4                     u45:
   402   007EA4  90D8               	bcf	status,0,c
   403   007EA6  3602               	rlcf	(??_Bitwise+1)^0,f,c
   404   007EA8                     u44:
   405   007EA8  2E01               	decfsz	??_Bitwise^0,f,c
   406   007EAA  EF52  F03F         	goto	u45
   407   007EAE  5002               	movf	(??_Bitwise+1)^0,w,c
   408   007EB0  6E8A               	movwf	138,c	;volatile
   409   007EB2                     
   410                           ;main.c: 75:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   411   007EB2  0E09               	movlw	9
   412   007EB4  6E02               	movwf	(??_Bitwise+1)^0,c
   413   007EB6  0E1E               	movlw	30
   414   007EB8  6E01               	movwf	??_Bitwise^0,c
   415   007EBA  0EE4               	movlw	228
   416   007EBC                     u487:
   417   007EBC  2EE8               	decfsz	wreg,f,c
   418   007EBE  D7FE               	bra	u487
   419   007EC0  2E01               	decfsz	??_Bitwise^0,f,c
   420   007EC2  D7FC               	bra	u487
   421   007EC4  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   422   007EC6  D7FA               	bra	u487
   423   007EC8  D000               	nop2	
   424                           
   425                           ;main.c: 76:     }
   426   007ECA  4A05               	infsnz	Bitwise@B^0,f,c
   427   007ECC  2A06               	incf	(Bitwise@B+1)^0,f,c
   428   007ECE  EF3B  F03F         	goto	l748
   429   007ED2                     l758:
   430                           
   431                           ;main.c: 78:     for (int C = 0; C < 6; C++) {
   432   007ED2  0E00               	movlw	0
   433   007ED4  6E08               	movwf	(Bitwise@C+1)^0,c
   434   007ED6  0E00               	movlw	0
   435   007ED8  6E07               	movwf	Bitwise@C^0,c
   436   007EDA                     l760:
   437   007EDA  BE08               	btfsc	(Bitwise@C+1)^0,7,c
   438   007EDC  EF79  F03F         	goto	u51
   439   007EE0  5008               	movf	(Bitwise@C+1)^0,w,c
   440   007EE2  E109               	bnz	u50
   441   007EE4  0E06               	movlw	6
   442   007EE6  5C07               	subwf	Bitwise@C^0,w,c
   443   007EE8  A0D8               	btfss	status,0,c
   444   007EEA  EF79  F03F         	goto	u51
   445   007EEE  EF7B  F03F         	goto	u50
   446   007EF2                     u51:
   447   007EF2  EF7D  F03F         	goto	l764
   448   007EF6                     u50:
   449   007EF6  EF9B  F03F         	goto	l770
   450   007EFA                     l764:
   451                           
   452                           ;main.c: 79:         LATC = (0x03 << C);
   453   007EFA  C007  F001         	movff	Bitwise@C,??_Bitwise
   454   007EFE  0E03               	movlw	3
   455   007F00  6E02               	movwf	(??_Bitwise+1)^0,c
   456   007F02  2A01               	incf	??_Bitwise^0,f,c
   457   007F04  EF86  F03F         	goto	u64
   458   007F08                     u65:
   459   007F08  90D8               	bcf	status,0,c
   460   007F0A  3602               	rlcf	(??_Bitwise+1)^0,f,c
   461   007F0C                     u64:
   462   007F0C  2E01               	decfsz	??_Bitwise^0,f,c
   463   007F0E  EF84  F03F         	goto	u65
   464   007F12  5002               	movf	(??_Bitwise+1)^0,w,c
   465   007F14  6E8B               	movwf	139,c	;volatile
   466   007F16                     
   467                           ;main.c: 80:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   468   007F16  0E09               	movlw	9
   469   007F18  6E02               	movwf	(??_Bitwise+1)^0,c
   470   007F1A  0E1E               	movlw	30
   471   007F1C  6E01               	movwf	??_Bitwise^0,c
   472   007F1E  0EE4               	movlw	228
   473   007F20                     u497:
   474   007F20  2EE8               	decfsz	wreg,f,c
   475   007F22  D7FE               	bra	u497
   476   007F24  2E01               	decfsz	??_Bitwise^0,f,c
   477   007F26  D7FC               	bra	u497
   478   007F28  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   479   007F2A  D7FA               	bra	u497
   480   007F2C  D000               	nop2	
   481                           
   482                           ;main.c: 81:     }
   483   007F2E  4A07               	infsnz	Bitwise@C^0,f,c
   484   007F30  2A08               	incf	(Bitwise@C+1)^0,f,c
   485   007F32  EF6D  F03F         	goto	l760
   486   007F36                     l770:
   487                           
   488                           ;main.c: 83:     for (int D = 0; D < 7; D++) {
   489   007F36  0E00               	movlw	0
   490   007F38  6E0A               	movwf	(Bitwise@D+1)^0,c
   491   007F3A  0E00               	movlw	0
   492   007F3C  6E09               	movwf	Bitwise@D^0,c
   493   007F3E                     l772:
   494   007F3E  BE0A               	btfsc	(Bitwise@D+1)^0,7,c
   495   007F40  EFAB  F03F         	goto	u71
   496   007F44  500A               	movf	(Bitwise@D+1)^0,w,c
   497   007F46  E109               	bnz	u70
   498   007F48  0E07               	movlw	7
   499   007F4A  5C09               	subwf	Bitwise@D^0,w,c
   500   007F4C  A0D8               	btfss	status,0,c
   501   007F4E  EFAB  F03F         	goto	u71
   502   007F52  EFAD  F03F         	goto	u70
   503   007F56                     u71:
   504   007F56  EFAF  F03F         	goto	l776
   505   007F5A                     u70:
   506   007F5A  EFCD  F03F         	goto	l782
   507   007F5E                     l776:
   508                           
   509                           ;main.c: 84:         LATD = (0x03 << D);
   510   007F5E  C009  F001         	movff	Bitwise@D,??_Bitwise
   511   007F62  0E03               	movlw	3
   512   007F64  6E02               	movwf	(??_Bitwise+1)^0,c
   513   007F66  2A01               	incf	??_Bitwise^0,f,c
   514   007F68  EFB8  F03F         	goto	u84
   515   007F6C                     u85:
   516   007F6C  90D8               	bcf	status,0,c
   517   007F6E  3602               	rlcf	(??_Bitwise+1)^0,f,c
   518   007F70                     u84:
   519   007F70  2E01               	decfsz	??_Bitwise^0,f,c
   520   007F72  EFB6  F03F         	goto	u85
   521   007F76  5002               	movf	(??_Bitwise+1)^0,w,c
   522   007F78  6E8C               	movwf	140,c	;volatile
   523   007F7A                     
   524                           ;main.c: 85:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   525   007F7A  0E09               	movlw	9
   526   007F7C  6E02               	movwf	(??_Bitwise+1)^0,c
   527   007F7E  0E1E               	movlw	30
   528   007F80  6E01               	movwf	??_Bitwise^0,c
   529   007F82  0EE4               	movlw	228
   530   007F84                     u507:
   531   007F84  2EE8               	decfsz	wreg,f,c
   532   007F86  D7FE               	bra	u507
   533   007F88  2E01               	decfsz	??_Bitwise^0,f,c
   534   007F8A  D7FC               	bra	u507
   535   007F8C  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   536   007F8E  D7FA               	bra	u507
   537   007F90  D000               	nop2	
   538                           
   539                           ;main.c: 86:     }
   540   007F92  4A09               	infsnz	Bitwise@D^0,f,c
   541   007F94  2A0A               	incf	(Bitwise@D+1)^0,f,c
   542   007F96  EF9F  F03F         	goto	l772
   543   007F9A                     l782:
   544                           
   545                           ;main.c: 88:     for (int E = 0; E < 3; E++) {
   546   007F9A  0E00               	movlw	0
   547   007F9C  6E0C               	movwf	(Bitwise@E+1)^0,c
   548   007F9E  0E00               	movlw	0
   549   007FA0  6E0B               	movwf	Bitwise@E^0,c
   550   007FA2                     l784:
   551   007FA2  BE0C               	btfsc	(Bitwise@E+1)^0,7,c
   552   007FA4  EFDD  F03F         	goto	u91
   553   007FA8  500C               	movf	(Bitwise@E+1)^0,w,c
   554   007FAA  E109               	bnz	u90
   555   007FAC  0E03               	movlw	3
   556   007FAE  5C0B               	subwf	Bitwise@E^0,w,c
   557   007FB0  A0D8               	btfss	status,0,c
   558   007FB2  EFDD  F03F         	goto	u91
   559   007FB6  EFDF  F03F         	goto	u90
   560   007FBA                     u91:
   561   007FBA  EFE1  F03F         	goto	l788
   562   007FBE                     u90:
   563   007FBE  EFFF  F03F         	goto	l56
   564   007FC2                     l788:
   565                           
   566                           ;main.c: 89:         LATE = (0x01 << E);
   567   007FC2  C00B  F001         	movff	Bitwise@E,??_Bitwise
   568   007FC6  0E01               	movlw	1
   569   007FC8  6E02               	movwf	(??_Bitwise+1)^0,c
   570   007FCA  2A01               	incf	??_Bitwise^0,f,c
   571   007FCC  EFEA  F03F         	goto	u104
   572   007FD0                     u105:
   573   007FD0  90D8               	bcf	status,0,c
   574   007FD2  3602               	rlcf	(??_Bitwise+1)^0,f,c
   575   007FD4                     u104:
   576   007FD4  2E01               	decfsz	??_Bitwise^0,f,c
   577   007FD6  EFE8  F03F         	goto	u105
   578   007FDA  5002               	movf	(??_Bitwise+1)^0,w,c
   579   007FDC  6E8D               	movwf	141,c	;volatile
   580   007FDE                     
   581                           ;main.c: 90:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   582   007FDE  0E09               	movlw	9
   583   007FE0  6E02               	movwf	(??_Bitwise+1)^0,c
   584   007FE2  0E1E               	movlw	30
   585   007FE4  6E01               	movwf	??_Bitwise^0,c
   586   007FE6  0EE4               	movlw	228
   587   007FE8                     u517:
   588   007FE8  2EE8               	decfsz	wreg,f,c
   589   007FEA  D7FE               	bra	u517
   590   007FEC  2E01               	decfsz	??_Bitwise^0,f,c
   591   007FEE  D7FC               	bra	u517
   592   007FF0  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   593   007FF2  D7FA               	bra	u517
   594   007FF4  D000               	nop2	
   595                           
   596                           ;main.c: 91:     }
   597   007FF6  4A0B               	infsnz	Bitwise@E^0,f,c
   598   007FF8  2A0C               	incf	(Bitwise@E+1)^0,f,c
   599   007FFA  EFD1  F03F         	goto	l784
   600   007FFE                     l56:
   601   007FFE  0012               	return		;funcret
   602   008000                     __end_of_Bitwise:
   603                           	callstack 0
   604   000000                     
   605                           	psect	rparam
   606   000000                     
   607                           	psect	idloc
   608                           
   609                           ;Config register IDLOC0 @ 0x200000
   610                           ;	unspecified, using default values
   611   200000                     	org	2097152
   612   200000  FF                 	db	255
   613                           
   614                           ;Config register IDLOC1 @ 0x200001
   615                           ;	unspecified, using default values
   616   200001                     	org	2097153
   617   200001  FF                 	db	255
   618                           
   619                           ;Config register IDLOC2 @ 0x200002
   620                           ;	unspecified, using default values
   621   200002                     	org	2097154
   622   200002  FF                 	db	255
   623                           
   624                           ;Config register IDLOC3 @ 0x200003
   625                           ;	unspecified, using default values
   626   200003                     	org	2097155
   627   200003  FF                 	db	255
   628                           
   629                           ;Config register IDLOC4 @ 0x200004
   630                           ;	unspecified, using default values
   631   200004                     	org	2097156
   632   200004  FF                 	db	255
   633                           
   634                           ;Config register IDLOC5 @ 0x200005
   635                           ;	unspecified, using default values
   636   200005                     	org	2097157
   637   200005  FF                 	db	255
   638                           
   639                           ;Config register IDLOC6 @ 0x200006
   640                           ;	unspecified, using default values
   641   200006                     	org	2097158
   642   200006  FF                 	db	255
   643                           
   644                           ;Config register IDLOC7 @ 0x200007
   645                           ;	unspecified, using default values
   646   200007                     	org	2097159
   647   200007  FF                 	db	255
   648                           
   649                           	psect	config
   650                           
   651                           ;Config register CONFIG1L @ 0x300000
   652                           ;	PLL Prescaler Selection bits
   653                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   654                           ;	System Clock Postscaler Selection bits
   655                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   656                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   657                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   658   300000                     	org	3145728
   659   300000  00                 	db	0
   660                           
   661                           ;Config register CONFIG1H @ 0x300001
   662                           ;	Oscillator Selection bits
   663                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
   664                           ;	Fail-Safe Clock Monitor Enable bit
   665                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   666                           ;	Internal/External Oscillator Switchover bit
   667                           ;	IESO = OFF, Oscillator Switchover mode disabled
   668   300001                     	org	3145729
   669   300001  08                 	db	8
   670                           
   671                           ;Config register CONFIG2L @ 0x300002
   672                           ;	Power-up Timer Enable bit
   673                           ;	PWRT = OFF, PWRT disabled
   674                           ;	Brown-out Reset Enable bits
   675                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   676                           ;	Brown-out Reset Voltage bits
   677                           ;	BORV = 3, Minimum setting 2.05V
   678                           ;	USB Voltage Regulator Enable bit
   679                           ;	VREGEN = OFF, USB voltage regulator disabled
   680   300002                     	org	3145730
   681   300002  19                 	db	25
   682                           
   683                           ;Config register CONFIG2H @ 0x300003
   684                           ;	Watchdog Timer Enable bit
   685                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   686                           ;	Watchdog Timer Postscale Select bits
   687                           ;	WDTPS = 32768, 1:32768
   688   300003                     	org	3145731
   689   300003  1E                 	db	30
   690                           
   691                           ; Padding undefined space
   692   300004                     	org	3145732
   693   300004  FF                 	db	255
   694                           
   695                           ;Config register CONFIG3H @ 0x300005
   696                           ;	CCP2 MUX bit
   697                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   698                           ;	PORTB A/D Enable bit
   699                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   700                           ;	Low-Power Timer 1 Oscillator Enable bit
   701                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   702                           ;	MCLR Pin Enable bit
   703                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   704   300005                     	org	3145733
   705   300005  83                 	db	131
   706                           
   707                           ;Config register CONFIG4L @ 0x300006
   708                           ;	Stack Full/Underflow Reset Enable bit
   709                           ;	STVREN = ON, Stack full/underflow will cause Reset
   710                           ;	Single-Supply ICSP Enable bit
   711                           ;	LVP = OFF, Single-Supply ICSP disabled
   712                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   713                           ;	ICPRT = OFF, ICPORT disabled
   714                           ;	Extended Instruction Set Enable bit
   715                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   716                           ;	Background Debugger Enable bit
   717                           ;	DEBUG = 0x1, unprogrammed default
   718   300006                     	org	3145734
   719   300006  81                 	db	129
   720                           
   721                           ; Padding undefined space
   722   300007                     	org	3145735
   723   300007  FF                 	db	255
   724                           
   725                           ;Config register CONFIG5L @ 0x300008
   726                           ;	Code Protection bit
   727                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   728                           ;	Code Protection bit
   729                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   730                           ;	Code Protection bit
   731                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   732                           ;	Code Protection bit
   733                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   734   300008                     	org	3145736
   735   300008  0F                 	db	15
   736                           
   737                           ;Config register CONFIG5H @ 0x300009
   738                           ;	Boot Block Code Protection bit
   739                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   740                           ;	Data EEPROM Code Protection bit
   741                           ;	CPD = OFF, Data EEPROM is not code-protected
   742   300009                     	org	3145737
   743   300009  C0                 	db	192
   744                           
   745                           ;Config register CONFIG6L @ 0x30000A
   746                           ;	Write Protection bit
   747                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   748                           ;	Write Protection bit
   749                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   750                           ;	Write Protection bit
   751                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   752                           ;	Write Protection bit
   753                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   754   30000A                     	org	3145738
   755   30000A  0F                 	db	15
   756                           
   757                           ;Config register CONFIG6H @ 0x30000B
   758                           ;	Configuration Register Write Protection bit
   759                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   760                           ;	Boot Block Write Protection bit
   761                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   762                           ;	Data EEPROM Write Protection bit
   763                           ;	WRTD = OFF, Data EEPROM is not write-protected
   764   30000B                     	org	3145739
   765   30000B  E0                 	db	224
   766                           
   767                           ;Config register CONFIG7L @ 0x30000C
   768                           ;	Table Read Protection bit
   769                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   770                           ;	Table Read Protection bit
   771                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   772                           ;	Table Read Protection bit
   773                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   774                           ;	Table Read Protection bit
   775                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   776   30000C                     	org	3145740
   777   30000C  0F                 	db	15
   778                           
   779                           ;Config register CONFIG7H @ 0x30000D
   780                           ;	Boot Block Table Read Protection bit
   781                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   782   30000D                     	org	3145741
   783   30000D  40                 	db	64
   784                           tosu	equ	0xFFF
   785                           tosh	equ	0xFFE
   786                           tosl	equ	0xFFD
   787                           stkptr	equ	0xFFC
   788                           pclatu	equ	0xFFB
   789                           pclath	equ	0xFFA
   790                           pcl	equ	0xFF9
   791                           tblptru	equ	0xFF8
   792                           tblptrh	equ	0xFF7
   793                           tblptrl	equ	0xFF6
   794                           tablat	equ	0xFF5
   795                           prodh	equ	0xFF4
   796                           prodl	equ	0xFF3
   797                           indf0	equ	0xFEF
   798                           postinc0	equ	0xFEE
   799                           postdec0	equ	0xFED
   800                           preinc0	equ	0xFEC
   801                           plusw0	equ	0xFEB
   802                           fsr0h	equ	0xFEA
   803                           fsr0l	equ	0xFE9
   804                           wreg	equ	0xFE8
   805                           indf1	equ	0xFE7
   806                           postinc1	equ	0xFE6
   807                           postdec1	equ	0xFE5
   808                           preinc1	equ	0xFE4
   809                           plusw1	equ	0xFE3
   810                           fsr1h	equ	0xFE2
   811                           fsr1l	equ	0xFE1
   812                           bsr	equ	0xFE0
   813                           indf2	equ	0xFDF
   814                           postinc2	equ	0xFDE
   815                           postdec2	equ	0xFDD
   816                           preinc2	equ	0xFDC
   817                           plusw2	equ	0xFDB
   818                           fsr2h	equ	0xFDA
   819                           fsr2l	equ	0xFD9
   820                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Bitwise

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     225
                            _Bitwise
                      _Configuration
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Bitwise                                             12    12      0     225
                                              0 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bitwise
   _Configuration

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C       E       1       14.7%
BITBIGSFRh          2C      0       0      21        0.0%
BITBIGSFRllh        2A      0       0      23        0.0%
BITBIGSFRllll       29      0       0      25        0.0%
BITBIGSFRlh         11      0       0      22        0.0%
BITBIGSFRlllh        4      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E       3        0.0%
DATA                 0      0       E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Jul 25 21:13:42 2023

                     l43 7E08                       l56 7FFE                       u10 7E2E  
                     u11 7E2A                       u30 7E92                       u31 7E8E  
                     u24 7E44                       u25 7E40                       u50 7EF6  
                     u51 7EF2                       u44 7EA8                       u45 7EA4  
                     u70 7F5A                       u71 7F56                       u64 7F0C  
                     u65 7F08                       u90 7FBE                       u91 7FBA  
                     u84 7F70                       u85 7F6C                      l740 7E32  
                    l732 7DD8                      l742 7E4E                      l734 7E0A  
                    l760 7EDA                      l752 7E96                      l736 7E12  
                    l770 7F36                      l754 7EB2                      l746 7E6E  
                    l772 7F3E                      l764 7EFA                      l748 7E76  
                    l790 7FDE                      l782 7F9A                      l766 7F16  
                    l758 7ED2                      l784 7FA2                      l776 7F5E  
                    l778 7F7A                      l794 7DAA                      l788 7FC2  
                    l796 7DAE                      u104 7FD4                      u105 7FD0  
                    u507 7F84                      u517 7FE8                      u477 7E58  
                    u487 7EBC                      u497 7F20                      wreg 0FE8  
                   _LATA 0F89                     _LATB 0F8A                     _LATC 0F8B  
                   _LATD 0F8C                     _LATE 0F8D                     _Time 000D  
                   _main 7DAA                     start 0000          __end_of_Bitwise 8000  
           ___param_bank 0000                    ?_main 0001                    _TRISA 0F92  
                  _TRISB 0F93                    _TRISC 0F94                    _TRISD 0F95  
                  _TRISE 0F96                    tablat 0FF5                    status 0FD8  
        __initialization 7DBA             __end_of_main 7DBA                   ??_main 000D  
          __activetblptr 0000                   _ADCON1 0FC1                   _OSCCON 0FD3  
              ??_Bitwise 0001                   isa$std 0001             __pdataCOMRAM 000D  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 7DD2            ___rparam_used 0001  
         __pcstackCOMRAM 0001    __end_of_Configuration 7E0A                  _Bitwise 7E0A  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7DBA  
                __ramtop 0800                  __ptext0 7DAA                  __ptext1 7DD8  
                __ptext2 7E0A     end_of_initialization 7DD2            __pidataCOMRAM 7DA8  
    start_initialization 7DBA                 ?_Bitwise 0001                 Bitwise@A 0003  
               Bitwise@B 0005                 Bitwise@C 0007                 Bitwise@D 0009  
               Bitwise@E 000B            _Configuration 7DD8                 __Hrparam 0000  
               __Lrparam 0000           ?_Configuration 0001                 isa$xinst 0000  
        ??_Configuration 0001  
