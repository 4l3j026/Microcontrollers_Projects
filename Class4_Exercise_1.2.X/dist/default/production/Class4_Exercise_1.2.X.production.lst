

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Aug 01 02:13:33 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   007D40                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _Time
    58   007D40  0190               	dw	400
    59   000000                     _LATA	set	3977
    60   000000                     _TRISA	set	3986
    61   000000                     _ADCON1	set	4033
    62   000000                     _OSCCON	set	4051
    63   000000                     _TRISE	set	3990
    64   000000                     _TRISD	set	3989
    65   000000                     _TRISC	set	3988
    66   000000                     _TRISB	set	3987
    67   000000                     _LATE	set	3981
    68   000000                     _LATD	set	3980
    69   000000                     _LATC	set	3979
    70   000000                     _LATB	set	3978
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   007D52                     __pcinit:
    76                           	callstack 0
    77   007D52                     start_initialization:
    78                           	callstack 0
    79   007D52                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (2 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84   007D52  0E40               	movlw	low __pidataCOMRAM
    85   007D54  6EF6               	movwf	tblptrl,c
    86   007D56  0E7D               	movlw	high __pidataCOMRAM
    87   007D58  6EF7               	movwf	tblptrh,c
    88   007D5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89   007D5C  6EF8               	movwf	tblptru,c
    90   007D5E  0009               	tblrd		*+	;fetch initializer
    91   007D60  CFF5 F00D          	movff	tablat,__pdataCOMRAM
    92   007D64  0009               	tblrd		*+	;fetch initializer
    93   007D66  CFF5 F00E          	movff	tablat,__pdataCOMRAM+1
    94   007D6A                     end_of_initialization:
    95                           	callstack 0
    96   007D6A                     __end_of__initialization:
    97                           	callstack 0
    98   007D6A  0100               	movlb	0
    99   007D6C  EFA1  F03E         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	dataCOMRAM
   102   00000D                     __pdataCOMRAM:
   103                           	callstack 0
   104   00000D                     _Time:
   105                           	callstack 0
   106   00000D                     	ds	2
   107                           
   108                           	psect	cstackCOMRAM
   109   000001                     __pcstackCOMRAM:
   110                           	callstack 0
   111   000001                     ??_Hard_Bitwise:
   112   000001                     
   113                           ; 1 bytes @ 0x0
   114   000001                     	ds	2
   115   000003                     Hard_Bitwise@D:
   116                           	callstack 0
   117                           
   118                           ; 2 bytes @ 0x2
   119   000003                     	ds	2
   120   000005                     Hard_Bitwise@E:
   121                           	callstack 0
   122                           
   123                           ; 2 bytes @ 0x4
   124   000005                     	ds	2
   125   000007                     Hard_Bitwise@A:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x6
   129   000007                     	ds	2
   130   000009                     Hard_Bitwise@B:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x8
   134   000009                     	ds	2
   135   00000B                     Hard_Bitwise@C:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0xA
   139   00000B                     	ds	2
   140   00000D                     
   141                           ; 1 bytes @ 0xC
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 28 in file "main.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;		None
   152 ;; Return value:  Size  Location     Type
   153 ;;                  1    wreg      void 
   154 ;; Registers used:
   155 ;;		wreg, status,2, status,0, cstack
   156 ;; Tracked objects:
   157 ;;		On entry : 0/0
   158 ;;		On exit  : 0/0
   159 ;;		Unchanged: 0/0
   160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   161 ;;      Params:         0       0       0       0       0       0       0       0       0
   162 ;;      Locals:         0       0       0       0       0       0       0       0       0
   163 ;;      Temps:          0       0       0       0       0       0       0       0       0
   164 ;;      Totals:         0       0       0       0       0       0       0       0       0
   165 ;;Total ram usage:        0 bytes
   166 ;; Hardware stack levels required when called: 1
   167 ;; This function calls:
   168 ;;		_Configuration
   169 ;;		_Hard_Bitwise
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176   007D42                     __ptext0:
   177                           	callstack 0
   178   007D42                     _main:
   179                           	callstack 30
   180   007D42                     
   181                           ;main.c: 31:     Configuration();
   182   007D42  ECB8  F03E         	call	_Configuration	;wreg free
   183   007D46                     l828:
   184                           
   185                           ;main.c: 36:         Hard_Bitwise();
   186   007D46  ECD1  F03E         	call	_Hard_Bitwise	;wreg free
   187   007D4A  EFA3  F03E         	goto	l828
   188   007D4E  EF00  F000         	goto	start
   189   007D52                     __end_of_main:
   190                           	callstack 0
   191                           
   192 ;; *************** function _Hard_Bitwise *****************
   193 ;; Defined at:
   194 ;;		line 67 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;  E               2    4[COMRAM] int 
   199 ;;  D               2    2[COMRAM] int 
   200 ;;  C               2   10[COMRAM] int 
   201 ;;  B               2    8[COMRAM] int 
   202 ;;  A               2    6[COMRAM] int 
   203 ;; Return value:  Size  Location     Type
   204 ;;                  1    wreg      void 
   205 ;; Registers used:
   206 ;;		wreg, status,2, status,0
   207 ;; Tracked objects:
   208 ;;		On entry : 0/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   212 ;;      Params:         0       0       0       0       0       0       0       0       0
   213 ;;      Locals:        10       0       0       0       0       0       0       0       0
   214 ;;      Temps:          2       0       0       0       0       0       0       0       0
   215 ;;      Totals:        12       0       0       0       0       0       0       0       0
   216 ;;Total ram usage:       12 bytes
   217 ;; Hardware stack levels used: 1
   218 ;; This function calls:
   219 ;;		Nothing
   220 ;; This function is called by:
   221 ;;		_main
   222 ;; This function uses a non-reentrant model
   223 ;;
   224                           
   225                           	psect	text1
   226   007DA2                     __ptext1:
   227                           	callstack 0
   228   007DA2                     _Hard_Bitwise:
   229                           	callstack 30
   230   007DA2                     
   231                           ;main.c: 70:         for (int A = 0; A < 7; A++) {
   232   007DA2  0E00               	movlw	0
   233   007DA4  6E08               	movwf	(Hard_Bitwise@A+1)^0,c
   234   007DA6  0E00               	movlw	0
   235   007DA8  6E07               	movwf	Hard_Bitwise@A^0,c
   236   007DAA                     l744:
   237   007DAA  BE08               	btfsc	(Hard_Bitwise@A+1)^0,7,c
   238   007DAC  EFE1  F03E         	goto	u11
   239   007DB0  5008               	movf	(Hard_Bitwise@A+1)^0,w,c
   240   007DB2  E109               	bnz	u10
   241   007DB4  0E07               	movlw	7
   242   007DB6  5C07               	subwf	Hard_Bitwise@A^0,w,c
   243   007DB8  A0D8               	btfss	status,0,c
   244   007DBA  EFE1  F03E         	goto	u11
   245   007DBE  EFE3  F03E         	goto	u10
   246   007DC2                     u11:
   247   007DC2  EFE5  F03E         	goto	l748
   248   007DC6                     u10:
   249   007DC6  EF0F  F03F         	goto	l760
   250   007DCA                     l748:
   251                           
   252                           ;main.c: 72:             if (A == 6) {
   253   007DCA  0E06               	movlw	6
   254   007DCC  1807               	xorwf	Hard_Bitwise@A^0,w,c
   255   007DCE  1008               	iorwf	(Hard_Bitwise@A+1)^0,w,c
   256   007DD0  A4D8               	btfss	status,2,c
   257   007DD2  EFED  F03E         	goto	u21
   258   007DD6  EFEF  F03E         	goto	u20
   259   007DDA                     u21:
   260   007DDA  EFF1  F03E         	goto	l752
   261   007DDE                     u20:
   262   007DDE                     
   263                           ;main.c: 73:                 LATB = 0x01;
   264   007DDE  0E01               	movlw	1
   265   007DE0  6E8A               	movwf	138,c	;volatile
   266   007DE2                     l752:
   267                           
   268                           ;main.c: 76:             LATA = (0x03 << A);
   269   007DE2  C007  F001         	movff	Hard_Bitwise@A,??_Hard_Bitwise
   270   007DE6  0E03               	movlw	3
   271   007DE8  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   272   007DEA  2A01               	incf	??_Hard_Bitwise^0,f,c
   273   007DEC  EFFA  F03E         	goto	u34
   274   007DF0                     u35:
   275   007DF0  90D8               	bcf	status,0,c
   276   007DF2  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   277   007DF4                     u34:
   278   007DF4  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   279   007DF6  EFF8  F03E         	goto	u35
   280   007DFA  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   281   007DFC  6E89               	movwf	137,c	;volatile
   282   007DFE                     
   283                           ;main.c: 77:             _delay((unsigned long)((Time)*(8000000/4000.0)));
   284   007DFE  0E05               	movlw	5
   285   007E00  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   286   007E02  0E0F               	movlw	15
   287   007E04  6E01               	movwf	??_Hard_Bitwise^0,c
   288   007E06  0EF1               	movlw	241
   289   007E08                     u517:
   290   007E08  2EE8               	decfsz	wreg,f,c
   291   007E0A  D7FE               	bra	u517
   292   007E0C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   293   007E0E  D7FC               	bra	u517
   294   007E10  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   295   007E12  D7FA               	bra	u517
   296   007E14  F000               	nop	
   297   007E16                     
   298                           ;main.c: 79:         }
   299   007E16  4A07               	infsnz	Hard_Bitwise@A^0,f,c
   300   007E18  2A08               	incf	(Hard_Bitwise@A+1)^0,f,c
   301   007E1A  EFD5  F03E         	goto	l744
   302   007E1E                     l760:
   303                           
   304                           ;main.c: 82:         for (int B = 0; B < 8; B++) {
   305   007E1E  0E00               	movlw	0
   306   007E20  6E0A               	movwf	(Hard_Bitwise@B+1)^0,c
   307   007E22  0E00               	movlw	0
   308   007E24  6E09               	movwf	Hard_Bitwise@B^0,c
   309   007E26                     l762:
   310   007E26  BE0A               	btfsc	(Hard_Bitwise@B+1)^0,7,c
   311   007E28  EF1F  F03F         	goto	u41
   312   007E2C  500A               	movf	(Hard_Bitwise@B+1)^0,w,c
   313   007E2E  E109               	bnz	u40
   314   007E30  0E08               	movlw	8
   315   007E32  5C09               	subwf	Hard_Bitwise@B^0,w,c
   316   007E34  A0D8               	btfss	status,0,c
   317   007E36  EF1F  F03F         	goto	u41
   318   007E3A  EF21  F03F         	goto	u40
   319   007E3E                     u41:
   320   007E3E  EF23  F03F         	goto	l766
   321   007E42                     u40:
   322   007E42  EF4F  F03F         	goto	l780
   323   007E46                     l766:
   324                           
   325                           ;main.c: 84:             LATA = 0x00;
   326   007E46  0E00               	movlw	0
   327   007E48  6E89               	movwf	137,c	;volatile
   328   007E4A                     
   329                           ;main.c: 86:             if (B == 7) {
   330   007E4A  0E07               	movlw	7
   331   007E4C  1809               	xorwf	Hard_Bitwise@B^0,w,c
   332   007E4E  100A               	iorwf	(Hard_Bitwise@B+1)^0,w,c
   333   007E50  A4D8               	btfss	status,2,c
   334   007E52  EF2D  F03F         	goto	u51
   335   007E56  EF2F  F03F         	goto	u50
   336   007E5A                     u51:
   337   007E5A  EF31  F03F         	goto	l772
   338   007E5E                     u50:
   339   007E5E                     
   340                           ;main.c: 87:                 LATC = 0x01;
   341   007E5E  0E01               	movlw	1
   342   007E60  6E8B               	movwf	139,c	;volatile
   343   007E62                     l772:
   344                           
   345                           ;main.c: 90:             LATB = (0x03 << B);
   346   007E62  C009  F001         	movff	Hard_Bitwise@B,??_Hard_Bitwise
   347   007E66  0E03               	movlw	3
   348   007E68  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   349   007E6A  2A01               	incf	??_Hard_Bitwise^0,f,c
   350   007E6C  EF3A  F03F         	goto	u64
   351   007E70                     u65:
   352   007E70  90D8               	bcf	status,0,c
   353   007E72  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   354   007E74                     u64:
   355   007E74  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   356   007E76  EF38  F03F         	goto	u65
   357   007E7A  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   358   007E7C  6E8A               	movwf	138,c	;volatile
   359   007E7E                     
   360                           ;main.c: 91:             _delay((unsigned long)((Time)*(8000000/4000.0)));
   361   007E7E  0E05               	movlw	5
   362   007E80  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   363   007E82  0E0F               	movlw	15
   364   007E84  6E01               	movwf	??_Hard_Bitwise^0,c
   365   007E86  0EF1               	movlw	241
   366   007E88                     u527:
   367   007E88  2EE8               	decfsz	wreg,f,c
   368   007E8A  D7FE               	bra	u527
   369   007E8C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   370   007E8E  D7FC               	bra	u527
   371   007E90  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   372   007E92  D7FA               	bra	u527
   373   007E94  F000               	nop	
   374   007E96                     
   375                           ;main.c: 93:         }
   376   007E96  4A09               	infsnz	Hard_Bitwise@B^0,f,c
   377   007E98  2A0A               	incf	(Hard_Bitwise@B+1)^0,f,c
   378   007E9A  EF13  F03F         	goto	l762
   379   007E9E                     l780:
   380                           
   381                           ;main.c: 96:     for (int C = 0; C < 7; C++) {
   382   007E9E  0E00               	movlw	0
   383   007EA0  6E0C               	movwf	(Hard_Bitwise@C+1)^0,c
   384   007EA2  0E00               	movlw	0
   385   007EA4  6E0B               	movwf	Hard_Bitwise@C^0,c
   386   007EA6                     l782:
   387   007EA6  BE0C               	btfsc	(Hard_Bitwise@C+1)^0,7,c
   388   007EA8  EF5F  F03F         	goto	u71
   389   007EAC  500C               	movf	(Hard_Bitwise@C+1)^0,w,c
   390   007EAE  E109               	bnz	u70
   391   007EB0  0E07               	movlw	7
   392   007EB2  5C0B               	subwf	Hard_Bitwise@C^0,w,c
   393   007EB4  A0D8               	btfss	status,0,c
   394   007EB6  EF5F  F03F         	goto	u71
   395   007EBA  EF61  F03F         	goto	u70
   396   007EBE                     u71:
   397   007EBE  EF63  F03F         	goto	l786
   398   007EC2                     u70:
   399   007EC2  EF9B  F03F         	goto	l802
   400   007EC6                     l786:
   401                           
   402                           ;main.c: 98:         if (C == 2) {
   403   007EC6  0E02               	movlw	2
   404   007EC8  180B               	xorwf	Hard_Bitwise@C^0,w,c
   405   007ECA  100C               	iorwf	(Hard_Bitwise@C+1)^0,w,c
   406   007ECC  A4D8               	btfss	status,2,c
   407   007ECE  EF6B  F03F         	goto	u81
   408   007ED2  EF6D  F03F         	goto	u80
   409   007ED6                     u81:
   410   007ED6  EF7B  F03F         	goto	l792
   411   007EDA                     u80:
   412   007EDA                     
   413                           ;main.c: 99:             LATC = 0x14;
   414   007EDA  0E14               	movlw	20
   415   007EDC  6E8B               	movwf	139,c	;volatile
   416   007EDE                     
   417                           ;main.c: 100:             _delay((unsigned long)((Time)*(8000000/4000.0)));
   418   007EDE  0E05               	movlw	5
   419   007EE0  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   420   007EE2  0E0F               	movlw	15
   421   007EE4  6E01               	movwf	??_Hard_Bitwise^0,c
   422   007EE6  0EF1               	movlw	241
   423   007EE8                     u537:
   424   007EE8  2EE8               	decfsz	wreg,f,c
   425   007EEA  D7FE               	bra	u537
   426   007EEC  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   427   007EEE  D7FC               	bra	u537
   428   007EF0  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   429   007EF2  D7FA               	bra	u537
   430   007EF4  F000               	nop	
   431   007EF6                     l792:
   432                           
   433                           ;main.c: 103:         LATB = 0x00;
   434   007EF6  0E00               	movlw	0
   435   007EF8  6E8A               	movwf	138,c	;volatile
   436   007EFA                     
   437                           ;main.c: 105:         LATC = (0x03 << C);
   438   007EFA  C00B  F001         	movff	Hard_Bitwise@C,??_Hard_Bitwise
   439   007EFE  0E03               	movlw	3
   440   007F00  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   441   007F02  2A01               	incf	??_Hard_Bitwise^0,f,c
   442   007F04  EF86  F03F         	goto	u94
   443   007F08                     u95:
   444   007F08  90D8               	bcf	status,0,c
   445   007F0A  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   446   007F0C                     u94:
   447   007F0C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   448   007F0E  EF84  F03F         	goto	u95
   449   007F12  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   450   007F14  6E8B               	movwf	139,c	;volatile
   451   007F16                     
   452                           ;main.c: 106:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   453   007F16  0E05               	movlw	5
   454   007F18  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   455   007F1A  0E0F               	movlw	15
   456   007F1C  6E01               	movwf	??_Hard_Bitwise^0,c
   457   007F1E  0EF1               	movlw	241
   458   007F20                     u547:
   459   007F20  2EE8               	decfsz	wreg,f,c
   460   007F22  D7FE               	bra	u547
   461   007F24  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   462   007F26  D7FC               	bra	u547
   463   007F28  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   464   007F2A  D7FA               	bra	u547
   465   007F2C  F000               	nop	
   466   007F2E                     
   467                           ;main.c: 108:     }
   468   007F2E  4A0B               	infsnz	Hard_Bitwise@C^0,f,c
   469   007F30  2A0C               	incf	(Hard_Bitwise@C+1)^0,f,c
   470   007F32  EF53  F03F         	goto	l782
   471   007F36                     l802:
   472                           
   473                           ;main.c: 111:     for (int D = 0; D < 7; D++) {
   474   007F36  0E00               	movlw	0
   475   007F38  6E04               	movwf	(Hard_Bitwise@D+1)^0,c
   476   007F3A  0E00               	movlw	0
   477   007F3C  6E03               	movwf	Hard_Bitwise@D^0,c
   478   007F3E                     l804:
   479   007F3E  BE04               	btfsc	(Hard_Bitwise@D+1)^0,7,c
   480   007F40  EFAB  F03F         	goto	u101
   481   007F44  5004               	movf	(Hard_Bitwise@D+1)^0,w,c
   482   007F46  E109               	bnz	u100
   483   007F48  0E07               	movlw	7
   484   007F4A  5C03               	subwf	Hard_Bitwise@D^0,w,c
   485   007F4C  A0D8               	btfss	status,0,c
   486   007F4E  EFAB  F03F         	goto	u101
   487   007F52  EFAD  F03F         	goto	u100
   488   007F56                     u101:
   489   007F56  EFAF  F03F         	goto	l808
   490   007F5A                     u100:
   491   007F5A  EFCD  F03F         	goto	l814
   492   007F5E                     l808:
   493                           
   494                           ;main.c: 112:         LATD = (0x03 << D);
   495   007F5E  C003  F001         	movff	Hard_Bitwise@D,??_Hard_Bitwise
   496   007F62  0E03               	movlw	3
   497   007F64  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   498   007F66  2A01               	incf	??_Hard_Bitwise^0,f,c
   499   007F68  EFB8  F03F         	goto	u114
   500   007F6C                     u115:
   501   007F6C  90D8               	bcf	status,0,c
   502   007F6E  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   503   007F70                     u114:
   504   007F70  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   505   007F72  EFB6  F03F         	goto	u115
   506   007F76  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   507   007F78  6E8C               	movwf	140,c	;volatile
   508   007F7A                     
   509                           ;main.c: 113:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   510   007F7A  0E05               	movlw	5
   511   007F7C  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   512   007F7E  0E0F               	movlw	15
   513   007F80  6E01               	movwf	??_Hard_Bitwise^0,c
   514   007F82  0EF1               	movlw	241
   515   007F84                     u557:
   516   007F84  2EE8               	decfsz	wreg,f,c
   517   007F86  D7FE               	bra	u557
   518   007F88  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   519   007F8A  D7FC               	bra	u557
   520   007F8C  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   521   007F8E  D7FA               	bra	u557
   522   007F90  F000               	nop	
   523                           
   524                           ;main.c: 114:     }
   525   007F92  4A03               	infsnz	Hard_Bitwise@D^0,f,c
   526   007F94  2A04               	incf	(Hard_Bitwise@D+1)^0,f,c
   527   007F96  EF9F  F03F         	goto	l804
   528   007F9A                     l814:
   529                           
   530                           ;main.c: 117:     for (int E = 0; E < 3; E++) {
   531   007F9A  0E00               	movlw	0
   532   007F9C  6E06               	movwf	(Hard_Bitwise@E+1)^0,c
   533   007F9E  0E00               	movlw	0
   534   007FA0  6E05               	movwf	Hard_Bitwise@E^0,c
   535   007FA2                     l816:
   536   007FA2  BE06               	btfsc	(Hard_Bitwise@E+1)^0,7,c
   537   007FA4  EFDD  F03F         	goto	u121
   538   007FA8  5006               	movf	(Hard_Bitwise@E+1)^0,w,c
   539   007FAA  E109               	bnz	u120
   540   007FAC  0E03               	movlw	3
   541   007FAE  5C05               	subwf	Hard_Bitwise@E^0,w,c
   542   007FB0  A0D8               	btfss	status,0,c
   543   007FB2  EFDD  F03F         	goto	u121
   544   007FB6  EFDF  F03F         	goto	u120
   545   007FBA                     u121:
   546   007FBA  EFE1  F03F         	goto	l820
   547   007FBE                     u120:
   548   007FBE  EFFF  F03F         	goto	l59
   549   007FC2                     l820:
   550                           
   551                           ;main.c: 118:         LATE = (0x01 << E);
   552   007FC2  C005  F001         	movff	Hard_Bitwise@E,??_Hard_Bitwise
   553   007FC6  0E01               	movlw	1
   554   007FC8  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   555   007FCA  2A01               	incf	??_Hard_Bitwise^0,f,c
   556   007FCC  EFEA  F03F         	goto	u134
   557   007FD0                     u135:
   558   007FD0  90D8               	bcf	status,0,c
   559   007FD2  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   560   007FD4                     u134:
   561   007FD4  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   562   007FD6  EFE8  F03F         	goto	u135
   563   007FDA  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   564   007FDC  6E8D               	movwf	141,c	;volatile
   565   007FDE                     
   566                           ;main.c: 119:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   567   007FDE  0E05               	movlw	5
   568   007FE0  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   569   007FE2  0E0F               	movlw	15
   570   007FE4  6E01               	movwf	??_Hard_Bitwise^0,c
   571   007FE6  0EF1               	movlw	241
   572   007FE8                     u567:
   573   007FE8  2EE8               	decfsz	wreg,f,c
   574   007FEA  D7FE               	bra	u567
   575   007FEC  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   576   007FEE  D7FC               	bra	u567
   577   007FF0  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   578   007FF2  D7FA               	bra	u567
   579   007FF4  F000               	nop	
   580                           
   581                           ;main.c: 120:     }
   582   007FF6  4A05               	infsnz	Hard_Bitwise@E^0,f,c
   583   007FF8  2A06               	incf	(Hard_Bitwise@E+1)^0,f,c
   584   007FFA  EFD1  F03F         	goto	l816
   585   007FFE                     l59:
   586   007FFE  0012               	return		;funcret
   587   008000                     __end_of_Hard_Bitwise:
   588                           	callstack 0
   589                           
   590 ;; *************** function _Configuration *****************
   591 ;; Defined at:
   592 ;;		line 44 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, status,2
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   606 ;;      Params:         0       0       0       0       0       0       0       0       0
   607 ;;      Locals:         0       0       0       0       0       0       0       0       0
   608 ;;      Temps:          0       0       0       0       0       0       0       0       0
   609 ;;      Totals:         0       0       0       0       0       0       0       0       0
   610 ;;Total ram usage:        0 bytes
   611 ;; Hardware stack levels used: 1
   612 ;; This function calls:
   613 ;;		Nothing
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text2
   620   007D70                     __ptext2:
   621                           	callstack 0
   622   007D70                     _Configuration:
   623                           	callstack 30
   624   007D70                     
   625                           ;main.c: 46:     OSCCON = 0x72;
   626   007D70  0E72               	movlw	114
   627   007D72  6ED3               	movwf	211,c	;volatile
   628                           
   629                           ;main.c: 47:     ADCON1 = 0x0F;
   630   007D74  0E0F               	movlw	15
   631   007D76  6EC1               	movwf	193,c	;volatile
   632                           
   633                           ;main.c: 50:     TRISA = 0x00;
   634   007D78  0E00               	movlw	0
   635   007D7A  6E92               	movwf	146,c	;volatile
   636                           
   637                           ;main.c: 51:     TRISB = 0x00;
   638   007D7C  0E00               	movlw	0
   639   007D7E  6E93               	movwf	147,c	;volatile
   640                           
   641                           ;main.c: 52:     TRISC = 0x00;
   642   007D80  0E00               	movlw	0
   643   007D82  6E94               	movwf	148,c	;volatile
   644                           
   645                           ;main.c: 53:     TRISD = 0x00;
   646   007D84  0E00               	movlw	0
   647   007D86  6E95               	movwf	149,c	;volatile
   648                           
   649                           ;main.c: 54:     TRISE = 0x00;
   650   007D88  0E00               	movlw	0
   651   007D8A  6E96               	movwf	150,c	;volatile
   652                           
   653                           ;main.c: 57:     LATA = 0x00;
   654   007D8C  0E00               	movlw	0
   655   007D8E  6E89               	movwf	137,c	;volatile
   656                           
   657                           ;main.c: 58:     LATB = 0x00;
   658   007D90  0E00               	movlw	0
   659   007D92  6E8A               	movwf	138,c	;volatile
   660                           
   661                           ;main.c: 59:     LATC = 0x00;
   662   007D94  0E00               	movlw	0
   663   007D96  6E8B               	movwf	139,c	;volatile
   664                           
   665                           ;main.c: 60:     LATD = 0x00;
   666   007D98  0E00               	movlw	0
   667   007D9A  6E8C               	movwf	140,c	;volatile
   668                           
   669                           ;main.c: 61:     LATE = 0x00;
   670   007D9C  0E00               	movlw	0
   671   007D9E  6E8D               	movwf	141,c	;volatile
   672   007DA0  0012               	return		;funcret
   673   007DA2                     __end_of_Configuration:
   674                           	callstack 0
   675   000000                     
   676                           	psect	rparam
   677   000000                     
   678                           	psect	idloc
   679                           
   680                           ;Config register IDLOC0 @ 0x200000
   681                           ;	unspecified, using default values
   682   200000                     	org	2097152
   683   200000  FF                 	db	255
   684                           
   685                           ;Config register IDLOC1 @ 0x200001
   686                           ;	unspecified, using default values
   687   200001                     	org	2097153
   688   200001  FF                 	db	255
   689                           
   690                           ;Config register IDLOC2 @ 0x200002
   691                           ;	unspecified, using default values
   692   200002                     	org	2097154
   693   200002  FF                 	db	255
   694                           
   695                           ;Config register IDLOC3 @ 0x200003
   696                           ;	unspecified, using default values
   697   200003                     	org	2097155
   698   200003  FF                 	db	255
   699                           
   700                           ;Config register IDLOC4 @ 0x200004
   701                           ;	unspecified, using default values
   702   200004                     	org	2097156
   703   200004  FF                 	db	255
   704                           
   705                           ;Config register IDLOC5 @ 0x200005
   706                           ;	unspecified, using default values
   707   200005                     	org	2097157
   708   200005  FF                 	db	255
   709                           
   710                           ;Config register IDLOC6 @ 0x200006
   711                           ;	unspecified, using default values
   712   200006                     	org	2097158
   713   200006  FF                 	db	255
   714                           
   715                           ;Config register IDLOC7 @ 0x200007
   716                           ;	unspecified, using default values
   717   200007                     	org	2097159
   718   200007  FF                 	db	255
   719                           
   720                           	psect	config
   721                           
   722                           ;Config register CONFIG1L @ 0x300000
   723                           ;	PLL Prescaler Selection bits
   724                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   725                           ;	System Clock Postscaler Selection bits
   726                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   727                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   728                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   729   300000                     	org	3145728
   730   300000  00                 	db	0
   731                           
   732                           ;Config register CONFIG1H @ 0x300001
   733                           ;	Oscillator Selection bits
   734                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
   735                           ;	Fail-Safe Clock Monitor Enable bit
   736                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   737                           ;	Internal/External Oscillator Switchover bit
   738                           ;	IESO = OFF, Oscillator Switchover mode disabled
   739   300001                     	org	3145729
   740   300001  08                 	db	8
   741                           
   742                           ;Config register CONFIG2L @ 0x300002
   743                           ;	Power-up Timer Enable bit
   744                           ;	PWRT = OFF, PWRT disabled
   745                           ;	Brown-out Reset Enable bits
   746                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   747                           ;	Brown-out Reset Voltage bits
   748                           ;	BORV = 3, Minimum setting 2.05V
   749                           ;	USB Voltage Regulator Enable bit
   750                           ;	VREGEN = OFF, USB voltage regulator disabled
   751   300002                     	org	3145730
   752   300002  19                 	db	25
   753                           
   754                           ;Config register CONFIG2H @ 0x300003
   755                           ;	Watchdog Timer Enable bit
   756                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   757                           ;	Watchdog Timer Postscale Select bits
   758                           ;	WDTPS = 32768, 1:32768
   759   300003                     	org	3145731
   760   300003  1E                 	db	30
   761                           
   762                           ; Padding undefined space
   763   300004                     	org	3145732
   764   300004  FF                 	db	255
   765                           
   766                           ;Config register CONFIG3H @ 0x300005
   767                           ;	CCP2 MUX bit
   768                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   769                           ;	PORTB A/D Enable bit
   770                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   771                           ;	Low-Power Timer 1 Oscillator Enable bit
   772                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   773                           ;	MCLR Pin Enable bit
   774                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   775   300005                     	org	3145733
   776   300005  83                 	db	131
   777                           
   778                           ;Config register CONFIG4L @ 0x300006
   779                           ;	Stack Full/Underflow Reset Enable bit
   780                           ;	STVREN = ON, Stack full/underflow will cause Reset
   781                           ;	Single-Supply ICSP Enable bit
   782                           ;	LVP = OFF, Single-Supply ICSP disabled
   783                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   784                           ;	ICPRT = OFF, ICPORT disabled
   785                           ;	Extended Instruction Set Enable bit
   786                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   787                           ;	Background Debugger Enable bit
   788                           ;	DEBUG = 0x1, unprogrammed default
   789   300006                     	org	3145734
   790   300006  81                 	db	129
   791                           
   792                           ; Padding undefined space
   793   300007                     	org	3145735
   794   300007  FF                 	db	255
   795                           
   796                           ;Config register CONFIG5L @ 0x300008
   797                           ;	Code Protection bit
   798                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   799                           ;	Code Protection bit
   800                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   801                           ;	Code Protection bit
   802                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   803                           ;	Code Protection bit
   804                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   805   300008                     	org	3145736
   806   300008  0F                 	db	15
   807                           
   808                           ;Config register CONFIG5H @ 0x300009
   809                           ;	Boot Block Code Protection bit
   810                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   811                           ;	Data EEPROM Code Protection bit
   812                           ;	CPD = OFF, Data EEPROM is not code-protected
   813   300009                     	org	3145737
   814   300009  C0                 	db	192
   815                           
   816                           ;Config register CONFIG6L @ 0x30000A
   817                           ;	Write Protection bit
   818                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   819                           ;	Write Protection bit
   820                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   821                           ;	Write Protection bit
   822                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   823                           ;	Write Protection bit
   824                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   825   30000A                     	org	3145738
   826   30000A  0F                 	db	15
   827                           
   828                           ;Config register CONFIG6H @ 0x30000B
   829                           ;	Configuration Register Write Protection bit
   830                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   831                           ;	Boot Block Write Protection bit
   832                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   833                           ;	Data EEPROM Write Protection bit
   834                           ;	WRTD = OFF, Data EEPROM is not write-protected
   835   30000B                     	org	3145739
   836   30000B  E0                 	db	224
   837                           
   838                           ;Config register CONFIG7L @ 0x30000C
   839                           ;	Table Read Protection bit
   840                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   841                           ;	Table Read Protection bit
   842                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   843                           ;	Table Read Protection bit
   844                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   845                           ;	Table Read Protection bit
   846                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   847   30000C                     	org	3145740
   848   30000C  0F                 	db	15
   849                           
   850                           ;Config register CONFIG7H @ 0x30000D
   851                           ;	Boot Block Table Read Protection bit
   852                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   853   30000D                     	org	3145741
   854   30000D  40                 	db	64
   855                           tosu	equ	0xFFF
   856                           tosh	equ	0xFFE
   857                           tosl	equ	0xFFD
   858                           stkptr	equ	0xFFC
   859                           pclatu	equ	0xFFB
   860                           pclath	equ	0xFFA
   861                           pcl	equ	0xFF9
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodh	equ	0xFF4
   867                           prodl	equ	0xFF3
   868                           indf0	equ	0xFEF
   869                           postinc0	equ	0xFEE
   870                           postdec0	equ	0xFED
   871                           preinc0	equ	0xFEC
   872                           plusw0	equ	0xFEB
   873                           fsr0h	equ	0xFEA
   874                           fsr0l	equ	0xFE9
   875                           wreg	equ	0xFE8
   876                           indf1	equ	0xFE7
   877                           postinc1	equ	0xFE6
   878                           postdec1	equ	0xFE5
   879                           preinc1	equ	0xFE4
   880                           plusw1	equ	0xFE3
   881                           fsr1h	equ	0xFE2
   882                           fsr1l	equ	0xFE1
   883                           bsr	equ	0xFE0
   884                           indf2	equ	0xFDF
   885                           postinc2	equ	0xFDE
   886                           postdec2	equ	0xFDD
   887                           preinc2	equ	0xFDC
   888                           plusw2	equ	0xFDB
   889                           fsr2h	equ	0xFDA
   890                           fsr2l	equ	0xFD9
   891                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Hard_Bitwise

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     270
                      _Configuration
                       _Hard_Bitwise
 ---------------------------------------------------------------------------------
 (1) _Hard_Bitwise                                        12    12      0     270
                                              0 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
   _Hard_Bitwise

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C       E       1       14.7%
BITBIGSFRh          2C      0       0      21        0.0%
BITBIGSFRllh        2A      0       0      23        0.0%
BITBIGSFRllll       29      0       0      25        0.0%
BITBIGSFRlh         11      0       0      22        0.0%
BITBIGSFRlllh        4      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E       3        0.0%
DATA                 0      0       E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Aug 01 02:13:33 2023

                     l43 7DA0                       l59 7FFE                       u10 7DC6  
                     u11 7DC2                       u20 7DDE                       u21 7DDA  
                     u40 7E42                       u41 7E3E                       u50 7E5E  
                     u34 7DF4                       u51 7E5A                       u35 7DF0  
                     u70 7EC2                       u71 7EBE                       u80 7EDA  
                     u64 7E74                       u81 7ED6                       u65 7E70  
                     u94 7F0C                       u95 7F08                      l810 7F7A  
                    l802 7F36                      l740 7D70                      l820 7FC2  
                    l804 7F3E                      l822 7FDE                      l814 7F9A  
                    l750 7DDE                      l742 7DA2                      l816 7FA2  
                    l808 7F5E                      l752 7DE2                      l760 7E1E  
                    l744 7DAA                      l770 7E5E                      l762 7E26  
                    l754 7DFE                      l826 7D42                      l772 7E62  
                    l780 7E9E                      l756 7E16                      l748 7DCA  
                    l828 7D46                      l790 7EDE                      l782 7EA6  
                    l774 7E7E                      l766 7E46                      l792 7EF6  
                    l776 7E96                      l768 7E4A                      l794 7EFA  
                    l786 7EC6                      l796 7F16                      l788 7EDA  
                    l798 7F2E                      u100 7F5A                      u101 7F56  
                    u120 7FBE                      u121 7FBA                      u114 7F70  
                    u115 7F6C                      u134 7FD4                      u135 7FD0  
                    u517 7E08                      u527 7E88                      u537 7EE8  
                    u547 7F20                      u557 7F84                      u567 7FE8  
                    wreg 0FE8                     _LATA 0F89                     _LATB 0F8A  
                   _LATC 0F8B                     _LATD 0F8C                     _LATE 0F8D  
                   _Time 000D     __end_of_Hard_Bitwise 8000                     _main 7D42  
                   start 0000             ___param_bank 0000                    ?_main 0001  
                  _TRISA 0F92                    _TRISB 0F93                    _TRISC 0F94  
                  _TRISD 0F95                    _TRISE 0F96                    tablat 0FF5  
                  status 0FD8          __initialization 7D52             __end_of_main 7D52  
                 ??_main 000D            __activetblptr 0000                   _ADCON1 0FC1  
                 _OSCCON 0FD3                   isa$std 0001             __pdataCOMRAM 000D  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 7D6A            ___rparam_used 0001  
         __pcstackCOMRAM 0001             _Hard_Bitwise 7DA2    __end_of_Configuration 7DA2  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7D52  
          Hard_Bitwise@A 0007            Hard_Bitwise@B 0009            Hard_Bitwise@C 000B  
          Hard_Bitwise@D 0003            Hard_Bitwise@E 0005                  __ramtop 0800  
                __ptext0 7D42                  __ptext1 7DA2                  __ptext2 7D70  
   end_of_initialization 7D6A            __pidataCOMRAM 7D40      start_initialization 7D52  
          _Configuration 7D70                 __Hrparam 0000                 __Lrparam 0000  
          ?_Hard_Bitwise 0001           ?_Configuration 0001                 isa$xinst 0000  
         ??_Hard_Bitwise 0001          ??_Configuration 0001  
