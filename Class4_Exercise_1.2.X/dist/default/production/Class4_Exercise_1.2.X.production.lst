

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Jul 26 00:36:02 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   007D7A                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _Time
    58   007D7A  0190               	dw	400
    59   000000                     _LATA	set	3977
    60   000000                     _TRISA	set	3986
    61   000000                     _ADCON1	set	4033
    62   000000                     _OSCCON	set	4051
    63   000000                     _TRISE	set	3990
    64   000000                     _TRISD	set	3989
    65   000000                     _TRISC	set	3988
    66   000000                     _TRISB	set	3987
    67   000000                     _LATE	set	3981
    68   000000                     _LATD	set	3980
    69   000000                     _LATC	set	3979
    70   000000                     _LATB	set	3978
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   007D8C                     __pcinit:
    76                           	callstack 0
    77   007D8C                     start_initialization:
    78                           	callstack 0
    79   007D8C                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (2 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84   007D8C  0E7A               	movlw	low __pidataCOMRAM
    85   007D8E  6EF6               	movwf	tblptrl,c
    86   007D90  0E7D               	movlw	high __pidataCOMRAM
    87   007D92  6EF7               	movwf	tblptrh,c
    88   007D94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89   007D96  6EF8               	movwf	tblptru,c
    90   007D98  0009               	tblrd		*+	;fetch initializer
    91   007D9A  CFF5 F00D          	movff	tablat,__pdataCOMRAM
    92   007D9E  0009               	tblrd		*+	;fetch initializer
    93   007DA0  CFF5 F00E          	movff	tablat,__pdataCOMRAM+1
    94   007DA4                     end_of_initialization:
    95                           	callstack 0
    96   007DA4                     __end_of__initialization:
    97                           	callstack 0
    98   007DA4  0100               	movlb	0
    99   007DA6  EFBE  F03E         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	dataCOMRAM
   102   00000D                     __pdataCOMRAM:
   103                           	callstack 0
   104   00000D                     _Time:
   105                           	callstack 0
   106   00000D                     	ds	2
   107                           
   108                           	psect	cstackCOMRAM
   109   000001                     __pcstackCOMRAM:
   110                           	callstack 0
   111   000001                     ??_Bitwise:
   112   000001                     
   113                           ; 1 bytes @ 0x0
   114   000001                     	ds	2
   115   000003                     Bitwise@C:
   116                           	callstack 0
   117                           
   118                           ; 2 bytes @ 0x2
   119   000003                     	ds	2
   120   000005                     Bitwise@D:
   121                           	callstack 0
   122                           
   123                           ; 2 bytes @ 0x4
   124   000005                     	ds	2
   125   000007                     Bitwise@E:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x6
   129   000007                     	ds	2
   130   000009                     Bitwise@A:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x8
   134   000009                     	ds	2
   135   00000B                     Bitwise@B:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0xA
   139   00000B                     	ds	2
   140   00000D                     
   141                           ; 1 bytes @ 0xC
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 27 in file "main.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;		None
   152 ;; Return value:  Size  Location     Type
   153 ;;                  1    wreg      void 
   154 ;; Registers used:
   155 ;;		wreg, status,2, status,0, cstack
   156 ;; Tracked objects:
   157 ;;		On entry : 0/0
   158 ;;		On exit  : 0/0
   159 ;;		Unchanged: 0/0
   160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   161 ;;      Params:         0       0       0       0       0       0       0       0       0
   162 ;;      Locals:         0       0       0       0       0       0       0       0       0
   163 ;;      Temps:          0       0       0       0       0       0       0       0       0
   164 ;;      Totals:         0       0       0       0       0       0       0       0       0
   165 ;;Total ram usage:        0 bytes
   166 ;; Hardware stack levels required when called: 1
   167 ;; This function calls:
   168 ;;		_Bitwise
   169 ;;		_Configuration
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176   007D7C                     __ptext0:
   177                           	callstack 0
   178   007D7C                     _main:
   179                           	callstack 30
   180   007D7C                     
   181                           ;main.c: 30:     Configuration();
   182   007D7C  ECD5  F03E         	call	_Configuration	;wreg free
   183   007D80                     l810:
   184                           
   185                           ;main.c: 34:         Bitwise();
   186   007D80  ECEE  F03E         	call	_Bitwise	;wreg free
   187   007D84  EFC0  F03E         	goto	l810
   188   007D88  EF00  F000         	goto	start
   189   007D8C                     __end_of_main:
   190                           	callstack 0
   191                           
   192 ;; *************** function _Configuration *****************
   193 ;; Defined at:
   194 ;;		line 42 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;		None
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   208 ;;      Params:         0       0       0       0       0       0       0       0       0
   209 ;;      Locals:         0       0       0       0       0       0       0       0       0
   210 ;;      Temps:          0       0       0       0       0       0       0       0       0
   211 ;;      Totals:         0       0       0       0       0       0       0       0       0
   212 ;;Total ram usage:        0 bytes
   213 ;; Hardware stack levels used: 1
   214 ;; This function calls:
   215 ;;		Nothing
   216 ;; This function is called by:
   217 ;;		_main
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text1
   222   007DAA                     __ptext1:
   223                           	callstack 0
   224   007DAA                     _Configuration:
   225                           	callstack 30
   226   007DAA                     
   227                           ;main.c: 44:     OSCCON = 0x72;
   228   007DAA  0E72               	movlw	114
   229   007DAC  6ED3               	movwf	211,c	;volatile
   230                           
   231                           ;main.c: 45:     ADCON1 = 0x0F;
   232   007DAE  0E0F               	movlw	15
   233   007DB0  6EC1               	movwf	193,c	;volatile
   234                           
   235                           ;main.c: 48:     TRISA = 0x00;
   236   007DB2  0E00               	movlw	0
   237   007DB4  6E92               	movwf	146,c	;volatile
   238                           
   239                           ;main.c: 49:     TRISB = 0x00;
   240   007DB6  0E00               	movlw	0
   241   007DB8  6E93               	movwf	147,c	;volatile
   242                           
   243                           ;main.c: 50:     TRISC = 0x00;
   244   007DBA  0E00               	movlw	0
   245   007DBC  6E94               	movwf	148,c	;volatile
   246                           
   247                           ;main.c: 51:     TRISD = 0x00;
   248   007DBE  0E00               	movlw	0
   249   007DC0  6E95               	movwf	149,c	;volatile
   250                           
   251                           ;main.c: 52:     TRISE = 0x00;
   252   007DC2  0E00               	movlw	0
   253   007DC4  6E96               	movwf	150,c	;volatile
   254                           
   255                           ;main.c: 55:     LATA = 0x00;
   256   007DC6  0E00               	movlw	0
   257   007DC8  6E89               	movwf	137,c	;volatile
   258                           
   259                           ;main.c: 56:     LATB = 0x00;
   260   007DCA  0E00               	movlw	0
   261   007DCC  6E8A               	movwf	138,c	;volatile
   262                           
   263                           ;main.c: 57:     LATC = 0x00;
   264   007DCE  0E00               	movlw	0
   265   007DD0  6E8B               	movwf	139,c	;volatile
   266                           
   267                           ;main.c: 58:     LATD = 0x00;
   268   007DD2  0E00               	movlw	0
   269   007DD4  6E8C               	movwf	140,c	;volatile
   270                           
   271                           ;main.c: 59:     LATE = 0x00;
   272   007DD6  0E00               	movlw	0
   273   007DD8  6E8D               	movwf	141,c	;volatile
   274   007DDA  0012               	return		;funcret
   275   007DDC                     __end_of_Configuration:
   276                           	callstack 0
   277                           
   278 ;; *************** function _Bitwise *****************
   279 ;; Defined at:
   280 ;;		line 65 in file "main.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  E               2    6[COMRAM] int 
   285 ;;  D               2    4[COMRAM] int 
   286 ;;  C               2    2[COMRAM] int 
   287 ;;  B               2   10[COMRAM] int 
   288 ;;  A               2    8[COMRAM] int 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2, status,0
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   298 ;;      Params:         0       0       0       0       0       0       0       0       0
   299 ;;      Locals:        10       0       0       0       0       0       0       0       0
   300 ;;      Temps:          2       0       0       0       0       0       0       0       0
   301 ;;      Totals:        12       0       0       0       0       0       0       0       0
   302 ;;Total ram usage:       12 bytes
   303 ;; Hardware stack levels used: 1
   304 ;; This function calls:
   305 ;;		Nothing
   306 ;; This function is called by:
   307 ;;		_main
   308 ;; This function uses a non-reentrant model
   309 ;;
   310                           
   311                           	psect	text2
   312   007DDC                     __ptext2:
   313                           	callstack 0
   314   007DDC                     _Bitwise:
   315                           	callstack 30
   316   007DDC                     
   317                           ;main.c: 68:     for (int A = 0; A < 7; A++) {
   318   007DDC  0E00               	movlw	0
   319   007DDE  6E0A               	movwf	(Bitwise@A+1)^0,c
   320   007DE0  0E00               	movlw	0
   321   007DE2  6E09               	movwf	Bitwise@A^0,c
   322   007DE4                     l738:
   323   007DE4  BE0A               	btfsc	(Bitwise@A+1)^0,7,c
   324   007DE6  EFFE  F03E         	goto	u11
   325   007DEA  500A               	movf	(Bitwise@A+1)^0,w,c
   326   007DEC  E109               	bnz	u10
   327   007DEE  0E07               	movlw	7
   328   007DF0  5C09               	subwf	Bitwise@A^0,w,c
   329   007DF2  A0D8               	btfss	status,0,c
   330   007DF4  EFFE  F03E         	goto	u11
   331   007DF8  EF00  F03F         	goto	u10
   332   007DFC                     u11:
   333   007DFC  EF02  F03F         	goto	l742
   334   007E00                     u10:
   335   007E00  EF2C  F03F         	goto	l754
   336   007E04                     l742:
   337                           
   338                           ;main.c: 70:         if (A == 6) {
   339   007E04  0E06               	movlw	6
   340   007E06  1809               	xorwf	Bitwise@A^0,w,c
   341   007E08  100A               	iorwf	(Bitwise@A+1)^0,w,c
   342   007E0A  A4D8               	btfss	status,2,c
   343   007E0C  EF0A  F03F         	goto	u21
   344   007E10  EF0C  F03F         	goto	u20
   345   007E14                     u21:
   346   007E14  EF0E  F03F         	goto	l746
   347   007E18                     u20:
   348   007E18                     
   349                           ;main.c: 71:             LATB = 0x01;
   350   007E18  0E01               	movlw	1
   351   007E1A  6E8A               	movwf	138,c	;volatile
   352   007E1C                     l746:
   353                           
   354                           ;main.c: 74:         LATA = (0x03 << A);
   355   007E1C  C009  F001         	movff	Bitwise@A,??_Bitwise
   356   007E20  0E03               	movlw	3
   357   007E22  6E02               	movwf	(??_Bitwise+1)^0,c
   358   007E24  2A01               	incf	??_Bitwise^0,f,c
   359   007E26  EF17  F03F         	goto	u34
   360   007E2A                     u35:
   361   007E2A  90D8               	bcf	status,0,c
   362   007E2C  3602               	rlcf	(??_Bitwise+1)^0,f,c
   363   007E2E                     u34:
   364   007E2E  2E01               	decfsz	??_Bitwise^0,f,c
   365   007E30  EF15  F03F         	goto	u35
   366   007E34  5002               	movf	(??_Bitwise+1)^0,w,c
   367   007E36  6E89               	movwf	137,c	;volatile
   368   007E38                     
   369                           ;main.c: 75:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   370   007E38  0E05               	movlw	5
   371   007E3A  6E02               	movwf	(??_Bitwise+1)^0,c
   372   007E3C  0E0F               	movlw	15
   373   007E3E  6E01               	movwf	??_Bitwise^0,c
   374   007E40  0EF1               	movlw	241
   375   007E42                     u497:
   376   007E42  2EE8               	decfsz	wreg,f,c
   377   007E44  D7FE               	bra	u497
   378   007E46  2E01               	decfsz	??_Bitwise^0,f,c
   379   007E48  D7FC               	bra	u497
   380   007E4A  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   381   007E4C  D7FA               	bra	u497
   382   007E4E  F000               	nop	
   383   007E50                     
   384                           ;main.c: 77:     }
   385   007E50  4A09               	infsnz	Bitwise@A^0,f,c
   386   007E52  2A0A               	incf	(Bitwise@A+1)^0,f,c
   387   007E54  EFF2  F03E         	goto	l738
   388   007E58                     l754:
   389                           
   390                           ;main.c: 80:     for (int B = 0; B < 7; B++) {
   391   007E58  0E00               	movlw	0
   392   007E5A  6E0C               	movwf	(Bitwise@B+1)^0,c
   393   007E5C  0E00               	movlw	0
   394   007E5E  6E0B               	movwf	Bitwise@B^0,c
   395   007E60                     l756:
   396   007E60  BE0C               	btfsc	(Bitwise@B+1)^0,7,c
   397   007E62  EF3C  F03F         	goto	u41
   398   007E66  500C               	movf	(Bitwise@B+1)^0,w,c
   399   007E68  E109               	bnz	u40
   400   007E6A  0E07               	movlw	7
   401   007E6C  5C0B               	subwf	Bitwise@B^0,w,c
   402   007E6E  A0D8               	btfss	status,0,c
   403   007E70  EF3C  F03F         	goto	u41
   404   007E74  EF3E  F03F         	goto	u40
   405   007E78                     u41:
   406   007E78  EF40  F03F         	goto	l760
   407   007E7C                     u40:
   408   007E7C  EF69  F03F         	goto	l772
   409   007E80                     l760:
   410                           
   411                           ;main.c: 82:         if (B == 0){
   412   007E80  500B               	movf	Bitwise@B^0,w,c
   413   007E82  100C               	iorwf	(Bitwise@B+1)^0,w,c
   414   007E84  A4D8               	btfss	status,2,c
   415   007E86  EF47  F03F         	goto	u51
   416   007E8A  EF49  F03F         	goto	u50
   417   007E8E                     u51:
   418   007E8E  EF4B  F03F         	goto	l764
   419   007E92                     u50:
   420   007E92                     
   421                           ;main.c: 83:             LATA = 0x00;
   422   007E92  0E00               	movlw	0
   423   007E94  6E89               	movwf	137,c	;volatile
   424   007E96                     l764:
   425                           
   426                           ;main.c: 86:         LATB = (0x03 << B);
   427   007E96  C00B  F001         	movff	Bitwise@B,??_Bitwise
   428   007E9A  0E03               	movlw	3
   429   007E9C  6E02               	movwf	(??_Bitwise+1)^0,c
   430   007E9E  2A01               	incf	??_Bitwise^0,f,c
   431   007EA0  EF54  F03F         	goto	u64
   432   007EA4                     u65:
   433   007EA4  90D8               	bcf	status,0,c
   434   007EA6  3602               	rlcf	(??_Bitwise+1)^0,f,c
   435   007EA8                     u64:
   436   007EA8  2E01               	decfsz	??_Bitwise^0,f,c
   437   007EAA  EF52  F03F         	goto	u65
   438   007EAE  5002               	movf	(??_Bitwise+1)^0,w,c
   439   007EB0  6E8A               	movwf	138,c	;volatile
   440   007EB2                     
   441                           ;main.c: 87:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   442   007EB2  0E05               	movlw	5
   443   007EB4  6E02               	movwf	(??_Bitwise+1)^0,c
   444   007EB6  0E0F               	movlw	15
   445   007EB8  6E01               	movwf	??_Bitwise^0,c
   446   007EBA  0EF1               	movlw	241
   447   007EBC                     u507:
   448   007EBC  2EE8               	decfsz	wreg,f,c
   449   007EBE  D7FE               	bra	u507
   450   007EC0  2E01               	decfsz	??_Bitwise^0,f,c
   451   007EC2  D7FC               	bra	u507
   452   007EC4  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   453   007EC6  D7FA               	bra	u507
   454   007EC8  F000               	nop	
   455   007ECA                     
   456                           ;main.c: 88:     }
   457   007ECA  4A0B               	infsnz	Bitwise@B^0,f,c
   458   007ECC  2A0C               	incf	(Bitwise@B+1)^0,f,c
   459   007ECE  EF30  F03F         	goto	l756
   460   007ED2                     l772:
   461                           
   462                           ;main.c: 91:     for (int C = 0; C < 6; C++) {
   463   007ED2  0E00               	movlw	0
   464   007ED4  6E04               	movwf	(Bitwise@C+1)^0,c
   465   007ED6  0E00               	movlw	0
   466   007ED8  6E03               	movwf	Bitwise@C^0,c
   467   007EDA                     l774:
   468   007EDA  BE04               	btfsc	(Bitwise@C+1)^0,7,c
   469   007EDC  EF79  F03F         	goto	u71
   470   007EE0  5004               	movf	(Bitwise@C+1)^0,w,c
   471   007EE2  E109               	bnz	u70
   472   007EE4  0E06               	movlw	6
   473   007EE6  5C03               	subwf	Bitwise@C^0,w,c
   474   007EE8  A0D8               	btfss	status,0,c
   475   007EEA  EF79  F03F         	goto	u71
   476   007EEE  EF7B  F03F         	goto	u70
   477   007EF2                     u71:
   478   007EF2  EF7D  F03F         	goto	l778
   479   007EF6                     u70:
   480   007EF6  EF9B  F03F         	goto	l784
   481   007EFA                     l778:
   482                           
   483                           ;main.c: 92:         LATC = (0x03 << C);
   484   007EFA  C003  F001         	movff	Bitwise@C,??_Bitwise
   485   007EFE  0E03               	movlw	3
   486   007F00  6E02               	movwf	(??_Bitwise+1)^0,c
   487   007F02  2A01               	incf	??_Bitwise^0,f,c
   488   007F04  EF86  F03F         	goto	u84
   489   007F08                     u85:
   490   007F08  90D8               	bcf	status,0,c
   491   007F0A  3602               	rlcf	(??_Bitwise+1)^0,f,c
   492   007F0C                     u84:
   493   007F0C  2E01               	decfsz	??_Bitwise^0,f,c
   494   007F0E  EF84  F03F         	goto	u85
   495   007F12  5002               	movf	(??_Bitwise+1)^0,w,c
   496   007F14  6E8B               	movwf	139,c	;volatile
   497   007F16                     
   498                           ;main.c: 93:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   499   007F16  0E05               	movlw	5
   500   007F18  6E02               	movwf	(??_Bitwise+1)^0,c
   501   007F1A  0E0F               	movlw	15
   502   007F1C  6E01               	movwf	??_Bitwise^0,c
   503   007F1E  0EF1               	movlw	241
   504   007F20                     u517:
   505   007F20  2EE8               	decfsz	wreg,f,c
   506   007F22  D7FE               	bra	u517
   507   007F24  2E01               	decfsz	??_Bitwise^0,f,c
   508   007F26  D7FC               	bra	u517
   509   007F28  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   510   007F2A  D7FA               	bra	u517
   511   007F2C  F000               	nop	
   512                           
   513                           ;main.c: 94:     }
   514   007F2E  4A03               	infsnz	Bitwise@C^0,f,c
   515   007F30  2A04               	incf	(Bitwise@C+1)^0,f,c
   516   007F32  EF6D  F03F         	goto	l774
   517   007F36                     l784:
   518                           
   519                           ;main.c: 97:     for (int D = 0; D < 7; D++) {
   520   007F36  0E00               	movlw	0
   521   007F38  6E06               	movwf	(Bitwise@D+1)^0,c
   522   007F3A  0E00               	movlw	0
   523   007F3C  6E05               	movwf	Bitwise@D^0,c
   524   007F3E                     l786:
   525   007F3E  BE06               	btfsc	(Bitwise@D+1)^0,7,c
   526   007F40  EFAB  F03F         	goto	u91
   527   007F44  5006               	movf	(Bitwise@D+1)^0,w,c
   528   007F46  E109               	bnz	u90
   529   007F48  0E07               	movlw	7
   530   007F4A  5C05               	subwf	Bitwise@D^0,w,c
   531   007F4C  A0D8               	btfss	status,0,c
   532   007F4E  EFAB  F03F         	goto	u91
   533   007F52  EFAD  F03F         	goto	u90
   534   007F56                     u91:
   535   007F56  EFAF  F03F         	goto	l790
   536   007F5A                     u90:
   537   007F5A  EFCD  F03F         	goto	l796
   538   007F5E                     l790:
   539                           
   540                           ;main.c: 98:         LATD = (0x03 << D);
   541   007F5E  C005  F001         	movff	Bitwise@D,??_Bitwise
   542   007F62  0E03               	movlw	3
   543   007F64  6E02               	movwf	(??_Bitwise+1)^0,c
   544   007F66  2A01               	incf	??_Bitwise^0,f,c
   545   007F68  EFB8  F03F         	goto	u104
   546   007F6C                     u105:
   547   007F6C  90D8               	bcf	status,0,c
   548   007F6E  3602               	rlcf	(??_Bitwise+1)^0,f,c
   549   007F70                     u104:
   550   007F70  2E01               	decfsz	??_Bitwise^0,f,c
   551   007F72  EFB6  F03F         	goto	u105
   552   007F76  5002               	movf	(??_Bitwise+1)^0,w,c
   553   007F78  6E8C               	movwf	140,c	;volatile
   554   007F7A                     
   555                           ;main.c: 99:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   556   007F7A  0E05               	movlw	5
   557   007F7C  6E02               	movwf	(??_Bitwise+1)^0,c
   558   007F7E  0E0F               	movlw	15
   559   007F80  6E01               	movwf	??_Bitwise^0,c
   560   007F82  0EF1               	movlw	241
   561   007F84                     u527:
   562   007F84  2EE8               	decfsz	wreg,f,c
   563   007F86  D7FE               	bra	u527
   564   007F88  2E01               	decfsz	??_Bitwise^0,f,c
   565   007F8A  D7FC               	bra	u527
   566   007F8C  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   567   007F8E  D7FA               	bra	u527
   568   007F90  F000               	nop	
   569                           
   570                           ;main.c: 100:     }
   571   007F92  4A05               	infsnz	Bitwise@D^0,f,c
   572   007F94  2A06               	incf	(Bitwise@D+1)^0,f,c
   573   007F96  EF9F  F03F         	goto	l786
   574   007F9A                     l796:
   575                           
   576                           ;main.c: 103:     for (int E = 0; E < 3; E++) {
   577   007F9A  0E00               	movlw	0
   578   007F9C  6E08               	movwf	(Bitwise@E+1)^0,c
   579   007F9E  0E00               	movlw	0
   580   007FA0  6E07               	movwf	Bitwise@E^0,c
   581   007FA2                     l798:
   582   007FA2  BE08               	btfsc	(Bitwise@E+1)^0,7,c
   583   007FA4  EFDD  F03F         	goto	u111
   584   007FA8  5008               	movf	(Bitwise@E+1)^0,w,c
   585   007FAA  E109               	bnz	u110
   586   007FAC  0E03               	movlw	3
   587   007FAE  5C07               	subwf	Bitwise@E^0,w,c
   588   007FB0  A0D8               	btfss	status,0,c
   589   007FB2  EFDD  F03F         	goto	u111
   590   007FB6  EFDF  F03F         	goto	u110
   591   007FBA                     u111:
   592   007FBA  EFE1  F03F         	goto	l802
   593   007FBE                     u110:
   594   007FBE  EFFF  F03F         	goto	l58
   595   007FC2                     l802:
   596                           
   597                           ;main.c: 104:         LATE = (0x01 << E);
   598   007FC2  C007  F001         	movff	Bitwise@E,??_Bitwise
   599   007FC6  0E01               	movlw	1
   600   007FC8  6E02               	movwf	(??_Bitwise+1)^0,c
   601   007FCA  2A01               	incf	??_Bitwise^0,f,c
   602   007FCC  EFEA  F03F         	goto	u124
   603   007FD0                     u125:
   604   007FD0  90D8               	bcf	status,0,c
   605   007FD2  3602               	rlcf	(??_Bitwise+1)^0,f,c
   606   007FD4                     u124:
   607   007FD4  2E01               	decfsz	??_Bitwise^0,f,c
   608   007FD6  EFE8  F03F         	goto	u125
   609   007FDA  5002               	movf	(??_Bitwise+1)^0,w,c
   610   007FDC  6E8D               	movwf	141,c	;volatile
   611   007FDE                     
   612                           ;main.c: 105:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   613   007FDE  0E05               	movlw	5
   614   007FE0  6E02               	movwf	(??_Bitwise+1)^0,c
   615   007FE2  0E0F               	movlw	15
   616   007FE4  6E01               	movwf	??_Bitwise^0,c
   617   007FE6  0EF1               	movlw	241
   618   007FE8                     u537:
   619   007FE8  2EE8               	decfsz	wreg,f,c
   620   007FEA  D7FE               	bra	u537
   621   007FEC  2E01               	decfsz	??_Bitwise^0,f,c
   622   007FEE  D7FC               	bra	u537
   623   007FF0  2E02               	decfsz	(??_Bitwise+1)^0,f,c
   624   007FF2  D7FA               	bra	u537
   625   007FF4  F000               	nop	
   626                           
   627                           ;main.c: 106:     }
   628   007FF6  4A07               	infsnz	Bitwise@E^0,f,c
   629   007FF8  2A08               	incf	(Bitwise@E+1)^0,f,c
   630   007FFA  EFD1  F03F         	goto	l798
   631   007FFE                     l58:
   632   007FFE  0012               	return		;funcret
   633   008000                     __end_of_Bitwise:
   634                           	callstack 0
   635   000000                     
   636                           	psect	rparam
   637   000000                     
   638                           	psect	idloc
   639                           
   640                           ;Config register IDLOC0 @ 0x200000
   641                           ;	unspecified, using default values
   642   200000                     	org	2097152
   643   200000  FF                 	db	255
   644                           
   645                           ;Config register IDLOC1 @ 0x200001
   646                           ;	unspecified, using default values
   647   200001                     	org	2097153
   648   200001  FF                 	db	255
   649                           
   650                           ;Config register IDLOC2 @ 0x200002
   651                           ;	unspecified, using default values
   652   200002                     	org	2097154
   653   200002  FF                 	db	255
   654                           
   655                           ;Config register IDLOC3 @ 0x200003
   656                           ;	unspecified, using default values
   657   200003                     	org	2097155
   658   200003  FF                 	db	255
   659                           
   660                           ;Config register IDLOC4 @ 0x200004
   661                           ;	unspecified, using default values
   662   200004                     	org	2097156
   663   200004  FF                 	db	255
   664                           
   665                           ;Config register IDLOC5 @ 0x200005
   666                           ;	unspecified, using default values
   667   200005                     	org	2097157
   668   200005  FF                 	db	255
   669                           
   670                           ;Config register IDLOC6 @ 0x200006
   671                           ;	unspecified, using default values
   672   200006                     	org	2097158
   673   200006  FF                 	db	255
   674                           
   675                           ;Config register IDLOC7 @ 0x200007
   676                           ;	unspecified, using default values
   677   200007                     	org	2097159
   678   200007  FF                 	db	255
   679                           
   680                           	psect	config
   681                           
   682                           ;Config register CONFIG1L @ 0x300000
   683                           ;	PLL Prescaler Selection bits
   684                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   685                           ;	System Clock Postscaler Selection bits
   686                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   687                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   688                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   689   300000                     	org	3145728
   690   300000  00                 	db	0
   691                           
   692                           ;Config register CONFIG1H @ 0x300001
   693                           ;	Oscillator Selection bits
   694                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
   695                           ;	Fail-Safe Clock Monitor Enable bit
   696                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   697                           ;	Internal/External Oscillator Switchover bit
   698                           ;	IESO = OFF, Oscillator Switchover mode disabled
   699   300001                     	org	3145729
   700   300001  08                 	db	8
   701                           
   702                           ;Config register CONFIG2L @ 0x300002
   703                           ;	Power-up Timer Enable bit
   704                           ;	PWRT = OFF, PWRT disabled
   705                           ;	Brown-out Reset Enable bits
   706                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   707                           ;	Brown-out Reset Voltage bits
   708                           ;	BORV = 3, Minimum setting 2.05V
   709                           ;	USB Voltage Regulator Enable bit
   710                           ;	VREGEN = OFF, USB voltage regulator disabled
   711   300002                     	org	3145730
   712   300002  19                 	db	25
   713                           
   714                           ;Config register CONFIG2H @ 0x300003
   715                           ;	Watchdog Timer Enable bit
   716                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   717                           ;	Watchdog Timer Postscale Select bits
   718                           ;	WDTPS = 32768, 1:32768
   719   300003                     	org	3145731
   720   300003  1E                 	db	30
   721                           
   722                           ; Padding undefined space
   723   300004                     	org	3145732
   724   300004  FF                 	db	255
   725                           
   726                           ;Config register CONFIG3H @ 0x300005
   727                           ;	CCP2 MUX bit
   728                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   729                           ;	PORTB A/D Enable bit
   730                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   731                           ;	Low-Power Timer 1 Oscillator Enable bit
   732                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   733                           ;	MCLR Pin Enable bit
   734                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   735   300005                     	org	3145733
   736   300005  83                 	db	131
   737                           
   738                           ;Config register CONFIG4L @ 0x300006
   739                           ;	Stack Full/Underflow Reset Enable bit
   740                           ;	STVREN = ON, Stack full/underflow will cause Reset
   741                           ;	Single-Supply ICSP Enable bit
   742                           ;	LVP = OFF, Single-Supply ICSP disabled
   743                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   744                           ;	ICPRT = OFF, ICPORT disabled
   745                           ;	Extended Instruction Set Enable bit
   746                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   747                           ;	Background Debugger Enable bit
   748                           ;	DEBUG = 0x1, unprogrammed default
   749   300006                     	org	3145734
   750   300006  81                 	db	129
   751                           
   752                           ; Padding undefined space
   753   300007                     	org	3145735
   754   300007  FF                 	db	255
   755                           
   756                           ;Config register CONFIG5L @ 0x300008
   757                           ;	Code Protection bit
   758                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   759                           ;	Code Protection bit
   760                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   761                           ;	Code Protection bit
   762                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   763                           ;	Code Protection bit
   764                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   765   300008                     	org	3145736
   766   300008  0F                 	db	15
   767                           
   768                           ;Config register CONFIG5H @ 0x300009
   769                           ;	Boot Block Code Protection bit
   770                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   771                           ;	Data EEPROM Code Protection bit
   772                           ;	CPD = OFF, Data EEPROM is not code-protected
   773   300009                     	org	3145737
   774   300009  C0                 	db	192
   775                           
   776                           ;Config register CONFIG6L @ 0x30000A
   777                           ;	Write Protection bit
   778                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   779                           ;	Write Protection bit
   780                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   781                           ;	Write Protection bit
   782                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   783                           ;	Write Protection bit
   784                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   785   30000A                     	org	3145738
   786   30000A  0F                 	db	15
   787                           
   788                           ;Config register CONFIG6H @ 0x30000B
   789                           ;	Configuration Register Write Protection bit
   790                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   791                           ;	Boot Block Write Protection bit
   792                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   793                           ;	Data EEPROM Write Protection bit
   794                           ;	WRTD = OFF, Data EEPROM is not write-protected
   795   30000B                     	org	3145739
   796   30000B  E0                 	db	224
   797                           
   798                           ;Config register CONFIG7L @ 0x30000C
   799                           ;	Table Read Protection bit
   800                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   801                           ;	Table Read Protection bit
   802                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   803                           ;	Table Read Protection bit
   804                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   805                           ;	Table Read Protection bit
   806                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   807   30000C                     	org	3145740
   808   30000C  0F                 	db	15
   809                           
   810                           ;Config register CONFIG7H @ 0x30000D
   811                           ;	Boot Block Table Read Protection bit
   812                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   813   30000D                     	org	3145741
   814   30000D  40                 	db	64
   815                           tosu	equ	0xFFF
   816                           tosh	equ	0xFFE
   817                           tosl	equ	0xFFD
   818                           stkptr	equ	0xFFC
   819                           pclatu	equ	0xFFB
   820                           pclath	equ	0xFFA
   821                           pcl	equ	0xFF9
   822                           tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           tblptrl	equ	0xFF6
   825                           tablat	equ	0xFF5
   826                           prodh	equ	0xFF4
   827                           prodl	equ	0xFF3
   828                           indf0	equ	0xFEF
   829                           postinc0	equ	0xFEE
   830                           postdec0	equ	0xFED
   831                           preinc0	equ	0xFEC
   832                           plusw0	equ	0xFEB
   833                           fsr0h	equ	0xFEA
   834                           fsr0l	equ	0xFE9
   835                           wreg	equ	0xFE8
   836                           indf1	equ	0xFE7
   837                           postinc1	equ	0xFE6
   838                           postdec1	equ	0xFE5
   839                           preinc1	equ	0xFE4
   840                           plusw1	equ	0xFE3
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           bsr	equ	0xFE0
   844                           indf2	equ	0xFDF
   845                           postinc2	equ	0xFDE
   846                           postdec2	equ	0xFDD
   847                           preinc2	equ	0xFDC
   848                           plusw2	equ	0xFDB
   849                           fsr2h	equ	0xFDA
   850                           fsr2l	equ	0xFD9
   851                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Bitwise

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     255
                            _Bitwise
                      _Configuration
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Bitwise                                             12    12      0     255
                                              0 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bitwise
   _Configuration

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C       E       1       14.7%
BITBIGSFRh          2C      0       0      21        0.0%
BITBIGSFRllh        2A      0       0      23        0.0%
BITBIGSFRllll       29      0       0      25        0.0%
BITBIGSFRlh         11      0       0      22        0.0%
BITBIGSFRlllh        4      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E       3        0.0%
DATA                 0      0       E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Jul 26 00:36:02 2023

                     l43 7DDA                       l58 7FFE                       u10 7E00  
                     u11 7DFC                       u20 7E18                       u21 7E14  
                     u40 7E7C                       u41 7E78                       u50 7E92  
                     u34 7E2E                       u51 7E8E                       u35 7E2A  
                     u70 7EF6                       u71 7EF2                       u64 7EA8  
                     u65 7EA4                       u90 7F5A                       u91 7F56  
                     u84 7F0C                       u85 7F08                      l802 7FC2  
                    l810 7D80                      l804 7FDE                      l750 7E50  
                    l742 7E04                      l734 7DAA                      l760 7E80  
                    l744 7E18                      l736 7DDC                      l808 7D7C  
                    l762 7E92                      l746 7E1C                      l754 7E58  
                    l738 7DE4                      l780 7F16                      l764 7E96  
                    l772 7ED2                      l756 7E60                      l748 7E38  
                    l790 7F5E                      l774 7EDA                      l766 7EB2  
                    l792 7F7A                      l784 7F36                      l768 7ECA  
                    l786 7F3E                      l778 7EFA                      l796 7F9A  
                    l798 7FA2                      u110 7FBE                      u111 7FBA  
                    u104 7F70                      u105 7F6C                      u124 7FD4  
                    u125 7FD0                      u507 7EBC                      u517 7F20  
                    u527 7F84                      u537 7FE8                      u497 7E42  
                    wreg 0FE8                     _LATA 0F89                     _LATB 0F8A  
                   _LATC 0F8B                     _LATD 0F8C                     _LATE 0F8D  
                   _Time 000D                     _main 7D7C                     start 0000  
        __end_of_Bitwise 8000             ___param_bank 0000                    ?_main 0001  
                  _TRISA 0F92                    _TRISB 0F93                    _TRISC 0F94  
                  _TRISD 0F95                    _TRISE 0F96                    tablat 0FF5  
                  status 0FD8          __initialization 7D8C             __end_of_main 7D8C  
                 ??_main 000D            __activetblptr 0000                   _ADCON1 0FC1  
                 _OSCCON 0FD3                ??_Bitwise 0001                   isa$std 0001  
           __pdataCOMRAM 000D                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 7DA4  
          ___rparam_used 0001           __pcstackCOMRAM 0001    __end_of_Configuration 7DDC  
                _Bitwise 7DDC                  __Hparam 0000                  __Lparam 0000  
                __pcinit 7D8C                  __ramtop 0800                  __ptext0 7D7C  
                __ptext1 7DAA                  __ptext2 7DDC     end_of_initialization 7DA4  
          __pidataCOMRAM 7D7A      start_initialization 7D8C                 ?_Bitwise 0001  
               Bitwise@A 0009                 Bitwise@B 000B                 Bitwise@C 0003  
               Bitwise@D 0005                 Bitwise@E 0007            _Configuration 7DAA  
               __Hrparam 0000                 __Lrparam 0000           ?_Configuration 0001  
               isa$xinst 0000          ??_Configuration 0001  
