

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Aug 21 15:56:42 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17   000000                     
    18                           ; Generated 09/02/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   007D40                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _Time
    58   007D40  0190               	dw	400
    59   000000                     _LATA	set	3977
    60   000000                     _TRISA	set	3986
    61   000000                     _ADCON1	set	4033
    62   000000                     _OSCCON	set	4051
    63   000000                     _TRISE	set	3990
    64   000000                     _TRISD	set	3989
    65   000000                     _TRISC	set	3988
    66   000000                     _TRISB	set	3987
    67   000000                     _LATE	set	3981
    68   000000                     _LATD	set	3980
    69   000000                     _LATC	set	3979
    70   000000                     _LATB	set	3978
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   007D52                     __pcinit:
    76                           	callstack 0
    77   007D52                     start_initialization:
    78                           	callstack 0
    79   007D52                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (2 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84   007D52  0E40               	movlw	low __pidataCOMRAM
    85   007D54  6EF6               	movwf	tblptrl,c
    86   007D56  0E7D               	movlw	high __pidataCOMRAM
    87   007D58  6EF7               	movwf	tblptrh,c
    88   007D5A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89   007D5C  6EF8               	movwf	tblptru,c
    90   007D5E  0009               	tblrd		*+	;fetch initializer
    91   007D60  CFF5 F00D          	movff	tablat,__pdataCOMRAM
    92   007D64  0009               	tblrd		*+	;fetch initializer
    93   007D66  CFF5 F00E          	movff	tablat,__pdataCOMRAM+1
    94   007D6A                     end_of_initialization:
    95                           	callstack 0
    96   007D6A                     __end_of__initialization:
    97                           	callstack 0
    98   007D6A  0100               	movlb	0
    99   007D6C  EFA1  F03E         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	bssCOMRAM
   102   000000                     __pbssCOMRAM:
   103                           	callstack 0
   104   000000                     _var_1:
   105                           	callstack 0
   106   000000                     	ds	0
   107                           
   108                           	psect	dataCOMRAM
   109   00000D                     __pdataCOMRAM:
   110                           	callstack 0
   111   00000D                     _Time:
   112                           	callstack 0
   113   00000D                     	ds	2
   114                           
   115                           	psect	cstackCOMRAM
   116   000001                     __pcstackCOMRAM:
   117                           	callstack 0
   118   000001                     ??_Hard_Bitwise:
   119   000001                     
   120                           ; 1 bytes @ 0x0
   121   000001                     	ds	2
   122   000003                     Hard_Bitwise@D:
   123                           	callstack 0
   124                           
   125                           ; 2 bytes @ 0x2
   126   000003                     	ds	2
   127   000005                     Hard_Bitwise@E:
   128                           	callstack 0
   129                           
   130                           ; 2 bytes @ 0x4
   131   000005                     	ds	2
   132   000007                     Hard_Bitwise@A:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x6
   136   000007                     	ds	2
   137   000009                     Hard_Bitwise@B:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x8
   141   000009                     	ds	2
   142   00000B                     Hard_Bitwise@C:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0xA
   146   00000B                     	ds	2
   147   00000D                     
   148                           ; 1 bytes @ 0xC
   149 ;;
   150 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   151 ;;
   152 ;; *************** function _main *****************
   153 ;; Defined at:
   154 ;;		line 32 in file "main.c"
   155 ;; Parameters:    Size  Location     Type
   156 ;;		None
   157 ;; Auto vars:     Size  Location     Type
   158 ;;		None
   159 ;; Return value:  Size  Location     Type
   160 ;;                  1    wreg      void 
   161 ;; Registers used:
   162 ;;		wreg, status,2, status,0, cstack
   163 ;; Tracked objects:
   164 ;;		On entry : 0/0
   165 ;;		On exit  : 0/0
   166 ;;		Unchanged: 0/0
   167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   168 ;;      Params:         0       0       0       0       0       0       0       0       0
   169 ;;      Locals:         0       0       0       0       0       0       0       0       0
   170 ;;      Temps:          0       0       0       0       0       0       0       0       0
   171 ;;      Totals:         0       0       0       0       0       0       0       0       0
   172 ;;Total ram usage:        0 bytes
   173 ;; Hardware stack levels required when called: 1
   174 ;; This function calls:
   175 ;;		_Configuration
   176 ;;		_Hard_Bitwise
   177 ;; This function is called by:
   178 ;;		Startup code after reset
   179 ;; This function uses a non-reentrant model
   180 ;;
   181                           
   182                           	psect	text0
   183   007D42                     __ptext0:
   184                           	callstack 0
   185   007D42                     _main:
   186                           	callstack 30
   187   007D42                     
   188                           ;main.c: 35:     Configuration();
   189   007D42  ECB8  F03E         	call	_Configuration	;wreg free
   190   007D46                     l830:
   191                           
   192                           ;main.c: 40:         Hard_Bitwise();
   193   007D46  ECD1  F03E         	call	_Hard_Bitwise	;wreg free
   194   007D4A  EFA3  F03E         	goto	l830
   195   007D4E  EF00  F000         	goto	start
   196   007D52                     __end_of_main:
   197                           	callstack 0
   198                           
   199 ;; *************** function _Hard_Bitwise *****************
   200 ;; Defined at:
   201 ;;		line 70 in file "main.c"
   202 ;; Parameters:    Size  Location     Type
   203 ;;		None
   204 ;; Auto vars:     Size  Location     Type
   205 ;;  E               2    4[COMRAM] int 
   206 ;;  D               2    2[COMRAM] int 
   207 ;;  C               2   10[COMRAM] int 
   208 ;;  B               2    8[COMRAM] int 
   209 ;;  A               2    6[COMRAM] int 
   210 ;; Return value:  Size  Location     Type
   211 ;;                  1    wreg      void 
   212 ;; Registers used:
   213 ;;		wreg, status,2, status,0
   214 ;; Tracked objects:
   215 ;;		On entry : 0/0
   216 ;;		On exit  : 0/0
   217 ;;		Unchanged: 0/0
   218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   219 ;;      Params:         0       0       0       0       0       0       0       0       0
   220 ;;      Locals:        10       0       0       0       0       0       0       0       0
   221 ;;      Temps:          2       0       0       0       0       0       0       0       0
   222 ;;      Totals:        12       0       0       0       0       0       0       0       0
   223 ;;Total ram usage:       12 bytes
   224 ;; Hardware stack levels used: 1
   225 ;; This function calls:
   226 ;;		Nothing
   227 ;; This function is called by:
   228 ;;		_main
   229 ;; This function uses a non-reentrant model
   230 ;;
   231                           
   232                           	psect	text1
   233   007DA2                     __ptext1:
   234                           	callstack 0
   235   007DA2                     _Hard_Bitwise:
   236                           	callstack 30
   237   007DA2                     
   238                           ;main.c: 77:     for (int A = 0; A < 7; A++) {
   239   007DA2  0E00               	movlw	0
   240   007DA4  6E08               	movwf	(Hard_Bitwise@A+1)^0,c
   241   007DA6  0E00               	movlw	0
   242   007DA8  6E07               	movwf	Hard_Bitwise@A^0,c
   243   007DAA                     l746:
   244   007DAA  BE08               	btfsc	(Hard_Bitwise@A+1)^0,7,c
   245   007DAC  EFE1  F03E         	goto	u11
   246   007DB0  5008               	movf	(Hard_Bitwise@A+1)^0,w,c
   247   007DB2  E109               	bnz	u10
   248   007DB4  0E07               	movlw	7
   249   007DB6  5C07               	subwf	Hard_Bitwise@A^0,w,c
   250   007DB8  A0D8               	btfss	status,0,c
   251   007DBA  EFE1  F03E         	goto	u11
   252   007DBE  EFE3  F03E         	goto	u10
   253   007DC2                     u11:
   254   007DC2  EFE5  F03E         	goto	l750
   255   007DC6                     u10:
   256   007DC6  EF0F  F03F         	goto	l762
   257   007DCA                     l750:
   258                           
   259                           ;main.c: 79:         if (A == 6) {
   260   007DCA  0E06               	movlw	6
   261   007DCC  1807               	xorwf	Hard_Bitwise@A^0,w,c
   262   007DCE  1008               	iorwf	(Hard_Bitwise@A+1)^0,w,c
   263   007DD0  A4D8               	btfss	status,2,c
   264   007DD2  EFED  F03E         	goto	u21
   265   007DD6  EFEF  F03E         	goto	u20
   266   007DDA                     u21:
   267   007DDA  EFF1  F03E         	goto	l754
   268   007DDE                     u20:
   269   007DDE                     
   270                           ;main.c: 80:             LATB = 0x01;
   271   007DDE  0E01               	movlw	1
   272   007DE0  6E8A               	movwf	138,c	;volatile
   273   007DE2                     l754:
   274                           
   275                           ;main.c: 83:         LATA = (0x03 << A);
   276   007DE2  C007  F001         	movff	Hard_Bitwise@A,??_Hard_Bitwise
   277   007DE6  0E03               	movlw	3
   278   007DE8  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   279   007DEA  2A01               	incf	??_Hard_Bitwise^0,f,c
   280   007DEC  EFFA  F03E         	goto	u34
   281   007DF0                     u35:
   282   007DF0  90D8               	bcf	status,0,c
   283   007DF2  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   284   007DF4                     u34:
   285   007DF4  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   286   007DF6  EFF8  F03E         	goto	u35
   287   007DFA  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   288   007DFC  6E89               	movwf	137,c	;volatile
   289   007DFE                     
   290                           ;main.c: 84:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   291   007DFE  0E05               	movlw	5
   292   007E00  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   293   007E02  0E0F               	movlw	15
   294   007E04  6E01               	movwf	??_Hard_Bitwise^0,c
   295   007E06  0EF1               	movlw	241
   296   007E08                     u517:
   297   007E08  2EE8               	decfsz	wreg,f,c
   298   007E0A  D7FE               	bra	u517
   299   007E0C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   300   007E0E  D7FC               	bra	u517
   301   007E10  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   302   007E12  D7FA               	bra	u517
   303   007E14  F000               	nop	
   304   007E16                     
   305                           ;main.c: 86:     }
   306   007E16  4A07               	infsnz	Hard_Bitwise@A^0,f,c
   307   007E18  2A08               	incf	(Hard_Bitwise@A+1)^0,f,c
   308   007E1A  EFD5  F03E         	goto	l746
   309   007E1E                     l762:
   310                           
   311                           ;main.c: 89:     for (int B = 0; B < 8; B++) {
   312   007E1E  0E00               	movlw	0
   313   007E20  6E0A               	movwf	(Hard_Bitwise@B+1)^0,c
   314   007E22  0E00               	movlw	0
   315   007E24  6E09               	movwf	Hard_Bitwise@B^0,c
   316   007E26                     l764:
   317   007E26  BE0A               	btfsc	(Hard_Bitwise@B+1)^0,7,c
   318   007E28  EF1F  F03F         	goto	u41
   319   007E2C  500A               	movf	(Hard_Bitwise@B+1)^0,w,c
   320   007E2E  E109               	bnz	u40
   321   007E30  0E08               	movlw	8
   322   007E32  5C09               	subwf	Hard_Bitwise@B^0,w,c
   323   007E34  A0D8               	btfss	status,0,c
   324   007E36  EF1F  F03F         	goto	u41
   325   007E3A  EF21  F03F         	goto	u40
   326   007E3E                     u41:
   327   007E3E  EF23  F03F         	goto	l768
   328   007E42                     u40:
   329   007E42  EF4F  F03F         	goto	l782
   330   007E46                     l768:
   331                           
   332                           ;main.c: 91:         LATA = 0x00;
   333   007E46  0E00               	movlw	0
   334   007E48  6E89               	movwf	137,c	;volatile
   335   007E4A                     
   336                           ;main.c: 93:         if (B == 7) {
   337   007E4A  0E07               	movlw	7
   338   007E4C  1809               	xorwf	Hard_Bitwise@B^0,w,c
   339   007E4E  100A               	iorwf	(Hard_Bitwise@B+1)^0,w,c
   340   007E50  A4D8               	btfss	status,2,c
   341   007E52  EF2D  F03F         	goto	u51
   342   007E56  EF2F  F03F         	goto	u50
   343   007E5A                     u51:
   344   007E5A  EF31  F03F         	goto	l774
   345   007E5E                     u50:
   346   007E5E                     
   347                           ;main.c: 94:             LATC = 0x01;
   348   007E5E  0E01               	movlw	1
   349   007E60  6E8B               	movwf	139,c	;volatile
   350   007E62                     l774:
   351                           
   352                           ;main.c: 97:         LATB = (0x03 << B);
   353   007E62  C009  F001         	movff	Hard_Bitwise@B,??_Hard_Bitwise
   354   007E66  0E03               	movlw	3
   355   007E68  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   356   007E6A  2A01               	incf	??_Hard_Bitwise^0,f,c
   357   007E6C  EF3A  F03F         	goto	u64
   358   007E70                     u65:
   359   007E70  90D8               	bcf	status,0,c
   360   007E72  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   361   007E74                     u64:
   362   007E74  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   363   007E76  EF38  F03F         	goto	u65
   364   007E7A  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   365   007E7C  6E8A               	movwf	138,c	;volatile
   366   007E7E                     
   367                           ;main.c: 98:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   368   007E7E  0E05               	movlw	5
   369   007E80  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   370   007E82  0E0F               	movlw	15
   371   007E84  6E01               	movwf	??_Hard_Bitwise^0,c
   372   007E86  0EF1               	movlw	241
   373   007E88                     u527:
   374   007E88  2EE8               	decfsz	wreg,f,c
   375   007E8A  D7FE               	bra	u527
   376   007E8C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   377   007E8E  D7FC               	bra	u527
   378   007E90  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   379   007E92  D7FA               	bra	u527
   380   007E94  F000               	nop	
   381   007E96                     
   382                           ;main.c: 100:     }
   383   007E96  4A09               	infsnz	Hard_Bitwise@B^0,f,c
   384   007E98  2A0A               	incf	(Hard_Bitwise@B+1)^0,f,c
   385   007E9A  EF13  F03F         	goto	l764
   386   007E9E                     l782:
   387                           
   388                           ;main.c: 103:     for (int C = 0; C < 7; C++) {
   389   007E9E  0E00               	movlw	0
   390   007EA0  6E0C               	movwf	(Hard_Bitwise@C+1)^0,c
   391   007EA2  0E00               	movlw	0
   392   007EA4  6E0B               	movwf	Hard_Bitwise@C^0,c
   393   007EA6                     l784:
   394   007EA6  BE0C               	btfsc	(Hard_Bitwise@C+1)^0,7,c
   395   007EA8  EF5F  F03F         	goto	u71
   396   007EAC  500C               	movf	(Hard_Bitwise@C+1)^0,w,c
   397   007EAE  E109               	bnz	u70
   398   007EB0  0E07               	movlw	7
   399   007EB2  5C0B               	subwf	Hard_Bitwise@C^0,w,c
   400   007EB4  A0D8               	btfss	status,0,c
   401   007EB6  EF5F  F03F         	goto	u71
   402   007EBA  EF61  F03F         	goto	u70
   403   007EBE                     u71:
   404   007EBE  EF63  F03F         	goto	l788
   405   007EC2                     u70:
   406   007EC2  EF9B  F03F         	goto	l804
   407   007EC6                     l788:
   408                           
   409                           ;main.c: 105:         if (C == 2) {
   410   007EC6  0E02               	movlw	2
   411   007EC8  180B               	xorwf	Hard_Bitwise@C^0,w,c
   412   007ECA  100C               	iorwf	(Hard_Bitwise@C+1)^0,w,c
   413   007ECC  A4D8               	btfss	status,2,c
   414   007ECE  EF6B  F03F         	goto	u81
   415   007ED2  EF6D  F03F         	goto	u80
   416   007ED6                     u81:
   417   007ED6  EF7B  F03F         	goto	l794
   418   007EDA                     u80:
   419   007EDA                     
   420                           ;main.c: 106:             LATC = 0x14;
   421   007EDA  0E14               	movlw	20
   422   007EDC  6E8B               	movwf	139,c	;volatile
   423   007EDE                     
   424                           ;main.c: 107:             _delay((unsigned long)((Time)*(8000000/4000.0)));
   425   007EDE  0E05               	movlw	5
   426   007EE0  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   427   007EE2  0E0F               	movlw	15
   428   007EE4  6E01               	movwf	??_Hard_Bitwise^0,c
   429   007EE6  0EF1               	movlw	241
   430   007EE8                     u537:
   431   007EE8  2EE8               	decfsz	wreg,f,c
   432   007EEA  D7FE               	bra	u537
   433   007EEC  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   434   007EEE  D7FC               	bra	u537
   435   007EF0  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   436   007EF2  D7FA               	bra	u537
   437   007EF4  F000               	nop	
   438   007EF6                     l794:
   439                           
   440                           ;main.c: 110:         LATB = 0x00;
   441   007EF6  0E00               	movlw	0
   442   007EF8  6E8A               	movwf	138,c	;volatile
   443   007EFA                     
   444                           ;main.c: 112:         LATC = (0x03 << C);
   445   007EFA  C00B  F001         	movff	Hard_Bitwise@C,??_Hard_Bitwise
   446   007EFE  0E03               	movlw	3
   447   007F00  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   448   007F02  2A01               	incf	??_Hard_Bitwise^0,f,c
   449   007F04  EF86  F03F         	goto	u94
   450   007F08                     u95:
   451   007F08  90D8               	bcf	status,0,c
   452   007F0A  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   453   007F0C                     u94:
   454   007F0C  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   455   007F0E  EF84  F03F         	goto	u95
   456   007F12  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   457   007F14  6E8B               	movwf	139,c	;volatile
   458   007F16                     
   459                           ;main.c: 113:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   460   007F16  0E05               	movlw	5
   461   007F18  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   462   007F1A  0E0F               	movlw	15
   463   007F1C  6E01               	movwf	??_Hard_Bitwise^0,c
   464   007F1E  0EF1               	movlw	241
   465   007F20                     u547:
   466   007F20  2EE8               	decfsz	wreg,f,c
   467   007F22  D7FE               	bra	u547
   468   007F24  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   469   007F26  D7FC               	bra	u547
   470   007F28  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   471   007F2A  D7FA               	bra	u547
   472   007F2C  F000               	nop	
   473   007F2E                     
   474                           ;main.c: 115:     }
   475   007F2E  4A0B               	infsnz	Hard_Bitwise@C^0,f,c
   476   007F30  2A0C               	incf	(Hard_Bitwise@C+1)^0,f,c
   477   007F32  EF53  F03F         	goto	l784
   478   007F36                     l804:
   479                           
   480                           ;main.c: 118:     for (int D = 0; D < 7; D++) {
   481   007F36  0E00               	movlw	0
   482   007F38  6E04               	movwf	(Hard_Bitwise@D+1)^0,c
   483   007F3A  0E00               	movlw	0
   484   007F3C  6E03               	movwf	Hard_Bitwise@D^0,c
   485   007F3E                     l806:
   486   007F3E  BE04               	btfsc	(Hard_Bitwise@D+1)^0,7,c
   487   007F40  EFAB  F03F         	goto	u101
   488   007F44  5004               	movf	(Hard_Bitwise@D+1)^0,w,c
   489   007F46  E109               	bnz	u100
   490   007F48  0E07               	movlw	7
   491   007F4A  5C03               	subwf	Hard_Bitwise@D^0,w,c
   492   007F4C  A0D8               	btfss	status,0,c
   493   007F4E  EFAB  F03F         	goto	u101
   494   007F52  EFAD  F03F         	goto	u100
   495   007F56                     u101:
   496   007F56  EFAF  F03F         	goto	l810
   497   007F5A                     u100:
   498   007F5A  EFCD  F03F         	goto	l816
   499   007F5E                     l810:
   500                           
   501                           ;main.c: 119:         LATD = (0x03 << D);
   502   007F5E  C003  F001         	movff	Hard_Bitwise@D,??_Hard_Bitwise
   503   007F62  0E03               	movlw	3
   504   007F64  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   505   007F66  2A01               	incf	??_Hard_Bitwise^0,f,c
   506   007F68  EFB8  F03F         	goto	u114
   507   007F6C                     u115:
   508   007F6C  90D8               	bcf	status,0,c
   509   007F6E  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   510   007F70                     u114:
   511   007F70  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   512   007F72  EFB6  F03F         	goto	u115
   513   007F76  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   514   007F78  6E8C               	movwf	140,c	;volatile
   515   007F7A                     
   516                           ;main.c: 120:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   517   007F7A  0E05               	movlw	5
   518   007F7C  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   519   007F7E  0E0F               	movlw	15
   520   007F80  6E01               	movwf	??_Hard_Bitwise^0,c
   521   007F82  0EF1               	movlw	241
   522   007F84                     u557:
   523   007F84  2EE8               	decfsz	wreg,f,c
   524   007F86  D7FE               	bra	u557
   525   007F88  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   526   007F8A  D7FC               	bra	u557
   527   007F8C  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   528   007F8E  D7FA               	bra	u557
   529   007F90  F000               	nop	
   530                           
   531                           ;main.c: 121:     }
   532   007F92  4A03               	infsnz	Hard_Bitwise@D^0,f,c
   533   007F94  2A04               	incf	(Hard_Bitwise@D+1)^0,f,c
   534   007F96  EF9F  F03F         	goto	l806
   535   007F9A                     l816:
   536                           
   537                           ;main.c: 124:     for (int E = 0; E < 3; E++) {
   538   007F9A  0E00               	movlw	0
   539   007F9C  6E06               	movwf	(Hard_Bitwise@E+1)^0,c
   540   007F9E  0E00               	movlw	0
   541   007FA0  6E05               	movwf	Hard_Bitwise@E^0,c
   542   007FA2                     l818:
   543   007FA2  BE06               	btfsc	(Hard_Bitwise@E+1)^0,7,c
   544   007FA4  EFDD  F03F         	goto	u121
   545   007FA8  5006               	movf	(Hard_Bitwise@E+1)^0,w,c
   546   007FAA  E109               	bnz	u120
   547   007FAC  0E03               	movlw	3
   548   007FAE  5C05               	subwf	Hard_Bitwise@E^0,w,c
   549   007FB0  A0D8               	btfss	status,0,c
   550   007FB2  EFDD  F03F         	goto	u121
   551   007FB6  EFDF  F03F         	goto	u120
   552   007FBA                     u121:
   553   007FBA  EFE1  F03F         	goto	l822
   554   007FBE                     u120:
   555   007FBE  EFFF  F03F         	goto	l61
   556   007FC2                     l822:
   557                           
   558                           ;main.c: 125:         LATE = (0x01 << E);
   559   007FC2  C005  F001         	movff	Hard_Bitwise@E,??_Hard_Bitwise
   560   007FC6  0E01               	movlw	1
   561   007FC8  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   562   007FCA  2A01               	incf	??_Hard_Bitwise^0,f,c
   563   007FCC  EFEA  F03F         	goto	u134
   564   007FD0                     u135:
   565   007FD0  90D8               	bcf	status,0,c
   566   007FD2  3602               	rlcf	(??_Hard_Bitwise+1)^0,f,c
   567   007FD4                     u134:
   568   007FD4  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   569   007FD6  EFE8  F03F         	goto	u135
   570   007FDA  5002               	movf	(??_Hard_Bitwise+1)^0,w,c
   571   007FDC  6E8D               	movwf	141,c	;volatile
   572   007FDE                     
   573                           ;main.c: 126:         _delay((unsigned long)((Time)*(8000000/4000.0)));
   574   007FDE  0E05               	movlw	5
   575   007FE0  6E02               	movwf	(??_Hard_Bitwise+1)^0,c
   576   007FE2  0E0F               	movlw	15
   577   007FE4  6E01               	movwf	??_Hard_Bitwise^0,c
   578   007FE6  0EF1               	movlw	241
   579   007FE8                     u567:
   580   007FE8  2EE8               	decfsz	wreg,f,c
   581   007FEA  D7FE               	bra	u567
   582   007FEC  2E01               	decfsz	??_Hard_Bitwise^0,f,c
   583   007FEE  D7FC               	bra	u567
   584   007FF0  2E02               	decfsz	(??_Hard_Bitwise+1)^0,f,c
   585   007FF2  D7FA               	bra	u567
   586   007FF4  F000               	nop	
   587                           
   588                           ;main.c: 127:     }
   589   007FF6  4A05               	infsnz	Hard_Bitwise@E^0,f,c
   590   007FF8  2A06               	incf	(Hard_Bitwise@E+1)^0,f,c
   591   007FFA  EFD1  F03F         	goto	l818
   592   007FFE                     l61:
   593   007FFE  0012               	return		;funcret
   594   008000                     __end_of_Hard_Bitwise:
   595                           	callstack 0
   596                           
   597 ;; *************** function _Configuration *****************
   598 ;; Defined at:
   599 ;;		line 48 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, status,2
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   613 ;;      Params:         0       0       0       0       0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0
   616 ;;      Totals:         0       0       0       0       0       0       0       0       0
   617 ;;Total ram usage:        0 bytes
   618 ;; Hardware stack levels used: 1
   619 ;; This function calls:
   620 ;;		Nothing
   621 ;; This function is called by:
   622 ;;		_main
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text2
   627   007D70                     __ptext2:
   628                           	callstack 0
   629   007D70                     _Configuration:
   630                           	callstack 30
   631   007D70                     
   632                           ;main.c: 50:     OSCCON = 0x72;
   633   007D70  0E72               	movlw	114
   634   007D72  6ED3               	movwf	211,c	;volatile
   635                           
   636                           ;main.c: 51:     ADCON1 = 0x0F;
   637   007D74  0E0F               	movlw	15
   638   007D76  6EC1               	movwf	193,c	;volatile
   639                           
   640                           ;main.c: 54:     TRISA = 0x00;
   641   007D78  0E00               	movlw	0
   642   007D7A  6E92               	movwf	146,c	;volatile
   643                           
   644                           ;main.c: 55:     TRISB = 0x00;
   645   007D7C  0E00               	movlw	0
   646   007D7E  6E93               	movwf	147,c	;volatile
   647                           
   648                           ;main.c: 56:     TRISC = 0x00;
   649   007D80  0E00               	movlw	0
   650   007D82  6E94               	movwf	148,c	;volatile
   651                           
   652                           ;main.c: 57:     TRISD = 0x00;
   653   007D84  0E00               	movlw	0
   654   007D86  6E95               	movwf	149,c	;volatile
   655                           
   656                           ;main.c: 58:     TRISE = 0x00;
   657   007D88  0E00               	movlw	0
   658   007D8A  6E96               	movwf	150,c	;volatile
   659                           
   660                           ;main.c: 61:     LATA = 0x00;
   661   007D8C  0E00               	movlw	0
   662   007D8E  6E89               	movwf	137,c	;volatile
   663                           
   664                           ;main.c: 62:     LATB = 0x00;
   665   007D90  0E00               	movlw	0
   666   007D92  6E8A               	movwf	138,c	;volatile
   667                           
   668                           ;main.c: 63:     LATC = 0x00;
   669   007D94  0E00               	movlw	0
   670   007D96  6E8B               	movwf	139,c	;volatile
   671                           
   672                           ;main.c: 64:     LATD = 0x00;
   673   007D98  0E00               	movlw	0
   674   007D9A  6E8C               	movwf	140,c	;volatile
   675                           
   676                           ;main.c: 65:     LATE = 0x00;
   677   007D9C  0E00               	movlw	0
   678   007D9E  6E8D               	movwf	141,c	;volatile
   679   007DA0  0012               	return		;funcret
   680   007DA2                     __end_of_Configuration:
   681                           	callstack 0
   682   000000                     
   683                           	psect	rparam
   684   000000                     
   685                           	psect	idloc
   686                           
   687                           ;Config register IDLOC0 @ 0x200000
   688                           ;	unspecified, using default values
   689   200000                     	org	2097152
   690   200000  FF                 	db	255
   691                           
   692                           ;Config register IDLOC1 @ 0x200001
   693                           ;	unspecified, using default values
   694   200001                     	org	2097153
   695   200001  FF                 	db	255
   696                           
   697                           ;Config register IDLOC2 @ 0x200002
   698                           ;	unspecified, using default values
   699   200002                     	org	2097154
   700   200002  FF                 	db	255
   701                           
   702                           ;Config register IDLOC3 @ 0x200003
   703                           ;	unspecified, using default values
   704   200003                     	org	2097155
   705   200003  FF                 	db	255
   706                           
   707                           ;Config register IDLOC4 @ 0x200004
   708                           ;	unspecified, using default values
   709   200004                     	org	2097156
   710   200004  FF                 	db	255
   711                           
   712                           ;Config register IDLOC5 @ 0x200005
   713                           ;	unspecified, using default values
   714   200005                     	org	2097157
   715   200005  FF                 	db	255
   716                           
   717                           ;Config register IDLOC6 @ 0x200006
   718                           ;	unspecified, using default values
   719   200006                     	org	2097158
   720   200006  FF                 	db	255
   721                           
   722                           ;Config register IDLOC7 @ 0x200007
   723                           ;	unspecified, using default values
   724   200007                     	org	2097159
   725   200007  FF                 	db	255
   726                           
   727                           	psect	config
   728                           
   729                           ;Config register CONFIG1L @ 0x300000
   730                           ;	PLL Prescaler Selection bits
   731                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   732                           ;	System Clock Postscaler Selection bits
   733                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   734                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   735                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   736   300000                     	org	3145728
   737   300000  00                 	db	0
   738                           
   739                           ;Config register CONFIG1H @ 0x300001
   740                           ;	Oscillator Selection bits
   741                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
   742                           ;	Fail-Safe Clock Monitor Enable bit
   743                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   744                           ;	Internal/External Oscillator Switchover bit
   745                           ;	IESO = OFF, Oscillator Switchover mode disabled
   746   300001                     	org	3145729
   747   300001  08                 	db	8
   748                           
   749                           ;Config register CONFIG2L @ 0x300002
   750                           ;	Power-up Timer Enable bit
   751                           ;	PWRT = OFF, PWRT disabled
   752                           ;	Brown-out Reset Enable bits
   753                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   754                           ;	Brown-out Reset Voltage bits
   755                           ;	BORV = 3, Minimum setting 2.05V
   756                           ;	USB Voltage Regulator Enable bit
   757                           ;	VREGEN = OFF, USB voltage regulator disabled
   758   300002                     	org	3145730
   759   300002  19                 	db	25
   760                           
   761                           ;Config register CONFIG2H @ 0x300003
   762                           ;	Watchdog Timer Enable bit
   763                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   764                           ;	Watchdog Timer Postscale Select bits
   765                           ;	WDTPS = 32768, 1:32768
   766   300003                     	org	3145731
   767   300003  1E                 	db	30
   768                           
   769                           ; Padding undefined space
   770   300004                     	org	3145732
   771   300004  FF                 	db	255
   772                           
   773                           ;Config register CONFIG3H @ 0x300005
   774                           ;	CCP2 MUX bit
   775                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   776                           ;	PORTB A/D Enable bit
   777                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   778                           ;	Low-Power Timer 1 Oscillator Enable bit
   779                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   780                           ;	MCLR Pin Enable bit
   781                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   782   300005                     	org	3145733
   783   300005  83                 	db	131
   784                           
   785                           ;Config register CONFIG4L @ 0x300006
   786                           ;	Stack Full/Underflow Reset Enable bit
   787                           ;	STVREN = ON, Stack full/underflow will cause Reset
   788                           ;	Single-Supply ICSP Enable bit
   789                           ;	LVP = OFF, Single-Supply ICSP disabled
   790                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   791                           ;	ICPRT = OFF, ICPORT disabled
   792                           ;	Extended Instruction Set Enable bit
   793                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   794                           ;	Background Debugger Enable bit
   795                           ;	DEBUG = 0x1, unprogrammed default
   796   300006                     	org	3145734
   797   300006  81                 	db	129
   798                           
   799                           ; Padding undefined space
   800   300007                     	org	3145735
   801   300007  FF                 	db	255
   802                           
   803                           ;Config register CONFIG5L @ 0x300008
   804                           ;	Code Protection bit
   805                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   806                           ;	Code Protection bit
   807                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   808                           ;	Code Protection bit
   809                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   810                           ;	Code Protection bit
   811                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   812   300008                     	org	3145736
   813   300008  0F                 	db	15
   814                           
   815                           ;Config register CONFIG5H @ 0x300009
   816                           ;	Boot Block Code Protection bit
   817                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   818                           ;	Data EEPROM Code Protection bit
   819                           ;	CPD = OFF, Data EEPROM is not code-protected
   820   300009                     	org	3145737
   821   300009  C0                 	db	192
   822                           
   823                           ;Config register CONFIG6L @ 0x30000A
   824                           ;	Write Protection bit
   825                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   826                           ;	Write Protection bit
   827                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   828                           ;	Write Protection bit
   829                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   830                           ;	Write Protection bit
   831                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   832   30000A                     	org	3145738
   833   30000A  0F                 	db	15
   834                           
   835                           ;Config register CONFIG6H @ 0x30000B
   836                           ;	Configuration Register Write Protection bit
   837                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   838                           ;	Boot Block Write Protection bit
   839                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   840                           ;	Data EEPROM Write Protection bit
   841                           ;	WRTD = OFF, Data EEPROM is not write-protected
   842   30000B                     	org	3145739
   843   30000B  E0                 	db	224
   844                           
   845                           ;Config register CONFIG7L @ 0x30000C
   846                           ;	Table Read Protection bit
   847                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   848                           ;	Table Read Protection bit
   849                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   850                           ;	Table Read Protection bit
   851                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   852                           ;	Table Read Protection bit
   853                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   854   30000C                     	org	3145740
   855   30000C  0F                 	db	15
   856                           
   857                           ;Config register CONFIG7H @ 0x30000D
   858                           ;	Boot Block Table Read Protection bit
   859                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   860   30000D                     	org	3145741
   861   30000D  40                 	db	64
   862                           tosu	equ	0xFFF
   863                           tosh	equ	0xFFE
   864                           tosl	equ	0xFFD
   865                           stkptr	equ	0xFFC
   866                           pclatu	equ	0xFFB
   867                           pclath	equ	0xFFA
   868                           pcl	equ	0xFF9
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           prodh	equ	0xFF4
   874                           prodl	equ	0xFF3
   875                           indf0	equ	0xFEF
   876                           postinc0	equ	0xFEE
   877                           postdec0	equ	0xFED
   878                           preinc0	equ	0xFEC
   879                           plusw0	equ	0xFEB
   880                           fsr0h	equ	0xFEA
   881                           fsr0l	equ	0xFE9
   882                           wreg	equ	0xFE8
   883                           indf1	equ	0xFE7
   884                           postinc1	equ	0xFE6
   885                           postdec1	equ	0xFE5
   886                           preinc1	equ	0xFE4
   887                           plusw1	equ	0xFE3
   888                           fsr1h	equ	0xFE2
   889                           fsr1l	equ	0xFE1
   890                           bsr	equ	0xFE0
   891                           indf2	equ	0xFDF
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           preinc2	equ	0xFDC
   895                           plusw2	equ	0xFDB
   896                           fsr2h	equ	0xFDA
   897                           fsr2l	equ	0xFD9
   898                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Hard_Bitwise

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     270
                      _Configuration
                       _Hard_Bitwise
 ---------------------------------------------------------------------------------
 (1) _Hard_Bitwise                                        12    12      0     270
                                              0 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
   _Hard_Bitwise

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C       E       1       14.7%
BITBIGSFRh          2C      0       0      21        0.0%
BITBIGSFRllh        2A      0       0      23        0.0%
BITBIGSFRllll       29      0       0      25        0.0%
BITBIGSFRlh         11      0       0      22        0.0%
BITBIGSFRlllh        4      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E       3        0.0%
DATA                 0      0       E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Aug 21 15:56:42 2023

                     l45 7DA0                       l61 7FFE                       u10 7DC6  
                     u11 7DC2                       u20 7DDE                       u21 7DDA  
                     u40 7E42                       u41 7E3E                       u50 7E5E  
                     u34 7DF4                       u51 7E5A                       u35 7DF0  
                     u70 7EC2                       u71 7EBE                       u80 7EDA  
                     u64 7E74                       u81 7ED6                       u65 7E70  
                     u94 7F0C                       u95 7F08                      l800 7F2E  
                    l810 7F5E                      l812 7F7A                      l804 7F36  
                    l742 7D70                      l822 7FC2                      l806 7F3E  
                    l750 7DCA                      l830 7D46                      l824 7FDE  
                    l816 7F9A                      l752 7DDE                      l744 7DA2  
                    l818 7FA2                      l770 7E4A                      l754 7DE2  
                    l762 7E1E                      l746 7DAA                      l772 7E5E  
                    l764 7E26                      l756 7DFE                      l828 7D42  
                    l790 7EDA                      l774 7E62                      l782 7E9E  
                    l758 7E16                      l792 7EDE                      l784 7EA6  
                    l776 7E7E                      l768 7E46                      l794 7EF6  
                    l778 7E96                      l796 7EFA                      l788 7EC6  
                    l798 7F16                      u100 7F5A                      u101 7F56  
                    u120 7FBE                      u121 7FBA                      u114 7F70  
                    u115 7F6C                      u134 7FD4                      u135 7FD0  
                    u517 7E08                      u527 7E88                      u537 7EE8  
                    u547 7F20                      u557 7F84                      u567 7FE8  
                    wreg 0FE8                     _LATA 0F89                     _LATB 0F8A  
                   _LATC 0F8B                     _LATD 0F8C                     _LATE 0F8D  
                   _Time 000D     __end_of_Hard_Bitwise 8000                     _main 7D42  
                   start 0000             ___param_bank 0000                    ?_main 0001  
                  _TRISA 0F92                    _TRISB 0F93                    _TRISC 0F94  
                  _TRISD 0F95                    _TRISE 0F96                    _var_1 0000  
                  tablat 0FF5                    status 0FD8          __initialization 7D52  
           __end_of_main 7D52                   ??_main 000D            __activetblptr 0000  
                 _ADCON1 0FC1                   _OSCCON 0FD3                   isa$std 0001  
           __pdataCOMRAM 000D                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 7D6A  
          ___rparam_used 0001           __pcstackCOMRAM 0001             _Hard_Bitwise 7DA2  
  __end_of_Configuration 7DA2                  __Hparam 0000                  __Lparam 0000  
                __pcinit 7D52            Hard_Bitwise@A 0007            Hard_Bitwise@B 0009  
          Hard_Bitwise@C 000B            Hard_Bitwise@D 0003            Hard_Bitwise@E 0005  
                __ramtop 0800                  __ptext0 7D42                  __ptext1 7DA2  
                __ptext2 7D70     end_of_initialization 7D6A            __pidataCOMRAM 7D40  
    start_initialization 7D52              __pbssCOMRAM 0000            _Configuration 7D70  
               __Hrparam 0000                 __Lrparam 0000            ?_Hard_Bitwise 0001  
         ?_Configuration 0001                 isa$xinst 0000           ??_Hard_Bitwise 0001  
        ??_Configuration 0001  
