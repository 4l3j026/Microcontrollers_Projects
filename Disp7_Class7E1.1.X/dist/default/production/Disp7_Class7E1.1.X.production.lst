

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Dec 06 23:37:47 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     
    55                           	psect	idataCOMRAM
    56   0001A2                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _Numbers_2
    60   0001A2  BF                 	db	191
    61   0001A3  86                 	db	134
    62   0001A4  DB                 	db	219
    63   0001A5  CF                 	db	207
    64   0001A6  E6                 	db	230
    65   0001A7  ED                 	db	237
    66   0001A8  FD                 	db	253
    67   0001A9  87                 	db	135
    68   0001AA  FF                 	db	255
    69   0001AB  E7                 	db	231
    70                           
    71                           ;initializer for _Display
    72   0001AC  00                 	db	0
    73   0001AD  01                 	db	1
    74   0001AE  02                 	db	2
    75   0001AF  04                 	db	4
    76   0001B0  08                 	db	8
    77   000000                     _INT0IF	set	32657
    78   000000                     _LATA	set	3977
    79   000000                     _TRISA	set	3986
    80   000000                     _ADCON1	set	4033
    81   000000                     _OSCCON	set	4051
    82   000000                     _INTCON2bits	set	4081
    83   000000                     _INTCONbits	set	4082
    84   000000                     _RCONbits	set	4048
    85   000000                     _TRISD	set	3989
    86   000000                     _TRISB	set	3987
    87   000000                     _LATD	set	3980
    88   000000                     _LATB	set	3978
    89                           
    90                           ; #config settings
    91                           
    92                           	psect	cinit
    93   000128                     __pcinit:
    94                           	callstack 0
    95   000128                     start_initialization:
    96                           	callstack 0
    97   000128                     __initialization:
    98                           	callstack 0
    99                           
   100                           ; Initialize objects allocated to COMRAM (15 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102   000128  0EA2               	movlw	low __pidataCOMRAM
   103   00012A  6EF6               	movwf	tblptrl,c
   104   00012C  0E01               	movlw	high __pidataCOMRAM
   105   00012E  6EF7               	movwf	tblptrh,c
   106   000130  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107   000132  6EF8               	movwf	tblptru,c
   108   000134  EE00  F001         	lfsr	0,__pdataCOMRAM
   109   000138  EE10 F00F          	lfsr	1,15
   110   00013C                     copy_data0:
   111   00013C  0009               	tblrd		*+
   112   00013E  CFF5 FFEE          	movff	tablat,postinc0
   113   000142  50E5               	movf	postdec1,w,c
   114   000144  50E1               	movf	fsr1l,w,c
   115   000146  E1FA               	bnz	copy_data0
   116                           
   117                           ; Clear objects allocated to COMRAM (3 bytes)
   118   000148  6A18               	clrf	(__pbssCOMRAM+2)& (0+255),c
   119   00014A  6A17               	clrf	(__pbssCOMRAM+1)& (0+255),c
   120   00014C  6A16               	clrf	__pbssCOMRAM& (0+255),c
   121   00014E                     end_of_initialization:
   122                           	callstack 0
   123   00014E                     __end_of__initialization:
   124                           	callstack 0
   125   00014E  9019               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126   000150  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127   000152  0100               	movlb	0
   128   000154  EFC2  F000         	goto	_main	;jump to C main() function
   129                           
   130                           	psect	bssCOMRAM
   131   000016                     __pbssCOMRAM:
   132                           	callstack 0
   133   000016                     _Hundreds:
   134                           	callstack 0
   135   000016                     	ds	1
   136   000017                     _Tens:
   137                           	callstack 0
   138   000017                     	ds	1
   139   000018                     _Units:
   140                           	callstack 0
   141   000018                     	ds	1
   142                           
   143                           	psect	dataCOMRAM
   144   000001                     __pdataCOMRAM:
   145                           	callstack 0
   146   000001                     _Numbers_2:
   147                           	callstack 0
   148   000001                     	ds	10
   149   00000B                     _Display:
   150                           	callstack 0
   151   00000B                     	ds	5
   152                           
   153                           	psect	cstackCOMRAM
   154   000010                     __pcstackCOMRAM:
   155                           	callstack 0
   156   000010                     Display_Function@D2:
   157                           	callstack 0
   158                           
   159                           ; 1 bytes @ 0x0
   160   000010                     	ds	1
   161   000011                     Display_Function@D3:
   162                           	callstack 0
   163                           
   164                           ; 1 bytes @ 0x1
   165   000011                     	ds	1
   166   000012                     Display_Function@D4:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0x2
   170   000012                     	ds	1
   171   000013                     ??_Display_Function:
   172                           
   173                           ; 1 bytes @ 0x3
   174   000013                     	ds	2
   175   000015                     Display_Function@D1:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x5
   179   000015                     	ds	1
   180   000016                     
   181                           ; 1 bytes @ 0x6
   182 ;;
   183 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   184 ;;
   185 ;; *************** function _main *****************
   186 ;; Defined at:
   187 ;;		line 35 in file "main.c"
   188 ;; Parameters:    Size  Location     Type
   189 ;;		None
   190 ;; Auto vars:     Size  Location     Type
   191 ;;		None
   192 ;; Return value:  Size  Location     Type
   193 ;;                  1    wreg      void 
   194 ;; Registers used:
   195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   196 ;; Tracked objects:
   197 ;;		On entry : 0/0
   198 ;;		On exit  : 0/0
   199 ;;		Unchanged: 0/0
   200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   201 ;;      Params:         0       0       0       0       0       0       0       0       0
   202 ;;      Locals:         0       0       0       0       0       0       0       0       0
   203 ;;      Temps:          0       0       0       0       0       0       0       0       0
   204 ;;      Totals:         0       0       0       0       0       0       0       0       0
   205 ;;Total ram usage:        0 bytes
   206 ;; Hardware stack levels required when called: 2
   207 ;; This function calls:
   208 ;;		_Configuration
   209 ;;		_Display_Function
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216   000184                     __ptext0:
   217                           	callstack 0
   218   000184                     _main:
   219                           	callstack 29
   220   000184                     
   221                           ;main.c: 38:     Configuration();
   222   000184  ECAC  F000         	call	_Configuration	;wreg free
   223   000188                     l821:
   224                           
   225                           ;main.c: 44:         Display_Function(3, 7, 4, 1);
   226   000188  0E07               	movlw	7
   227   00018A  6E10               	movwf	Display_Function@D2^0,c
   228   00018C  0E04               	movlw	4
   229   00018E  6E11               	movwf	Display_Function@D3^0,c
   230   000190  0E01               	movlw	1
   231   000192  6E12               	movwf	Display_Function@D4^0,c
   232   000194  0E03               	movlw	3
   233   000196  EC09  F000         	call	_Display_Function
   234   00019A  EFC4  F000         	goto	l821
   235   00019E  EF07  F000         	goto	start
   236   0001A2                     __end_of_main:
   237                           	callstack 0
   238                           
   239 ;; *************** function _Display_Function *****************
   240 ;; Defined at:
   241 ;;		line 101 in file "main.c"
   242 ;; Parameters:    Size  Location     Type
   243 ;;  D1              1    wreg     unsigned char 
   244 ;;  D2              1    0[COMRAM] unsigned char 
   245 ;;  D3              1    1[COMRAM] unsigned char 
   246 ;;  D4              1    2[COMRAM] unsigned char 
   247 ;; Auto vars:     Size  Location     Type
   248 ;;  D1              1    5[COMRAM] unsigned char 
   249 ;; Return value:  Size  Location     Type
   250 ;;                  1    wreg      void 
   251 ;; Registers used:
   252 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   253 ;; Tracked objects:
   254 ;;		On entry : 0/0
   255 ;;		On exit  : 0/0
   256 ;;		Unchanged: 0/0
   257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   258 ;;      Params:         3       0       0       0       0       0       0       0       0
   259 ;;      Locals:         1       0       0       0       0       0       0       0       0
   260 ;;      Temps:          2       0       0       0       0       0       0       0       0
   261 ;;      Totals:         6       0       0       0       0       0       0       0       0
   262 ;;Total ram usage:        6 bytes
   263 ;; Hardware stack levels used: 1
   264 ;; Hardware stack levels required when called: 1
   265 ;; This function calls:
   266 ;;		Nothing
   267 ;; This function is called by:
   268 ;;		_main
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272                           	psect	text1
   273   000012                     __ptext1:
   274                           	callstack 0
   275   000012                     _Display_Function:
   276                           	callstack 29
   277                           
   278                           ;incstack = 0
   279                           ;Display_Function@D1 stored from wreg
   280   000012  6E15               	movwf	Display_Function@D1^0,c
   281   000014                     
   282                           ;main.c: 103:     LATA = 0x01;
   283   000014  0E01               	movlw	1
   284   000016  6E89               	movwf	137,c	;volatile
   285   000018                     
   286                           ;main.c: 104:     LATD = Numbers_2 [D1];
   287   000018  0E01               	movlw	low _Numbers_2
   288   00001A  2415               	addwf	Display_Function@D1^0,w,c
   289   00001C  6ED9               	movwf	fsr2l,c
   290   00001E  6ADA               	clrf	fsr2h,c
   291   000020  0E00               	movlw	high _Numbers_2
   292   000022  22DA               	addwfc	fsr2h,f,c
   293   000024  50DF               	movf	indf2,w,c
   294   000026  6E8C               	movwf	140,c	;volatile
   295   000028                     
   296                           ;main.c: 105:     _delay((unsigned long)((500)*(8000000/4000.0)));
   297   000028  0E06               	movlw	6
   298   00002A  6E14               	movwf	(??_Display_Function+1)^0,c
   299   00002C  0E13               	movlw	19
   300   00002E  6E13               	movwf	??_Display_Function^0,c
   301   000030  0EAE               	movlw	174
   302   000032                     u57:
   303   000032  2EE8               	decfsz	wreg,f,c
   304   000034  D7FE               	bra	u57
   305   000036  2E13               	decfsz	??_Display_Function^0,f,c
   306   000038  D7FC               	bra	u57
   307   00003A  2E14               	decfsz	(??_Display_Function+1)^0,f,c
   308   00003C  D7FA               	bra	u57
   309   00003E                     
   310                           ;main.c: 106:     LATA = 0x02;
   311   00003E  0E02               	movlw	2
   312   000040  6E89               	movwf	137,c	;volatile
   313                           
   314                           ;main.c: 107:     LATD = Numbers_2 [D2];
   315   000042  0E01               	movlw	low _Numbers_2
   316   000044  2410               	addwf	Display_Function@D2^0,w,c
   317   000046  6ED9               	movwf	fsr2l,c
   318   000048  6ADA               	clrf	fsr2h,c
   319   00004A  0E00               	movlw	high _Numbers_2
   320   00004C  22DA               	addwfc	fsr2h,f,c
   321   00004E  50DF               	movf	indf2,w,c
   322   000050  6E8C               	movwf	140,c	;volatile
   323   000052                     
   324                           ;main.c: 108:     _delay((unsigned long)((500)*(8000000/4000.0)));
   325   000052  0E06               	movlw	6
   326   000054  6E14               	movwf	(??_Display_Function+1)^0,c
   327   000056  0E13               	movlw	19
   328   000058  6E13               	movwf	??_Display_Function^0,c
   329   00005A  0EAE               	movlw	174
   330   00005C                     u67:
   331   00005C  2EE8               	decfsz	wreg,f,c
   332   00005E  D7FE               	bra	u67
   333   000060  2E13               	decfsz	??_Display_Function^0,f,c
   334   000062  D7FC               	bra	u67
   335   000064  2E14               	decfsz	(??_Display_Function+1)^0,f,c
   336   000066  D7FA               	bra	u67
   337   000068                     
   338                           ;main.c: 109:     LATA = 0x04;
   339   000068  0E04               	movlw	4
   340   00006A  6E89               	movwf	137,c	;volatile
   341   00006C                     
   342                           ;main.c: 110:     LATD = Numbers_2 [D3];
   343   00006C  0E01               	movlw	low _Numbers_2
   344   00006E  2411               	addwf	Display_Function@D3^0,w,c
   345   000070  6ED9               	movwf	fsr2l,c
   346   000072  6ADA               	clrf	fsr2h,c
   347   000074  0E00               	movlw	high _Numbers_2
   348   000076  22DA               	addwfc	fsr2h,f,c
   349   000078  50DF               	movf	indf2,w,c
   350   00007A  6E8C               	movwf	140,c	;volatile
   351   00007C                     
   352                           ;main.c: 111:     _delay((unsigned long)((500)*(8000000/4000.0)));
   353   00007C  0E06               	movlw	6
   354   00007E  6E14               	movwf	(??_Display_Function+1)^0,c
   355   000080  0E13               	movlw	19
   356   000082  6E13               	movwf	??_Display_Function^0,c
   357   000084  0EAE               	movlw	174
   358   000086                     u77:
   359   000086  2EE8               	decfsz	wreg,f,c
   360   000088  D7FE               	bra	u77
   361   00008A  2E13               	decfsz	??_Display_Function^0,f,c
   362   00008C  D7FC               	bra	u77
   363   00008E  2E14               	decfsz	(??_Display_Function+1)^0,f,c
   364   000090  D7FA               	bra	u77
   365                           
   366                           ;main.c: 112:     LATA = 0x08;
   367   000092  0E08               	movlw	8
   368   000094  6E89               	movwf	137,c	;volatile
   369   000096                     
   370                           ;main.c: 113:     LATD = Numbers_2 [D4];
   371   000096  0E01               	movlw	low _Numbers_2
   372   000098  2412               	addwf	Display_Function@D4^0,w,c
   373   00009A  6ED9               	movwf	fsr2l,c
   374   00009C  6ADA               	clrf	fsr2h,c
   375   00009E  0E00               	movlw	high _Numbers_2
   376   0000A0  22DA               	addwfc	fsr2h,f,c
   377   0000A2  50DF               	movf	indf2,w,c
   378   0000A4  6E8C               	movwf	140,c	;volatile
   379   0000A6                     
   380                           ;main.c: 114:     _delay((unsigned long)((500)*(8000000/4000.0)));
   381   0000A6  0E06               	movlw	6
   382   0000A8  6E14               	movwf	(??_Display_Function+1)^0,c
   383   0000AA  0E13               	movlw	19
   384   0000AC  6E13               	movwf	??_Display_Function^0,c
   385   0000AE  0EAE               	movlw	174
   386   0000B0                     u87:
   387   0000B0  2EE8               	decfsz	wreg,f,c
   388   0000B2  D7FE               	bra	u87
   389   0000B4  2E13               	decfsz	??_Display_Function^0,f,c
   390   0000B6  D7FC               	bra	u87
   391   0000B8  2E14               	decfsz	(??_Display_Function+1)^0,f,c
   392   0000BA  D7FA               	bra	u87
   393   0000BC  0012               	return		;funcret
   394   0000BE                     __end_of_Display_Function:
   395                           	callstack 0
   396                           
   397 ;; *************** function _Configuration *****************
   398 ;; Defined at:
   399 ;;		line 50 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, status,2
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   413 ;;      Params:         0       0       0       0       0       0       0       0       0
   414 ;;      Locals:         0       0       0       0       0       0       0       0       0
   415 ;;      Temps:          0       0       0       0       0       0       0       0       0
   416 ;;      Totals:         0       0       0       0       0       0       0       0       0
   417 ;;Total ram usage:        0 bytes
   418 ;; Hardware stack levels used: 1
   419 ;; Hardware stack levels required when called: 1
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           	psect	text2
   428   000158                     __ptext2:
   429                           	callstack 0
   430   000158                     _Configuration:
   431                           	callstack 29
   432   000158                     
   433                           ;main.c: 52:     OSCCON = 0x72;
   434   000158  0E72               	movlw	114
   435   00015A  6ED3               	movwf	211,c	;volatile
   436                           
   437                           ;main.c: 53:     ADCON1 = 0x0F;
   438   00015C  0E0F               	movlw	15
   439   00015E  6EC1               	movwf	193,c	;volatile
   440                           
   441                           ;main.c: 55:     TRISA = 0x00;
   442   000160  0E00               	movlw	0
   443   000162  6E92               	movwf	146,c	;volatile
   444                           
   445                           ;main.c: 56:     TRISB = 0x03;
   446   000164  0E03               	movlw	3
   447   000166  6E93               	movwf	147,c	;volatile
   448                           
   449                           ;main.c: 57:     TRISD = 0x00;
   450   000168  0E00               	movlw	0
   451   00016A  6E95               	movwf	149,c	;volatile
   452                           
   453                           ;main.c: 59:     LATA = 0x00;
   454   00016C  0E00               	movlw	0
   455   00016E  6E89               	movwf	137,c	;volatile
   456                           
   457                           ;main.c: 60:     LATB = 0x00;
   458   000170  0E00               	movlw	0
   459   000172  6E8A               	movwf	138,c	;volatile
   460                           
   461                           ;main.c: 61:     LATD = 0x00;
   462   000174  0E00               	movlw	0
   463   000176  6E8C               	movwf	140,c	;volatile
   464   000178                     
   465                           ;main.c: 64:     RCONbits.IPEN = 0;
   466   000178  9ED0               	bcf	208,7,c	;volatile
   467   00017A                     
   468                           ;main.c: 65:     INTCONbits.GIE = 1;
   469   00017A  8EF2               	bsf	242,7,c	;volatile
   470   00017C                     
   471                           ;main.c: 66:     INTCONbits.INT0IE = 1;
   472   00017C  88F2               	bsf	242,4,c	;volatile
   473   00017E                     
   474                           ;main.c: 67:     INTCONbits.INT0IF = 0;
   475   00017E  92F2               	bcf	242,1,c	;volatile
   476   000180                     
   477                           ;main.c: 68:     INTCON2bits.INTEDG0 = 0;
   478   000180  9CF1               	bcf	241,6,c	;volatile
   479   000182  0012               	return		;funcret
   480   000184                     __end_of_Configuration:
   481                           	callstack 0
   482                           
   483 ;; *************** function _INT *****************
   484 ;; Defined at:
   485 ;;		line 74 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   499 ;;      Params:         0       0       0       0       0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0       0       0       0       0
   502 ;;      Totals:         0       0       0       0       0       0       0       0       0
   503 ;;Total ram usage:        0 bytes
   504 ;; Hardware stack levels used: 1
   505 ;; This function calls:
   506 ;;		Nothing
   507 ;; This function is called by:
   508 ;;		Interrupt level 2
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	intcode
   513   000008                     __pintcode:
   514                           	callstack 0
   515   000008                     _INT:
   516                           	callstack 29
   517                           
   518                           ;incstack = 0
   519   000008  8219               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   520   00000A  ED5F  F000         	call	int_func,f	;refresh shadow registers
   521                           
   522                           	psect	intcode_body
   523   0000BE                     __pintcode_body:
   524                           	callstack 29
   525   0000BE                     int_func:
   526                           	callstack 29
   527   0000BE  0006               	pop		; remove dummy address from shadow register refresh
   528   0000C0                     
   529                           ;main.c: 76:     if (INT0IF) {
   530   0000C0  A2F2               	btfss	4082,1,c	;volatile
   531   0000C2  EF65  F000         	goto	i2u1_41
   532   0000C6  EF67  F000         	goto	i2u1_40
   533   0000CA                     i2u1_41:
   534   0000CA  EF92  F000         	goto	i2l62
   535   0000CE                     i2u1_40:
   536   0000CE                     
   537                           ;main.c: 78:         INT0IF = 0;
   538   0000CE  92F2               	bcf	4082,1,c	;volatile
   539   0000D0                     
   540                           ;main.c: 79:         Units++;
   541   0000D0  2A18               	incf	_Units^0,f,c
   542   0000D2                     
   543                           ;main.c: 81:         if (Units == 10) {
   544   0000D2  0E0A               	movlw	10
   545   0000D4  1818               	xorwf	_Units^0,w,c
   546   0000D6  A4D8               	btfss	status,2,c
   547   0000D8  EF70  F000         	goto	i2u2_41
   548   0000DC  EF72  F000         	goto	i2u2_40
   549   0000E0                     i2u2_41:
   550   0000E0  EF77  F000         	goto	i2l789
   551   0000E4                     i2u2_40:
   552   0000E4                     
   553                           ;main.c: 83:             Units = 0;
   554   0000E4  0E00               	movlw	0
   555   0000E6  6E18               	movwf	_Units^0,c
   556   0000E8                     
   557                           ;main.c: 84:             Tens++;
   558   0000E8  2A17               	incf	_Tens^0,f,c
   559                           
   560                           ;main.c: 86:         } else if (Tens == 10) {
   561   0000EA  EF92  F000         	goto	i2l62
   562   0000EE                     i2l789:
   563   0000EE  0E0A               	movlw	10
   564   0000F0  1817               	xorwf	_Tens^0,w,c
   565   0000F2  A4D8               	btfss	status,2,c
   566   0000F4  EF7E  F000         	goto	i2u3_41
   567   0000F8  EF80  F000         	goto	i2u3_40
   568   0000FC                     i2u3_41:
   569   0000FC  EF85  F000         	goto	i2l795
   570   000100                     i2u3_40:
   571   000100                     
   572                           ;main.c: 88:             Tens = 0;
   573   000100  0E00               	movlw	0
   574   000102  6E17               	movwf	_Tens^0,c
   575   000104                     
   576                           ;main.c: 89:             Hundreds++;
   577   000104  2A16               	incf	_Hundreds^0,f,c
   578                           
   579                           ;main.c: 91:         } else if (Hundreds == 10) {
   580   000106  EF92  F000         	goto	i2l62
   581   00010A                     i2l795:
   582   00010A  0E0A               	movlw	10
   583   00010C  1816               	xorwf	_Hundreds^0,w,c
   584   00010E  A4D8               	btfss	status,2,c
   585   000110  EF8C  F000         	goto	i2u4_41
   586   000114  EF8E  F000         	goto	i2u4_40
   587   000118                     i2u4_41:
   588   000118  EF92  F000         	goto	i2l58
   589   00011C                     i2u4_40:
   590   00011C                     
   591                           ;main.c: 93:             Hundreds = 0;
   592   00011C  0E00               	movlw	0
   593   00011E  6E16               	movwf	_Hundreds^0,c
   594   000120  EF92  F000         	goto	i2l62
   595   000124                     i2l58:
   596   000124                     i2l62:
   597   000124  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   598   000126  0011               	retfie		f
   599   000128                     __end_of_INT:
   600                           	callstack 0
   601   000000                     
   602                           	psect	rparam
   603   000000                     
   604                           	psect	temp
   605   000019                     btemp:
   606                           	callstack 0
   607   000019                     	ds	1
   608   000000                     int$flags	set	btemp
   609   000000                     wtemp8	set	btemp+1
   610   000000                     ttemp5	set	btemp+1
   611   000000                     ttemp6	set	btemp+4
   612   000000                     ttemp7	set	btemp+8
   613                           
   614                           	psect	config
   615                           
   616                           ;Config register CONFIG1L @ 0x300000
   617                           ;	PLL Prescaler Selection bits
   618                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   619                           ;	System Clock Postscaler Selection bits
   620                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   621                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   622                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   623   300000                     	org	3145728
   624   300000  00                 	db	0
   625                           
   626                           ;Config register CONFIG1H @ 0x300001
   627                           ;	Oscillator Selection bits
   628                           ;	FOSC = EC_EC, EC oscillator, CLKO function on RA6 (EC)
   629                           ;	Fail-Safe Clock Monitor Enable bit
   630                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   631                           ;	Internal/External Oscillator Switchover bit
   632                           ;	IESO = OFF, Oscillator Switchover mode disabled
   633   300001                     	org	3145729
   634   300001  05                 	db	5
   635                           
   636                           ;Config register CONFIG2L @ 0x300002
   637                           ;	Power-up Timer Enable bit
   638                           ;	PWRT = OFF, PWRT disabled
   639                           ;	Brown-out Reset Enable bits
   640                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   641                           ;	Brown-out Reset Voltage bits
   642                           ;	BORV = 3, Minimum setting 2.05V
   643                           ;	USB Voltage Regulator Enable bit
   644                           ;	VREGEN = OFF, USB voltage regulator disabled
   645   300002                     	org	3145730
   646   300002  1F                 	db	31
   647                           
   648                           ;Config register CONFIG2H @ 0x300003
   649                           ;	Watchdog Timer Enable bit
   650                           ;	WDT = ON, WDT enabled
   651                           ;	Watchdog Timer Postscale Select bits
   652                           ;	WDTPS = 32768, 1:32768
   653   300003                     	org	3145731
   654   300003  1F                 	db	31
   655                           
   656                           ; Padding undefined space
   657   300004                     	org	3145732
   658   300004  FF                 	db	255
   659                           
   660                           ;Config register CONFIG3H @ 0x300005
   661                           ;	CCP2 MUX bit
   662                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   663                           ;	PORTB A/D Enable bit
   664                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   665                           ;	Low-Power Timer 1 Oscillator Enable bit
   666                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   667                           ;	MCLR Pin Enable bit
   668                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   669   300005                     	org	3145733
   670   300005  83                 	db	131
   671                           
   672                           ;Config register CONFIG4L @ 0x300006
   673                           ;	Stack Full/Underflow Reset Enable bit
   674                           ;	STVREN = ON, Stack full/underflow will cause Reset
   675                           ;	Single-Supply ICSP Enable bit
   676                           ;	LVP = ON, Single-Supply ICSP enabled
   677                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   678                           ;	ICPRT = OFF, ICPORT disabled
   679                           ;	Extended Instruction Set Enable bit
   680                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   681                           ;	Background Debugger Enable bit
   682                           ;	DEBUG = 0x1, unprogrammed default
   683   300006                     	org	3145734
   684   300006  85                 	db	133
   685                           
   686                           ; Padding undefined space
   687   300007                     	org	3145735
   688   300007  FF                 	db	255
   689                           
   690                           ;Config register CONFIG5L @ 0x300008
   691                           ;	Code Protection bit
   692                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   693                           ;	Code Protection bit
   694                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   695                           ;	Code Protection bit
   696                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   697                           ;	Code Protection bit
   698                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   699   300008                     	org	3145736
   700   300008  0F                 	db	15
   701                           
   702                           ;Config register CONFIG5H @ 0x300009
   703                           ;	Boot Block Code Protection bit
   704                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   705                           ;	Data EEPROM Code Protection bit
   706                           ;	CPD = OFF, Data EEPROM is not code-protected
   707   300009                     	org	3145737
   708   300009  C0                 	db	192
   709                           
   710                           ;Config register CONFIG6L @ 0x30000A
   711                           ;	Write Protection bit
   712                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   713                           ;	Write Protection bit
   714                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   715                           ;	Write Protection bit
   716                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   717                           ;	Write Protection bit
   718                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   719   30000A                     	org	3145738
   720   30000A  0F                 	db	15
   721                           
   722                           ;Config register CONFIG6H @ 0x30000B
   723                           ;	Configuration Register Write Protection bit
   724                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   725                           ;	Boot Block Write Protection bit
   726                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   727                           ;	Data EEPROM Write Protection bit
   728                           ;	WRTD = OFF, Data EEPROM is not write-protected
   729   30000B                     	org	3145739
   730   30000B  E0                 	db	224
   731                           
   732                           ;Config register CONFIG7L @ 0x30000C
   733                           ;	Table Read Protection bit
   734                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   735                           ;	Table Read Protection bit
   736                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   737                           ;	Table Read Protection bit
   738                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   739                           ;	Table Read Protection bit
   740                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   741   30000C                     	org	3145740
   742   30000C  0F                 	db	15
   743                           
   744                           ;Config register CONFIG7H @ 0x30000D
   745                           ;	Boot Block Table Read Protection bit
   746                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   747   30000D                     	org	3145741
   748   30000D  40                 	db	64
   749                           tosu	equ	0xFFF
   750                           tosh	equ	0xFFE
   751                           tosl	equ	0xFFD
   752                           stkptr	equ	0xFFC
   753                           pclatu	equ	0xFFB
   754                           pclath	equ	0xFFA
   755                           pcl	equ	0xFF9
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           prodh	equ	0xFF4
   761                           prodl	equ	0xFF3
   762                           indf0	equ	0xFEF
   763                           postinc0	equ	0xFEE
   764                           postdec0	equ	0xFED
   765                           preinc0	equ	0xFEC
   766                           plusw0	equ	0xFEB
   767                           fsr0h	equ	0xFEA
   768                           fsr0l	equ	0xFE9
   769                           wreg	equ	0xFE8
   770                           indf1	equ	0xFE7
   771                           postinc1	equ	0xFE6
   772                           postdec1	equ	0xFE5
   773                           preinc1	equ	0xFE4
   774                           plusw1	equ	0xFE3
   775                           fsr1h	equ	0xFE2
   776                           fsr1l	equ	0xFE1
   777                           bsr	equ	0xFE0
   778                           indf2	equ	0xFDF
   779                           postinc2	equ	0xFDE
   780                           postdec2	equ	0xFDD
   781                           preinc2	equ	0xFDC
   782                           plusw2	equ	0xFDB
   783                           fsr2h	equ	0xFDA
   784                           fsr2l	equ	0xFD9
   785                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      6      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Display_Function

Critical Paths under _INT in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     316
                      _Configuration
                   _Display_Function
 ---------------------------------------------------------------------------------
 (1) _Display_Function                                     6     3      3     316
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _Configuration                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _INT                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configuration
   _Display_Function

 _INT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      6      18       1       25.5%
BITBIGSFRllhh       2B      0       0      24        0.0%
BITBIGSFRllll       29      0       0      28        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRlhl         E      0       0      23        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlllhh       5      0       0      26        0.0%
BITBIGSFRlhh         2      0       0      22        0.0%
BITBIGSFRlllhl       1      0       0      27        0.0%
BITBIGSFRllhl        1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      29        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Dec 06 23:37:47 2023

                      l51 0182                        l65 00BC                        u57 0032  
                      u67 005C                        u77 0086                        u87 00B0  
                     l801 0018                       l811 006C                       l803 0028  
                     l741 0158                       l813 007C                       l805 003E  
                     l821 0188                       l751 0180                       l743 0178  
                     l815 0096                       l807 0052                       l745 017A  
                     l817 00A6                       l809 0068                       l747 017C  
                     l819 0184                       l749 017E                       l799 0014  
                     _INT 0008                       wreg 0FE8                      ?_INT 0010  
                    _LATA 0F89                      _LATB 0F8A                      _LATD 0F8C  
                    i2l62 0124                      i2l58 0124                      _Tens 0017  
                    _main 0184                      indf2 0FDF                      fsr1l 0FE1  
                    fsr2l 0FD9                      btemp 0019                      start 000E  
            ___param_bank 0000                     ??_INT 0010                     ?_main 0010  
                   i2l781 00D0                     i2l791 0100                     i2l783 00D2  
                   i2l793 0104                     i2l785 00E4                     i2l777 00C0  
                   i2l795 010A                     i2l787 00E8                     i2l779 00CE  
                   i2l797 011C                     i2l789 00EE                     _TRISA 0F92  
                   _TRISB 0F93                     _TRISD 0F95                     _Units 0018  
                   tablat 0FF5                     ttemp5 001A                     ttemp6 001D  
                   ttemp7 0021                     status 0FD8                     wtemp8 001A  
         __initialization 0128              __end_of_main 01A2                    ??_main 0016  
           __activetblptr 0000                    _ADCON1 0FC1                    _INT0IF 7F91  
                  _OSCCON 0FD3                    i2u1_40 00CE                    i2u1_41 00CA  
                  i2u2_40 00E4                    i2u2_41 00E0                    i2u3_40 0100  
                  i2u3_41 00FC                    i2u4_40 011C                    i2u4_41 0118  
                  isa$std 0001              __pdataCOMRAM 0001                    tblptrh 0FF7  
                  tblptrl 0FF6                    tblptru 0FF8                __accesstop 0060  
 __end_of__initialization 014E             ___rparam_used 0001            __pcstackCOMRAM 0010  
      Display_Function@D1 0015        Display_Function@D2 0010        Display_Function@D3 0011  
      Display_Function@D4 0012     __end_of_Configuration 0184                   _Display 000B  
                 __Hparam 0000                   __Lparam 0000                   __pcinit 0128  
                 __ramtop 0800                   __ptext0 0184                   __ptext1 0012  
                 __ptext2 0158            __pintcode_body 00BE      end_of_initialization 014E  
                 int_func 00BE          _Display_Function 0012                   postdec1 0FE5  
                 postinc0 0FEE             __pidataCOMRAM 01A2       start_initialization 0128  
             __end_of_INT 0128                 _Numbers_2 0001               __pbssCOMRAM 0016  
               __pintcode 0008  __end_of_Display_Function 00BE                  _RCONbits 0FD0  
             _INTCON2bits 0FF1                 copy_data0 013C             _Configuration 0158  
                _Hundreds 0016                  __Hrparam 0000                  __Lrparam 0000  
          ?_Configuration 0010                  isa$xinst 0000                  int$flags 0019  
              _INTCONbits 0FF2                  intlevel2 0000         ?_Display_Function 0010  
      ??_Display_Function 0013           ??_Configuration 0010  
